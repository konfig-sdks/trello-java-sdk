/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Lists
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Lists {
  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private String closed;

  public static final String SERIALIZED_NAME_ID_BOARD = "idBoard";
  @SerializedName(SERIALIZED_NAME_ID_BOARD)
  private String idBoard;

  public static final String SERIALIZED_NAME_ID_LIST_SOURCE = "idListSource";
  @SerializedName(SERIALIZED_NAME_ID_LIST_SOURCE)
  private String idListSource;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POS = "pos";
  @SerializedName(SERIALIZED_NAME_POS)
  private String pos;

  public static final String SERIALIZED_NAME_SUBSCRIBED = "subscribed";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED)
  private String subscribed;

  public Lists() {
  }

  public Lists closed(String closed) {
    
    
    
    
    this.closed = closed;
    return this;
  }

   /**
   *  true or false
   * @return closed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " true or false")

  public String getClosed() {
    return closed;
  }


  public void setClosed(String closed) {
    
    
    
    this.closed = closed;
  }


  public Lists idBoard(String idBoard) {
    
    
    
    
    this.idBoard = idBoard;
    return this;
  }

   /**
   * id of the board that the list should be added to
   * @return idBoard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "id of the board that the list should be added to")

  public String getIdBoard() {
    return idBoard;
  }


  public void setIdBoard(String idBoard) {
    
    
    
    this.idBoard = idBoard;
  }


  public Lists idListSource(String idListSource) {
    
    
    
    
    this.idListSource = idListSource;
    return this;
  }

   /**
   * The id of the list to copy into a new list.
   * @return idListSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the list to copy into a new list.")

  public String getIdListSource() {
    return idListSource;
  }


  public void setIdListSource(String idListSource) {
    
    
    
    this.idListSource = idListSource;
  }


  public Lists name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * a string with a length from 1 to 16384
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "a string with a length from 1 to 16384")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Lists pos(String pos) {
    
    
    
    
    this.pos = pos;
    return this;
  }

   /**
   * A position. top , bottom , or a positive number.
   * @return pos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A position. top , bottom , or a positive number.")

  public String getPos() {
    return pos;
  }


  public void setPos(String pos) {
    
    
    
    this.pos = pos;
  }


  public Lists subscribed(String subscribed) {
    
    
    
    
    this.subscribed = subscribed;
    return this;
  }

   /**
   *  true or false
   * @return subscribed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " true or false")

  public String getSubscribed() {
    return subscribed;
  }


  public void setSubscribed(String subscribed) {
    
    
    
    this.subscribed = subscribed;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Lists instance itself
   */
  public Lists putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Lists lists = (Lists) o;
    return Objects.equals(this.closed, lists.closed) &&
        Objects.equals(this.idBoard, lists.idBoard) &&
        Objects.equals(this.idListSource, lists.idListSource) &&
        Objects.equals(this.name, lists.name) &&
        Objects.equals(this.pos, lists.pos) &&
        Objects.equals(this.subscribed, lists.subscribed)&&
        Objects.equals(this.additionalProperties, lists.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closed, idBoard, idListSource, name, pos, subscribed, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Lists {\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    idBoard: ").append(toIndentedString(idBoard)).append("\n");
    sb.append("    idListSource: ").append(toIndentedString(idListSource)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pos: ").append(toIndentedString(pos)).append("\n");
    sb.append("    subscribed: ").append(toIndentedString(subscribed)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed");
    openapiFields.add("idBoard");
    openapiFields.add("idListSource");
    openapiFields.add("name");
    openapiFields.add("pos");
    openapiFields.add("subscribed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Lists
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Lists.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Lists is not found in the empty JSON string", Lists.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("closed") != null && !jsonObj.get("closed").isJsonNull()) && !jsonObj.get("closed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closed").toString()));
      }
      if ((jsonObj.get("idBoard") != null && !jsonObj.get("idBoard").isJsonNull()) && !jsonObj.get("idBoard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idBoard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idBoard").toString()));
      }
      if ((jsonObj.get("idListSource") != null && !jsonObj.get("idListSource").isJsonNull()) && !jsonObj.get("idListSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idListSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idListSource").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pos") != null && !jsonObj.get("pos").isJsonNull()) && !jsonObj.get("pos").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pos` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pos").toString()));
      }
      if ((jsonObj.get("subscribed") != null && !jsonObj.get("subscribed").isJsonNull()) && !jsonObj.get("subscribed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscribed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Lists.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Lists' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Lists> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Lists.class));

       return (TypeAdapter<T>) new TypeAdapter<Lists>() {
           @Override
           public void write(JsonWriter out, Lists value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Lists read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Lists instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Lists given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Lists
  * @throws IOException if the JSON string is invalid with respect to Lists
  */
  public static Lists fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Lists.class);
  }

 /**
  * Convert an instance of Lists to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

