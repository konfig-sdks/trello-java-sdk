/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CardsStickers
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CardsStickers {
  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private String left;

  public static final String SERIALIZED_NAME_ROTATE = "rotate";
  @SerializedName(SERIALIZED_NAME_ROTATE)
  private String rotate;

  public static final String SERIALIZED_NAME_TOP = "top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private String top;

  public static final String SERIALIZED_NAME_Z_INDEX = "zIndex";
  @SerializedName(SERIALIZED_NAME_Z_INDEX)
  private String zIndex;

  public CardsStickers() {
  }

  public CardsStickers image(String image) {
    
    
    
    
    this.image = image;
    return this;
  }

   /**
   * a string with a length from 0 to 16384
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "a string with a length from 0 to 16384")

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    
    
    
    this.image = image;
  }


  public CardsStickers left(String left) {
    
    
    
    
    this.left = left;
    return this;
  }

   /**
   * undefined
   * @return left
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "undefined")

  public String getLeft() {
    return left;
  }


  public void setLeft(String left) {
    
    
    
    this.left = left;
  }


  public CardsStickers rotate(String rotate) {
    
    
    
    
    this.rotate = rotate;
    return this;
  }

   /**
   * undefined
   * @return rotate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "undefined")

  public String getRotate() {
    return rotate;
  }


  public void setRotate(String rotate) {
    
    
    
    this.rotate = rotate;
  }


  public CardsStickers top(String top) {
    
    
    
    
    this.top = top;
    return this;
  }

   /**
   * undefined
   * @return top
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "undefined")

  public String getTop() {
    return top;
  }


  public void setTop(String top) {
    
    
    
    this.top = top;
  }


  public CardsStickers zIndex(String zIndex) {
    
    
    
    
    this.zIndex = zIndex;
    return this;
  }

   /**
   * Valid Z values for stickers, must be an integer
   * @return zIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Valid Z values for stickers, must be an integer")

  public String getzIndex() {
    return zIndex;
  }


  public void setzIndex(String zIndex) {
    
    
    
    this.zIndex = zIndex;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CardsStickers instance itself
   */
  public CardsStickers putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardsStickers cardsStickers = (CardsStickers) o;
    return Objects.equals(this.image, cardsStickers.image) &&
        Objects.equals(this.left, cardsStickers.left) &&
        Objects.equals(this.rotate, cardsStickers.rotate) &&
        Objects.equals(this.top, cardsStickers.top) &&
        Objects.equals(this.zIndex, cardsStickers.zIndex)&&
        Objects.equals(this.additionalProperties, cardsStickers.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, left, rotate, top, zIndex, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardsStickers {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    rotate: ").append(toIndentedString(rotate)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    zIndex: ").append(toIndentedString(zIndex)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image");
    openapiFields.add("left");
    openapiFields.add("rotate");
    openapiFields.add("top");
    openapiFields.add("zIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CardsStickers
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CardsStickers.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardsStickers is not found in the empty JSON string", CardsStickers.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("left") != null && !jsonObj.get("left").isJsonNull()) && !jsonObj.get("left").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `left` to be a primitive type in the JSON string but got `%s`", jsonObj.get("left").toString()));
      }
      if ((jsonObj.get("rotate") != null && !jsonObj.get("rotate").isJsonNull()) && !jsonObj.get("rotate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotate").toString()));
      }
      if ((jsonObj.get("top") != null && !jsonObj.get("top").isJsonNull()) && !jsonObj.get("top").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `top` to be a primitive type in the JSON string but got `%s`", jsonObj.get("top").toString()));
      }
      if ((jsonObj.get("zIndex") != null && !jsonObj.get("zIndex").isJsonNull()) && !jsonObj.get("zIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zIndex").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardsStickers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardsStickers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardsStickers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardsStickers.class));

       return (TypeAdapter<T>) new TypeAdapter<CardsStickers>() {
           @Override
           public void write(JsonWriter out, CardsStickers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CardsStickers read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CardsStickers instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CardsStickers given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CardsStickers
  * @throws IOException if the JSON string is invalid with respect to CardsStickers
  */
  public static CardsStickers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardsStickers.class);
  }

 /**
  * Convert an instance of CardsStickers to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

