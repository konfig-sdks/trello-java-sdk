/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Members
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Members {
  public static final String SERIALIZED_NAME_AVATAR_SOURCE = "avatarSource";
  @SerializedName(SERIALIZED_NAME_AVATAR_SOURCE)
  private String avatarSource;

  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_INITIALS = "initials";
  @SerializedName(SERIALIZED_NAME_INITIALS)
  private String initials;

  public static final String SERIALIZED_NAME_PREFS_COLOR_BLIND = "prefs/colorBlind";
  @SerializedName(SERIALIZED_NAME_PREFS_COLOR_BLIND)
  private String prefsColorBlind;

  public static final String SERIALIZED_NAME_PREFS_LOCALE = "prefs/locale";
  @SerializedName(SERIALIZED_NAME_PREFS_LOCALE)
  private String prefsLocale;

  public static final String SERIALIZED_NAME_PREFS_MINUTES_BETWEEN_SUMMARIES = "prefs/minutesBetweenSummaries";
  @SerializedName(SERIALIZED_NAME_PREFS_MINUTES_BETWEEN_SUMMARIES)
  private String prefsMinutesBetweenSummaries;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public Members() {
  }

  public Members avatarSource(String avatarSource) {
    
    
    
    
    this.avatarSource = avatarSource;
    return this;
  }

   /**
   * One of: gravatar, none or upload
   * @return avatarSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "One of: gravatar, none or upload")

  public String getAvatarSource() {
    return avatarSource;
  }


  public void setAvatarSource(String avatarSource) {
    
    
    
    this.avatarSource = avatarSource;
  }


  public Members bio(String bio) {
    
    
    
    
    this.bio = bio;
    return this;
  }

   /**
   * a string with a length from 0 to 16384
   * @return bio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "a string with a length from 0 to 16384")

  public String getBio() {
    return bio;
  }


  public void setBio(String bio) {
    
    
    
    this.bio = bio;
  }


  public Members fullName(String fullName) {
    
    
    
    
    this.fullName = fullName;
    return this;
  }

   /**
   * A string with a length of at least 1.  Cannot begin or end with a space.
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A string with a length of at least 1.  Cannot begin or end with a space.")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    
    
    
    this.fullName = fullName;
  }


  public Members initials(String initials) {
    
    
    
    
    this.initials = initials;
    return this;
  }

   /**
   * A string with a length from 1 to 4.  Cannot begin or end with a space
   * @return initials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A string with a length from 1 to 4.  Cannot begin or end with a space")

  public String getInitials() {
    return initials;
  }


  public void setInitials(String initials) {
    
    
    
    this.initials = initials;
  }


  public Members prefsColorBlind(String prefsColorBlind) {
    
    
    
    
    this.prefsColorBlind = prefsColorBlind;
    return this;
  }

   /**
   *  true or false
   * @return prefsColorBlind
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " true or false")

  public String getPrefsColorBlind() {
    return prefsColorBlind;
  }


  public void setPrefsColorBlind(String prefsColorBlind) {
    
    
    
    this.prefsColorBlind = prefsColorBlind;
  }


  public Members prefsLocale(String prefsLocale) {
    
    
    
    
    this.prefsLocale = prefsLocale;
    return this;
  }

   /**
   * a string with a length from 0 to 255
   * @return prefsLocale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "a string with a length from 0 to 255")

  public String getPrefsLocale() {
    return prefsLocale;
  }


  public void setPrefsLocale(String prefsLocale) {
    
    
    
    this.prefsLocale = prefsLocale;
  }


  public Members prefsMinutesBetweenSummaries(String prefsMinutesBetweenSummaries) {
    
    
    
    
    this.prefsMinutesBetweenSummaries = prefsMinutesBetweenSummaries;
    return this;
  }

   /**
   * -1 (disabled), 1 or 60
   * @return prefsMinutesBetweenSummaries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "-1 (disabled), 1 or 60")

  public String getPrefsMinutesBetweenSummaries() {
    return prefsMinutesBetweenSummaries;
  }


  public void setPrefsMinutesBetweenSummaries(String prefsMinutesBetweenSummaries) {
    
    
    
    this.prefsMinutesBetweenSummaries = prefsMinutesBetweenSummaries;
  }


  public Members username(String username) {
    
    
    
    
    this.username = username;
    return this;
  }

   /**
   * A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique.
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique.")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    
    
    
    this.username = username;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Members instance itself
   */
  public Members putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Members members = (Members) o;
    return Objects.equals(this.avatarSource, members.avatarSource) &&
        Objects.equals(this.bio, members.bio) &&
        Objects.equals(this.fullName, members.fullName) &&
        Objects.equals(this.initials, members.initials) &&
        Objects.equals(this.prefsColorBlind, members.prefsColorBlind) &&
        Objects.equals(this.prefsLocale, members.prefsLocale) &&
        Objects.equals(this.prefsMinutesBetweenSummaries, members.prefsMinutesBetweenSummaries) &&
        Objects.equals(this.username, members.username)&&
        Objects.equals(this.additionalProperties, members.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarSource, bio, fullName, initials, prefsColorBlind, prefsLocale, prefsMinutesBetweenSummaries, username, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Members {\n");
    sb.append("    avatarSource: ").append(toIndentedString(avatarSource)).append("\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    initials: ").append(toIndentedString(initials)).append("\n");
    sb.append("    prefsColorBlind: ").append(toIndentedString(prefsColorBlind)).append("\n");
    sb.append("    prefsLocale: ").append(toIndentedString(prefsLocale)).append("\n");
    sb.append("    prefsMinutesBetweenSummaries: ").append(toIndentedString(prefsMinutesBetweenSummaries)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatarSource");
    openapiFields.add("bio");
    openapiFields.add("fullName");
    openapiFields.add("initials");
    openapiFields.add("prefs/colorBlind");
    openapiFields.add("prefs/locale");
    openapiFields.add("prefs/minutesBetweenSummaries");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Members
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Members.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Members is not found in the empty JSON string", Members.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("avatarSource") != null && !jsonObj.get("avatarSource").isJsonNull()) && !jsonObj.get("avatarSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatarSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatarSource").toString()));
      }
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("initials") != null && !jsonObj.get("initials").isJsonNull()) && !jsonObj.get("initials").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initials` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initials").toString()));
      }
      if ((jsonObj.get("prefs/colorBlind") != null && !jsonObj.get("prefs/colorBlind").isJsonNull()) && !jsonObj.get("prefs/colorBlind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs/colorBlind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs/colorBlind").toString()));
      }
      if ((jsonObj.get("prefs/locale") != null && !jsonObj.get("prefs/locale").isJsonNull()) && !jsonObj.get("prefs/locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs/locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs/locale").toString()));
      }
      if ((jsonObj.get("prefs/minutesBetweenSummaries") != null && !jsonObj.get("prefs/minutesBetweenSummaries").isJsonNull()) && !jsonObj.get("prefs/minutesBetweenSummaries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs/minutesBetweenSummaries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs/minutesBetweenSummaries").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Members.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Members' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Members> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Members.class));

       return (TypeAdapter<T>) new TypeAdapter<Members>() {
           @Override
           public void write(JsonWriter out, Members value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Members read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Members instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Members given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Members
  * @throws IOException if the JSON string is invalid with respect to Members
  */
  public static Members fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Members.class);
  }

 /**
  * Convert an instance of Members to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

