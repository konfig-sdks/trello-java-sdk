/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Checklists;
import com.konfigthis.client.model.ChecklistsCheckItems;
import com.konfigthis.client.model.ChecklistsIdCard;
import com.konfigthis.client.model.ChecklistsName;
import com.konfigthis.client.model.ChecklistsPos;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ChecklistApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChecklistApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ChecklistApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCheckItemsByIdChecklistCall(String idChecklist, ChecklistsCheckItems checklistsCheckItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checklistsCheckItems;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}/checkItems"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCheckItemsByIdChecklistValidateBeforeCall(String idChecklist, ChecklistsCheckItems checklistsCheckItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling addCheckItemsByIdChecklist(Async)");
        }

        // verify the required parameter 'checklistsCheckItems' is set
        if (checklistsCheckItems == null) {
            throw new ApiException("Missing the required parameter 'checklistsCheckItems' when calling addCheckItemsByIdChecklist(Async)");
        }

        return addCheckItemsByIdChecklistCall(idChecklist, checklistsCheckItems, _callback);

    }


    private ApiResponse<Void> addCheckItemsByIdChecklistWithHttpInfo(String idChecklist, ChecklistsCheckItems checklistsCheckItems) throws ApiException {
        okhttp3.Call localVarCall = addCheckItemsByIdChecklistValidateBeforeCall(idChecklist, checklistsCheckItems, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addCheckItemsByIdChecklistAsync(String idChecklist, ChecklistsCheckItems checklistsCheckItems, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCheckItemsByIdChecklistValidateBeforeCall(idChecklist, checklistsCheckItems, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddCheckItemsByIdChecklistRequestBuilder {
        private final String idChecklist;
        private String checked;
        private String name;
        private String pos;

        private AddCheckItemsByIdChecklistRequestBuilder(String idChecklist) {
            this.idChecklist = idChecklist;
        }

        /**
         * Set checked
         * @param checked  true or false (optional)
         * @return AddCheckItemsByIdChecklistRequestBuilder
         */
        public AddCheckItemsByIdChecklistRequestBuilder checked(String checked) {
            this.checked = checked;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 1 to 16384 (optional)
         * @return AddCheckItemsByIdChecklistRequestBuilder
         */
        public AddCheckItemsByIdChecklistRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return AddCheckItemsByIdChecklistRequestBuilder
         */
        public AddCheckItemsByIdChecklistRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Build call for addCheckItemsByIdChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChecklistsCheckItems checklistsCheckItems = buildBodyParams();
            return addCheckItemsByIdChecklistCall(idChecklist, checklistsCheckItems, _callback);
        }

        private ChecklistsCheckItems buildBodyParams() {
            ChecklistsCheckItems checklistsCheckItems = new ChecklistsCheckItems();
            checklistsCheckItems.checked(this.checked);
            checklistsCheckItems.name(this.name);
            checklistsCheckItems.pos(this.pos);
            return checklistsCheckItems;
        }

        /**
         * Execute addCheckItemsByIdChecklist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ChecklistsCheckItems checklistsCheckItems = buildBodyParams();
            addCheckItemsByIdChecklistWithHttpInfo(idChecklist, checklistsCheckItems);
        }

        /**
         * Execute addCheckItemsByIdChecklist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ChecklistsCheckItems checklistsCheckItems = buildBodyParams();
            return addCheckItemsByIdChecklistWithHttpInfo(idChecklist, checklistsCheckItems);
        }

        /**
         * Execute addCheckItemsByIdChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ChecklistsCheckItems checklistsCheckItems = buildBodyParams();
            return addCheckItemsByIdChecklistAsync(idChecklist, checklistsCheckItems, _callback);
        }
    }

    /**
     * addChecklistsCheckItemsByIdChecklist()
     * 
     * @param idChecklist idChecklist (required)
     * @param checklistsCheckItems Attributes of \&quot;Checklists Check Items\&quot; to be added. (required)
     * @return AddCheckItemsByIdChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddCheckItemsByIdChecklistRequestBuilder addCheckItemsByIdChecklist(String idChecklist) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        return new AddCheckItemsByIdChecklistRequestBuilder(idChecklist);
    }
    private okhttp3.Call createCall(Checklists checklists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checklists;

        // create path and map variables
        String localVarPath = "/checklists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(Checklists checklists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checklists' is set
        if (checklists == null) {
            throw new ApiException("Missing the required parameter 'checklists' when calling create(Async)");
        }

        return createCall(checklists, _callback);

    }


    private ApiResponse<Void> createWithHttpInfo(Checklists checklists) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(checklists, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createAsync(Checklists checklists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(checklists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private String idBoard;
        private String idCard;
        private String idChecklistSource;
        private String name;
        private String pos;

        private CreateRequestBuilder() {
        }

        /**
         * Set idBoard
         * @param idBoard id of the board that the checklist should be added to (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Set idCard
         * @param idCard id of the card that the checklist should be added to (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder idCard(String idCard) {
            this.idCard = idCard;
            return this;
        }
        
        /**
         * Set idChecklistSource
         * @param idChecklistSource The id of the source checklist to copy into a new checklist. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder idChecklistSource(String idChecklistSource) {
            this.idChecklistSource = idChecklistSource;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 0 to 16384 (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Checklists checklists = buildBodyParams();
            return createCall(checklists, _callback);
        }

        private Checklists buildBodyParams() {
            Checklists checklists = new Checklists();
            checklists.idBoard(this.idBoard);
            checklists.idCard(this.idCard);
            checklists.idChecklistSource(this.idChecklistSource);
            checklists.name(this.name);
            checklists.pos(this.pos);
            return checklists;
        }

        /**
         * Execute create request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Checklists checklists = buildBodyParams();
            createWithHttpInfo(checklists);
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Checklists checklists = buildBodyParams();
            return createWithHttpInfo(checklists);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Checklists checklists = buildBodyParams();
            return createAsync(checklists, _callback);
        }
    }

    /**
     * addChecklists()
     * 
     * @param checklists Attributes of \&quot;Checklists\&quot; to be added. (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create() throws IllegalArgumentException {
        return new CreateRequestBuilder();
    }
    private okhttp3.Call getBoardByIdChecklistCall(String idChecklist, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}/board"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardByIdChecklistValidateBeforeCall(String idChecklist, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling getBoardByIdChecklist(Async)");
        }

        return getBoardByIdChecklistCall(idChecklist, fields, _callback);

    }


    private ApiResponse<Void> getBoardByIdChecklistWithHttpInfo(String idChecklist, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardByIdChecklistValidateBeforeCall(idChecklist, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardByIdChecklistAsync(String idChecklist, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardByIdChecklistValidateBeforeCall(idChecklist, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardByIdChecklistRequestBuilder {
        private final String idChecklist;
        private String fields;

        private GetBoardByIdChecklistRequestBuilder(String idChecklist) {
            this.idChecklist = idChecklist;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
         * @return GetBoardByIdChecklistRequestBuilder
         */
        public GetBoardByIdChecklistRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getBoardByIdChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardByIdChecklistCall(idChecklist, fields, _callback);
        }


        /**
         * Execute getBoardByIdChecklist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardByIdChecklistWithHttpInfo(idChecklist, fields);
        }

        /**
         * Execute getBoardByIdChecklist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardByIdChecklistWithHttpInfo(idChecklist, fields);
        }

        /**
         * Execute getBoardByIdChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardByIdChecklistAsync(idChecklist, fields, _callback);
        }
    }

    /**
     * getChecklistsBoardByIdChecklist()
     * 
     * @param idChecklist idChecklist (required)
     * @return GetBoardByIdChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardByIdChecklistRequestBuilder getBoardByIdChecklist(String idChecklist) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        return new GetBoardByIdChecklistRequestBuilder(idChecklist);
    }
    private okhttp3.Call getBoardByIdChecklistByFieldCall(String idChecklist, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}/board/{field}"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardByIdChecklistByFieldValidateBeforeCall(String idChecklist, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling getBoardByIdChecklistByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getBoardByIdChecklistByField(Async)");
        }

        return getBoardByIdChecklistByFieldCall(idChecklist, field, _callback);

    }


    private ApiResponse<Void> getBoardByIdChecklistByFieldWithHttpInfo(String idChecklist, String field) throws ApiException {
        okhttp3.Call localVarCall = getBoardByIdChecklistByFieldValidateBeforeCall(idChecklist, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardByIdChecklistByFieldAsync(String idChecklist, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardByIdChecklistByFieldValidateBeforeCall(idChecklist, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardByIdChecklistByFieldRequestBuilder {
        private final String idChecklist;
        private final String field;

        private GetBoardByIdChecklistByFieldRequestBuilder(String idChecklist, String field) {
            this.idChecklist = idChecklist;
            this.field = field;
        }

        /**
         * Build call for getBoardByIdChecklistByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardByIdChecklistByFieldCall(idChecklist, field, _callback);
        }


        /**
         * Execute getBoardByIdChecklistByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardByIdChecklistByFieldWithHttpInfo(idChecklist, field);
        }

        /**
         * Execute getBoardByIdChecklistByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardByIdChecklistByFieldWithHttpInfo(idChecklist, field);
        }

        /**
         * Execute getBoardByIdChecklistByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardByIdChecklistByFieldAsync(idChecklist, field, _callback);
        }
    }

    /**
     * getChecklistsBoardByIdChecklistByField()
     * 
     * @param idChecklist idChecklist (required)
     * @param field field (required)
     * @return GetBoardByIdChecklistByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardByIdChecklistByFieldRequestBuilder getBoardByIdChecklistByField(String idChecklist, String field) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetBoardByIdChecklistByFieldRequestBuilder(idChecklist, field);
    }
    private okhttp3.Call getByIdCall(String idChecklist, String cards, String cardFields, String checkItems, String checkItemFields, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards", cards));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (checkItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItems", checkItems));
        }

        if (checkItemFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItem_fields", checkItemFields));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String idChecklist, String cards, String cardFields, String checkItems, String checkItemFields, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling getById(Async)");
        }

        return getByIdCall(idChecklist, cards, cardFields, checkItems, checkItemFields, fields, _callback);

    }


    private ApiResponse<Void> getByIdWithHttpInfo(String idChecklist, String cards, String cardFields, String checkItems, String checkItemFields, String fields) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idChecklist, cards, cardFields, checkItems, checkItemFields, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdAsync(String idChecklist, String cards, String cardFields, String checkItems, String checkItemFields, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idChecklist, cards, cardFields, checkItems, checkItemFields, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String idChecklist;
        private String cards;
        private String cardFields;
        private String checkItems;
        private String checkItemFields;
        private String fields;

        private GetByIdRequestBuilder(String idChecklist) {
            this.idChecklist = idChecklist;
        }

        /**
         * Set cards
         * @param cards One of: all, closed, none, open or visible (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cards(String cards) {
            this.cards = cards;
            return this;
        }
        
        /**
         * Set cardFields
         * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardFields(String cardFields) {
            this.cardFields = cardFields;
            return this;
        }
        
        /**
         * Set checkItems
         * @param checkItems One of: all or none (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder checkItems(String checkItems) {
            this.checkItems = checkItems;
            return this;
        }
        
        /**
         * Set checkItemFields
         * @param checkItemFields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder checkItemFields(String checkItemFields) {
            this.checkItemFields = checkItemFields;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(idChecklist, cards, cardFields, checkItems, checkItemFields, fields, _callback);
        }


        /**
         * Execute getById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdWithHttpInfo(idChecklist, cards, cardFields, checkItems, checkItemFields, fields);
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(idChecklist, cards, cardFields, checkItems, checkItemFields, fields);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdAsync(idChecklist, cards, cardFields, checkItems, checkItemFields, fields, _callback);
        }
    }

    /**
     * getChecklistsByIdChecklist()
     * 
     * @param idChecklist idChecklist (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String idChecklist) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        return new GetByIdRequestBuilder(idChecklist);
    }
    private okhttp3.Call getByIdFieldCall(String idChecklist, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}/{field}"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdFieldValidateBeforeCall(String idChecklist, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling getByIdField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getByIdField(Async)");
        }

        return getByIdFieldCall(idChecklist, field, _callback);

    }


    private ApiResponse<Void> getByIdFieldWithHttpInfo(String idChecklist, String field) throws ApiException {
        okhttp3.Call localVarCall = getByIdFieldValidateBeforeCall(idChecklist, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdFieldAsync(String idChecklist, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdFieldValidateBeforeCall(idChecklist, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdFieldRequestBuilder {
        private final String idChecklist;
        private final String field;

        private GetByIdFieldRequestBuilder(String idChecklist, String field) {
            this.idChecklist = idChecklist;
            this.field = field;
        }

        /**
         * Build call for getByIdField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdFieldCall(idChecklist, field, _callback);
        }


        /**
         * Execute getByIdField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdFieldWithHttpInfo(idChecklist, field);
        }

        /**
         * Execute getByIdField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdFieldWithHttpInfo(idChecklist, field);
        }

        /**
         * Execute getByIdField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdFieldAsync(idChecklist, field, _callback);
        }
    }

    /**
     * getChecklistsByIdChecklistByField()
     * 
     * @param idChecklist idChecklist (required)
     * @param field field (required)
     * @return GetByIdFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdFieldRequestBuilder getByIdField(String idChecklist, String field) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetByIdFieldRequestBuilder(idChecklist, field);
    }
    private okhttp3.Call getCardsByFilterCall(String idChecklist, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}/cards/{filter}"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsByFilterValidateBeforeCall(String idChecklist, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling getCardsByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getCardsByFilter(Async)");
        }

        return getCardsByFilterCall(idChecklist, filter, _callback);

    }


    private ApiResponse<Void> getCardsByFilterWithHttpInfo(String idChecklist, String filter) throws ApiException {
        okhttp3.Call localVarCall = getCardsByFilterValidateBeforeCall(idChecklist, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCardsByFilterAsync(String idChecklist, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsByFilterValidateBeforeCall(idChecklist, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCardsByFilterRequestBuilder {
        private final String idChecklist;
        private final String filter;

        private GetCardsByFilterRequestBuilder(String idChecklist, String filter) {
            this.idChecklist = idChecklist;
            this.filter = filter;
        }

        /**
         * Build call for getCardsByFilter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardsByFilterCall(idChecklist, filter, _callback);
        }


        /**
         * Execute getCardsByFilter request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCardsByFilterWithHttpInfo(idChecklist, filter);
        }

        /**
         * Execute getCardsByFilter request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCardsByFilterWithHttpInfo(idChecklist, filter);
        }

        /**
         * Execute getCardsByFilter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCardsByFilterAsync(idChecklist, filter, _callback);
        }
    }

    /**
     * getChecklistsCardsByIdChecklistByFilter()
     * 
     * @param idChecklist idChecklist (required)
     * @param filter filter (required)
     * @return GetCardsByFilterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCardsByFilterRequestBuilder getCardsByFilter(String idChecklist, String filter) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new GetCardsByFilterRequestBuilder(idChecklist, filter);
    }
    private okhttp3.Call getCheckItemsByIdChecklistCall(String idChecklist, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}/checkItems"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckItemsByIdChecklistValidateBeforeCall(String idChecklist, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling getCheckItemsByIdChecklist(Async)");
        }

        return getCheckItemsByIdChecklistCall(idChecklist, filter, fields, _callback);

    }


    private ApiResponse<Void> getCheckItemsByIdChecklistWithHttpInfo(String idChecklist, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCheckItemsByIdChecklistValidateBeforeCall(idChecklist, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCheckItemsByIdChecklistAsync(String idChecklist, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckItemsByIdChecklistValidateBeforeCall(idChecklist, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCheckItemsByIdChecklistRequestBuilder {
        private final String idChecklist;
        private String filter;
        private String fields;

        private GetCheckItemsByIdChecklistRequestBuilder(String idChecklist) {
            this.idChecklist = idChecklist;
        }

        /**
         * Set filter
         * @param filter One of: all or none (optional, default to all)
         * @return GetCheckItemsByIdChecklistRequestBuilder
         */
        public GetCheckItemsByIdChecklistRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
         * @return GetCheckItemsByIdChecklistRequestBuilder
         */
        public GetCheckItemsByIdChecklistRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCheckItemsByIdChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCheckItemsByIdChecklistCall(idChecklist, filter, fields, _callback);
        }


        /**
         * Execute getCheckItemsByIdChecklist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCheckItemsByIdChecklistWithHttpInfo(idChecklist, filter, fields);
        }

        /**
         * Execute getCheckItemsByIdChecklist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCheckItemsByIdChecklistWithHttpInfo(idChecklist, filter, fields);
        }

        /**
         * Execute getCheckItemsByIdChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCheckItemsByIdChecklistAsync(idChecklist, filter, fields, _callback);
        }
    }

    /**
     * getChecklistsCheckItemsByIdChecklist()
     * 
     * @param idChecklist idChecklist (required)
     * @return GetCheckItemsByIdChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCheckItemsByIdChecklistRequestBuilder getCheckItemsByIdChecklist(String idChecklist) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        return new GetCheckItemsByIdChecklistRequestBuilder(idChecklist);
    }
    private okhttp3.Call getCheckItemsByIdChecklistByIdCheckItemCall(String idChecklist, String idCheckItem, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}/checkItems/{idCheckItem}"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckItemsByIdChecklistByIdCheckItemValidateBeforeCall(String idChecklist, String idCheckItem, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling getCheckItemsByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling getCheckItemsByIdChecklistByIdCheckItem(Async)");
        }

        return getCheckItemsByIdChecklistByIdCheckItemCall(idChecklist, idCheckItem, fields, _callback);

    }


    private ApiResponse<Void> getCheckItemsByIdChecklistByIdCheckItemWithHttpInfo(String idChecklist, String idCheckItem, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCheckItemsByIdChecklistByIdCheckItemValidateBeforeCall(idChecklist, idCheckItem, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCheckItemsByIdChecklistByIdCheckItemAsync(String idChecklist, String idCheckItem, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckItemsByIdChecklistByIdCheckItemValidateBeforeCall(idChecklist, idCheckItem, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCheckItemsByIdChecklistByIdCheckItemRequestBuilder {
        private final String idChecklist;
        private final String idCheckItem;
        private String fields;

        private GetCheckItemsByIdChecklistByIdCheckItemRequestBuilder(String idChecklist, String idCheckItem) {
            this.idChecklist = idChecklist;
            this.idCheckItem = idCheckItem;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
         * @return GetCheckItemsByIdChecklistByIdCheckItemRequestBuilder
         */
        public GetCheckItemsByIdChecklistByIdCheckItemRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCheckItemsByIdChecklistByIdCheckItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCheckItemsByIdChecklistByIdCheckItemCall(idChecklist, idCheckItem, fields, _callback);
        }


        /**
         * Execute getCheckItemsByIdChecklistByIdCheckItem request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCheckItemsByIdChecklistByIdCheckItemWithHttpInfo(idChecklist, idCheckItem, fields);
        }

        /**
         * Execute getCheckItemsByIdChecklistByIdCheckItem request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCheckItemsByIdChecklistByIdCheckItemWithHttpInfo(idChecklist, idCheckItem, fields);
        }

        /**
         * Execute getCheckItemsByIdChecklistByIdCheckItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCheckItemsByIdChecklistByIdCheckItemAsync(idChecklist, idCheckItem, fields, _callback);
        }
    }

    /**
     * getChecklistsCheckItemsByIdChecklistByIdCheckItem()
     * 
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @return GetCheckItemsByIdChecklistByIdCheckItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCheckItemsByIdChecklistByIdCheckItemRequestBuilder getCheckItemsByIdChecklistByIdCheckItem(String idChecklist, String idCheckItem) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        if (idCheckItem == null) throw new IllegalArgumentException("\"idCheckItem\" is required but got null");
            

        return new GetCheckItemsByIdChecklistByIdCheckItemRequestBuilder(idChecklist, idCheckItem);
    }
    private okhttp3.Call listCardsByIdChecklistCall(String idChecklist, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}/cards"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (stickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stickers", stickers));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCardsByIdChecklistValidateBeforeCall(String idChecklist, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling listCardsByIdChecklist(Async)");
        }

        return listCardsByIdChecklistCall(idChecklist, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);

    }


    private ApiResponse<Void> listCardsByIdChecklistWithHttpInfo(String idChecklist, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = listCardsByIdChecklistValidateBeforeCall(idChecklist, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listCardsByIdChecklistAsync(String idChecklist, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCardsByIdChecklistValidateBeforeCall(idChecklist, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListCardsByIdChecklistRequestBuilder {
        private final String idChecklist;
        private String actions;
        private String attachments;
        private String attachmentFields;
        private String stickers;
        private String members;
        private String memberFields;
        private String checkItemStates;
        private String checklists;
        private String limit;
        private String since;
        private String before;
        private String filter;
        private String fields;

        private ListCardsByIdChecklistRequestBuilder(String idChecklist) {
            this.idChecklist = idChecklist;
        }

        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder attachments(String attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set attachmentFields
         * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder attachmentFields(String attachmentFields) {
            this.attachmentFields = attachmentFields;
            return this;
        }
        
        /**
         * Set stickers
         * @param stickers  true or false (optional)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder stickers(String stickers) {
            this.stickers = stickers;
            return this;
        }
        
        /**
         * Set members
         * @param members  true or false (optional)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder members(String members) {
            this.members = members;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set checkItemStates
         * @param checkItemStates  true or false (optional)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder checkItemStates(String checkItemStates) {
            this.checkItemStates = checkItemStates;
            return this;
        }
        
        /**
         * Set checklists
         * @param checklists One of: all or none (optional, default to none)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder checklists(String checklists) {
            this.checklists = checklists;
            return this;
        }
        
        /**
         * Set limit
         * @param limit a number from 1 to 1000 (optional)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set since
         * @param since A date, or null (optional)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set before
         * @param before A date, or null (optional)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set filter
         * @param filter One of: all, closed, none or open (optional, default to open)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return ListCardsByIdChecklistRequestBuilder
         */
        public ListCardsByIdChecklistRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for listCardsByIdChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCardsByIdChecklistCall(idChecklist, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        }


        /**
         * Execute listCardsByIdChecklist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listCardsByIdChecklistWithHttpInfo(idChecklist, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields);
        }

        /**
         * Execute listCardsByIdChecklist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listCardsByIdChecklistWithHttpInfo(idChecklist, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields);
        }

        /**
         * Execute listCardsByIdChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listCardsByIdChecklistAsync(idChecklist, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        }
    }

    /**
     * getChecklistsCardsByIdChecklist()
     * 
     * @param idChecklist idChecklist (required)
     * @return ListCardsByIdChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListCardsByIdChecklistRequestBuilder listCardsByIdChecklist(String idChecklist) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        return new ListCardsByIdChecklistRequestBuilder(idChecklist);
    }
    private okhttp3.Call removeByIdCall(String idChecklist, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String idChecklist, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling removeById(Async)");
        }

        return removeByIdCall(idChecklist, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String idChecklist) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(idChecklist, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String idChecklist, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(idChecklist, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String idChecklist;

        private RemoveByIdRequestBuilder(String idChecklist) {
            this.idChecklist = idChecklist;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(idChecklist, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(idChecklist);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(idChecklist);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(idChecklist, _callback);
        }
    }

    /**
     * deleteChecklistsByIdChecklist()
     * 
     * @param idChecklist idChecklist (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String idChecklist) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        return new RemoveByIdRequestBuilder(idChecklist);
    }
    private okhttp3.Call removeByIdCheckItemCall(String idChecklist, String idCheckItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}/checkItems/{idCheckItem}"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdCheckItemValidateBeforeCall(String idChecklist, String idCheckItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling removeByIdCheckItem(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling removeByIdCheckItem(Async)");
        }

        return removeByIdCheckItemCall(idChecklist, idCheckItem, _callback);

    }


    private ApiResponse<Void> removeByIdCheckItemWithHttpInfo(String idChecklist, String idCheckItem) throws ApiException {
        okhttp3.Call localVarCall = removeByIdCheckItemValidateBeforeCall(idChecklist, idCheckItem, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdCheckItemAsync(String idChecklist, String idCheckItem, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdCheckItemValidateBeforeCall(idChecklist, idCheckItem, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdCheckItemRequestBuilder {
        private final String idChecklist;
        private final String idCheckItem;

        private RemoveByIdCheckItemRequestBuilder(String idChecklist, String idCheckItem) {
            this.idChecklist = idChecklist;
            this.idCheckItem = idCheckItem;
        }

        /**
         * Build call for removeByIdCheckItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCheckItemCall(idChecklist, idCheckItem, _callback);
        }


        /**
         * Execute removeByIdCheckItem request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdCheckItemWithHttpInfo(idChecklist, idCheckItem);
        }

        /**
         * Execute removeByIdCheckItem request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdCheckItemWithHttpInfo(idChecklist, idCheckItem);
        }

        /**
         * Execute removeByIdCheckItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdCheckItemAsync(idChecklist, idCheckItem, _callback);
        }
    }

    /**
     * deleteChecklistsCheckItemsByIdChecklistByIdCheckItem()
     * 
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @return RemoveByIdCheckItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdCheckItemRequestBuilder removeByIdCheckItem(String idChecklist, String idCheckItem) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        if (idCheckItem == null) throw new IllegalArgumentException("\"idCheckItem\" is required but got null");
            

        return new RemoveByIdCheckItemRequestBuilder(idChecklist, idCheckItem);
    }
    private okhttp3.Call updateByIdChecklistCall(String idChecklist, Checklists checklists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checklists;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdChecklistValidateBeforeCall(String idChecklist, Checklists checklists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling updateByIdChecklist(Async)");
        }

        // verify the required parameter 'checklists' is set
        if (checklists == null) {
            throw new ApiException("Missing the required parameter 'checklists' when calling updateByIdChecklist(Async)");
        }

        return updateByIdChecklistCall(idChecklist, checklists, _callback);

    }


    private ApiResponse<Void> updateByIdChecklistWithHttpInfo(String idChecklist, Checklists checklists) throws ApiException {
        okhttp3.Call localVarCall = updateByIdChecklistValidateBeforeCall(idChecklist, checklists, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdChecklistAsync(String idChecklist, Checklists checklists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdChecklistValidateBeforeCall(idChecklist, checklists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdChecklistRequestBuilder {
        private final String idChecklist;
        private String idBoard;
        private String idCard;
        private String idChecklistSource;
        private String name;
        private String pos;

        private UpdateByIdChecklistRequestBuilder(String idChecklist) {
            this.idChecklist = idChecklist;
        }

        /**
         * Set idBoard
         * @param idBoard id of the board that the checklist should be added to (optional)
         * @return UpdateByIdChecklistRequestBuilder
         */
        public UpdateByIdChecklistRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Set idCard
         * @param idCard id of the card that the checklist should be added to (optional)
         * @return UpdateByIdChecklistRequestBuilder
         */
        public UpdateByIdChecklistRequestBuilder idCard(String idCard) {
            this.idCard = idCard;
            return this;
        }
        
        /**
         * Set idChecklistSource
         * @param idChecklistSource The id of the source checklist to copy into a new checklist. (optional)
         * @return UpdateByIdChecklistRequestBuilder
         */
        public UpdateByIdChecklistRequestBuilder idChecklistSource(String idChecklistSource) {
            this.idChecklistSource = idChecklistSource;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdChecklistRequestBuilder
         */
        public UpdateByIdChecklistRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return UpdateByIdChecklistRequestBuilder
         */
        public UpdateByIdChecklistRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Build call for updateByIdChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Checklists checklists = buildBodyParams();
            return updateByIdChecklistCall(idChecklist, checklists, _callback);
        }

        private Checklists buildBodyParams() {
            Checklists checklists = new Checklists();
            checklists.idBoard(this.idBoard);
            checklists.idCard(this.idCard);
            checklists.idChecklistSource(this.idChecklistSource);
            checklists.name(this.name);
            checklists.pos(this.pos);
            return checklists;
        }

        /**
         * Execute updateByIdChecklist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Checklists checklists = buildBodyParams();
            updateByIdChecklistWithHttpInfo(idChecklist, checklists);
        }

        /**
         * Execute updateByIdChecklist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Checklists checklists = buildBodyParams();
            return updateByIdChecklistWithHttpInfo(idChecklist, checklists);
        }

        /**
         * Execute updateByIdChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Checklists checklists = buildBodyParams();
            return updateByIdChecklistAsync(idChecklist, checklists, _callback);
        }
    }

    /**
     * updateChecklistsByIdChecklist()
     * 
     * @param idChecklist idChecklist (required)
     * @param checklists Attributes of \&quot;Checklists\&quot; to be updated. (required)
     * @return UpdateByIdChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdChecklistRequestBuilder updateByIdChecklist(String idChecklist) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        return new UpdateByIdChecklistRequestBuilder(idChecklist);
    }
    private okhttp3.Call updateIdCardByIdChecklistCall(String idChecklist, ChecklistsIdCard checklistsIdCard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checklistsIdCard;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}/idCard"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIdCardByIdChecklistValidateBeforeCall(String idChecklist, ChecklistsIdCard checklistsIdCard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling updateIdCardByIdChecklist(Async)");
        }

        // verify the required parameter 'checklistsIdCard' is set
        if (checklistsIdCard == null) {
            throw new ApiException("Missing the required parameter 'checklistsIdCard' when calling updateIdCardByIdChecklist(Async)");
        }

        return updateIdCardByIdChecklistCall(idChecklist, checklistsIdCard, _callback);

    }


    private ApiResponse<Void> updateIdCardByIdChecklistWithHttpInfo(String idChecklist, ChecklistsIdCard checklistsIdCard) throws ApiException {
        okhttp3.Call localVarCall = updateIdCardByIdChecklistValidateBeforeCall(idChecklist, checklistsIdCard, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateIdCardByIdChecklistAsync(String idChecklist, ChecklistsIdCard checklistsIdCard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIdCardByIdChecklistValidateBeforeCall(idChecklist, checklistsIdCard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateIdCardByIdChecklistRequestBuilder {
        private final String idChecklist;
        private String value;

        private UpdateIdCardByIdChecklistRequestBuilder(String idChecklist) {
            this.idChecklist = idChecklist;
        }

        /**
         * Set value
         * @param value The id of the card that the checklist is on (optional)
         * @return UpdateIdCardByIdChecklistRequestBuilder
         */
        public UpdateIdCardByIdChecklistRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateIdCardByIdChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChecklistsIdCard checklistsIdCard = buildBodyParams();
            return updateIdCardByIdChecklistCall(idChecklist, checklistsIdCard, _callback);
        }

        private ChecklistsIdCard buildBodyParams() {
            ChecklistsIdCard checklistsIdCard = new ChecklistsIdCard();
            checklistsIdCard.value(this.value);
            return checklistsIdCard;
        }

        /**
         * Execute updateIdCardByIdChecklist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ChecklistsIdCard checklistsIdCard = buildBodyParams();
            updateIdCardByIdChecklistWithHttpInfo(idChecklist, checklistsIdCard);
        }

        /**
         * Execute updateIdCardByIdChecklist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ChecklistsIdCard checklistsIdCard = buildBodyParams();
            return updateIdCardByIdChecklistWithHttpInfo(idChecklist, checklistsIdCard);
        }

        /**
         * Execute updateIdCardByIdChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ChecklistsIdCard checklistsIdCard = buildBodyParams();
            return updateIdCardByIdChecklistAsync(idChecklist, checklistsIdCard, _callback);
        }
    }

    /**
     * updateChecklistsIdCardByIdChecklist()
     * 
     * @param idChecklist idChecklist (required)
     * @param checklistsIdCard Attributes of \&quot;Checklists Id Card\&quot; to be updated. (required)
     * @return UpdateIdCardByIdChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateIdCardByIdChecklistRequestBuilder updateIdCardByIdChecklist(String idChecklist) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        return new UpdateIdCardByIdChecklistRequestBuilder(idChecklist);
    }
    private okhttp3.Call updateNameByIdChecklistCall(String idChecklist, ChecklistsName checklistsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checklistsName;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}/name"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNameByIdChecklistValidateBeforeCall(String idChecklist, ChecklistsName checklistsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling updateNameByIdChecklist(Async)");
        }

        // verify the required parameter 'checklistsName' is set
        if (checklistsName == null) {
            throw new ApiException("Missing the required parameter 'checklistsName' when calling updateNameByIdChecklist(Async)");
        }

        return updateNameByIdChecklistCall(idChecklist, checklistsName, _callback);

    }


    private ApiResponse<Void> updateNameByIdChecklistWithHttpInfo(String idChecklist, ChecklistsName checklistsName) throws ApiException {
        okhttp3.Call localVarCall = updateNameByIdChecklistValidateBeforeCall(idChecklist, checklistsName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateNameByIdChecklistAsync(String idChecklist, ChecklistsName checklistsName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNameByIdChecklistValidateBeforeCall(idChecklist, checklistsName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateNameByIdChecklistRequestBuilder {
        private final String idChecklist;
        private String value;

        private UpdateNameByIdChecklistRequestBuilder(String idChecklist) {
            this.idChecklist = idChecklist;
        }

        /**
         * Set value
         * @param value a string with a length from 1 to 16384 (optional)
         * @return UpdateNameByIdChecklistRequestBuilder
         */
        public UpdateNameByIdChecklistRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateNameByIdChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChecklistsName checklistsName = buildBodyParams();
            return updateNameByIdChecklistCall(idChecklist, checklistsName, _callback);
        }

        private ChecklistsName buildBodyParams() {
            ChecklistsName checklistsName = new ChecklistsName();
            checklistsName.value(this.value);
            return checklistsName;
        }

        /**
         * Execute updateNameByIdChecklist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ChecklistsName checklistsName = buildBodyParams();
            updateNameByIdChecklistWithHttpInfo(idChecklist, checklistsName);
        }

        /**
         * Execute updateNameByIdChecklist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ChecklistsName checklistsName = buildBodyParams();
            return updateNameByIdChecklistWithHttpInfo(idChecklist, checklistsName);
        }

        /**
         * Execute updateNameByIdChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ChecklistsName checklistsName = buildBodyParams();
            return updateNameByIdChecklistAsync(idChecklist, checklistsName, _callback);
        }
    }

    /**
     * updateChecklistsNameByIdChecklist()
     * 
     * @param idChecklist idChecklist (required)
     * @param checklistsName Attributes of \&quot;Checklists Name\&quot; to be updated. (required)
     * @return UpdateNameByIdChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateNameByIdChecklistRequestBuilder updateNameByIdChecklist(String idChecklist) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        return new UpdateNameByIdChecklistRequestBuilder(idChecklist);
    }
    private okhttp3.Call updatePosByIdChecklistCall(String idChecklist, ChecklistsPos checklistsPos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checklistsPos;

        // create path and map variables
        String localVarPath = "/checklists/{idChecklist}/pos"
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePosByIdChecklistValidateBeforeCall(String idChecklist, ChecklistsPos checklistsPos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling updatePosByIdChecklist(Async)");
        }

        // verify the required parameter 'checklistsPos' is set
        if (checklistsPos == null) {
            throw new ApiException("Missing the required parameter 'checklistsPos' when calling updatePosByIdChecklist(Async)");
        }

        return updatePosByIdChecklistCall(idChecklist, checklistsPos, _callback);

    }


    private ApiResponse<Void> updatePosByIdChecklistWithHttpInfo(String idChecklist, ChecklistsPos checklistsPos) throws ApiException {
        okhttp3.Call localVarCall = updatePosByIdChecklistValidateBeforeCall(idChecklist, checklistsPos, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePosByIdChecklistAsync(String idChecklist, ChecklistsPos checklistsPos, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePosByIdChecklistValidateBeforeCall(idChecklist, checklistsPos, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePosByIdChecklistRequestBuilder {
        private final String idChecklist;
        private String value;

        private UpdatePosByIdChecklistRequestBuilder(String idChecklist) {
            this.idChecklist = idChecklist;
        }

        /**
         * Set value
         * @param value A position. top , bottom , or a positive number. (optional)
         * @return UpdatePosByIdChecklistRequestBuilder
         */
        public UpdatePosByIdChecklistRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePosByIdChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChecklistsPos checklistsPos = buildBodyParams();
            return updatePosByIdChecklistCall(idChecklist, checklistsPos, _callback);
        }

        private ChecklistsPos buildBodyParams() {
            ChecklistsPos checklistsPos = new ChecklistsPos();
            checklistsPos.value(this.value);
            return checklistsPos;
        }

        /**
         * Execute updatePosByIdChecklist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ChecklistsPos checklistsPos = buildBodyParams();
            updatePosByIdChecklistWithHttpInfo(idChecklist, checklistsPos);
        }

        /**
         * Execute updatePosByIdChecklist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ChecklistsPos checklistsPos = buildBodyParams();
            return updatePosByIdChecklistWithHttpInfo(idChecklist, checklistsPos);
        }

        /**
         * Execute updatePosByIdChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ChecklistsPos checklistsPos = buildBodyParams();
            return updatePosByIdChecklistAsync(idChecklist, checklistsPos, _callback);
        }
    }

    /**
     * updateChecklistsPosByIdChecklist()
     * 
     * @param idChecklist idChecklist (required)
     * @param checklistsPos Attributes of \&quot;Checklists Pos\&quot; to be updated. (required)
     * @return UpdatePosByIdChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePosByIdChecklistRequestBuilder updatePosByIdChecklist(String idChecklist) throws IllegalArgumentException {
        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        return new UpdatePosByIdChecklistRequestBuilder(idChecklist);
    }
}
