/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Webhooks;
import com.konfigthis.client.model.WebhooksActive;
import com.konfigthis.client.model.WebhooksCallbackURL;
import com.konfigthis.client.model.WebhooksDescription;
import com.konfigthis.client.model.WebhooksIdModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebhookApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhookApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(String idWebhook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{idWebhook}"
            .replace("{" + "idWebhook" + "}", localVarApiClient.escapeString(idWebhook.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String idWebhook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idWebhook' is set
        if (idWebhook == null) {
            throw new ApiException("Missing the required parameter 'idWebhook' when calling getById(Async)");
        }

        return getByIdCall(idWebhook, _callback);

    }


    private ApiResponse<Void> getByIdWithHttpInfo(String idWebhook) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idWebhook, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdAsync(String idWebhook, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idWebhook, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String idWebhook;

        private GetByIdRequestBuilder(String idWebhook) {
            this.idWebhook = idWebhook;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(idWebhook, _callback);
        }


        /**
         * Execute getById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdWithHttpInfo(idWebhook);
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(idWebhook);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdAsync(idWebhook, _callback);
        }
    }

    /**
     * getWebhooksByIdWebhook()
     * 
     * @param idWebhook idWebhook (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String idWebhook) throws IllegalArgumentException {
        if (idWebhook == null) throw new IllegalArgumentException("\"idWebhook\" is required but got null");
            

        return new GetByIdRequestBuilder(idWebhook);
    }
    private okhttp3.Call getByIdFieldCall(String idWebhook, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{idWebhook}/{field}"
            .replace("{" + "idWebhook" + "}", localVarApiClient.escapeString(idWebhook.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdFieldValidateBeforeCall(String idWebhook, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idWebhook' is set
        if (idWebhook == null) {
            throw new ApiException("Missing the required parameter 'idWebhook' when calling getByIdField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getByIdField(Async)");
        }

        return getByIdFieldCall(idWebhook, field, _callback);

    }


    private ApiResponse<Void> getByIdFieldWithHttpInfo(String idWebhook, String field) throws ApiException {
        okhttp3.Call localVarCall = getByIdFieldValidateBeforeCall(idWebhook, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdFieldAsync(String idWebhook, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdFieldValidateBeforeCall(idWebhook, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdFieldRequestBuilder {
        private final String idWebhook;
        private final String field;

        private GetByIdFieldRequestBuilder(String idWebhook, String field) {
            this.idWebhook = idWebhook;
            this.field = field;
        }

        /**
         * Build call for getByIdField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdFieldCall(idWebhook, field, _callback);
        }


        /**
         * Execute getByIdField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdFieldWithHttpInfo(idWebhook, field);
        }

        /**
         * Execute getByIdField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdFieldWithHttpInfo(idWebhook, field);
        }

        /**
         * Execute getByIdField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdFieldAsync(idWebhook, field, _callback);
        }
    }

    /**
     * getWebhooksByIdWebhookByField()
     * 
     * @param idWebhook idWebhook (required)
     * @param field field (required)
     * @return GetByIdFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdFieldRequestBuilder getByIdField(String idWebhook, String field) throws IllegalArgumentException {
        if (idWebhook == null) throw new IllegalArgumentException("\"idWebhook\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetByIdFieldRequestBuilder(idWebhook, field);
    }
    private okhttp3.Call removeByIdCall(String idWebhook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{idWebhook}"
            .replace("{" + "idWebhook" + "}", localVarApiClient.escapeString(idWebhook.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String idWebhook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idWebhook' is set
        if (idWebhook == null) {
            throw new ApiException("Missing the required parameter 'idWebhook' when calling removeById(Async)");
        }

        return removeByIdCall(idWebhook, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String idWebhook) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(idWebhook, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String idWebhook, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(idWebhook, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String idWebhook;

        private RemoveByIdRequestBuilder(String idWebhook) {
            this.idWebhook = idWebhook;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(idWebhook, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(idWebhook);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(idWebhook);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(idWebhook, _callback);
        }
    }

    /**
     * deleteWebhooksByIdWebhook()
     * 
     * @param idWebhook idWebhook (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String idWebhook) throws IllegalArgumentException {
        if (idWebhook == null) throw new IllegalArgumentException("\"idWebhook\" is required but got null");
            

        return new RemoveByIdRequestBuilder(idWebhook);
    }
    private okhttp3.Call updateCall(Webhooks webhooks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooks;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(Webhooks webhooks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhooks' is set
        if (webhooks == null) {
            throw new ApiException("Missing the required parameter 'webhooks' when calling update(Async)");
        }

        return updateCall(webhooks, _callback);

    }


    private ApiResponse<Void> updateWithHttpInfo(Webhooks webhooks) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(webhooks, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateAsync(Webhooks webhooks, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(webhooks, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRequestBuilder {
        private String description;
        private String active;
        private String callbackURL;
        private String idModel;

        private UpdateRequestBuilder() {
        }

        /**
         * Set description
         * @param description a string with a length from 0 to 16384 (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set active
         * @param active  true or false (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder active(String active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set callbackURL
         * @param callbackURL A valid URL that is reachable with a HEAD request (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder callbackURL(String callbackURL) {
            this.callbackURL = callbackURL;
            return this;
        }
        
        /**
         * Set idModel
         * @param idModel id of the model that should be hooked (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder idModel(String idModel) {
            this.idModel = idModel;
            return this;
        }
        
        /**
         * Build call for update
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Webhooks webhooks = buildBodyParams();
            return updateCall(webhooks, _callback);
        }

        private Webhooks buildBodyParams() {
            Webhooks webhooks = new Webhooks();
            webhooks.description(this.description);
            webhooks.active(this.active);
            webhooks.callbackURL(this.callbackURL);
            webhooks.idModel(this.idModel);
            return webhooks;
        }

        /**
         * Execute update request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Webhooks webhooks = buildBodyParams();
            updateWithHttpInfo(webhooks);
        }

        /**
         * Execute update request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Webhooks webhooks = buildBodyParams();
            return updateWithHttpInfo(webhooks);
        }

        /**
         * Execute update request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Webhooks webhooks = buildBodyParams();
            return updateAsync(webhooks, _callback);
        }
    }

    /**
     * updateWebhooks()
     * 
     * @param webhooks Attributes of \&quot;Webhooks\&quot; to be updated. (required)
     * @return UpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRequestBuilder update() throws IllegalArgumentException {
        return new UpdateRequestBuilder();
    }
    private okhttp3.Call updateActiveByIdCall(String idWebhook, WebhooksActive webhooksActive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksActive;

        // create path and map variables
        String localVarPath = "/webhooks/{idWebhook}/active"
            .replace("{" + "idWebhook" + "}", localVarApiClient.escapeString(idWebhook.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateActiveByIdValidateBeforeCall(String idWebhook, WebhooksActive webhooksActive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idWebhook' is set
        if (idWebhook == null) {
            throw new ApiException("Missing the required parameter 'idWebhook' when calling updateActiveById(Async)");
        }

        // verify the required parameter 'webhooksActive' is set
        if (webhooksActive == null) {
            throw new ApiException("Missing the required parameter 'webhooksActive' when calling updateActiveById(Async)");
        }

        return updateActiveByIdCall(idWebhook, webhooksActive, _callback);

    }


    private ApiResponse<Void> updateActiveByIdWithHttpInfo(String idWebhook, WebhooksActive webhooksActive) throws ApiException {
        okhttp3.Call localVarCall = updateActiveByIdValidateBeforeCall(idWebhook, webhooksActive, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateActiveByIdAsync(String idWebhook, WebhooksActive webhooksActive, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateActiveByIdValidateBeforeCall(idWebhook, webhooksActive, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateActiveByIdRequestBuilder {
        private final String idWebhook;
        private String value;

        private UpdateActiveByIdRequestBuilder(String idWebhook) {
            this.idWebhook = idWebhook;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateActiveByIdRequestBuilder
         */
        public UpdateActiveByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateActiveById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksActive webhooksActive = buildBodyParams();
            return updateActiveByIdCall(idWebhook, webhooksActive, _callback);
        }

        private WebhooksActive buildBodyParams() {
            WebhooksActive webhooksActive = new WebhooksActive();
            webhooksActive.value(this.value);
            return webhooksActive;
        }

        /**
         * Execute updateActiveById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WebhooksActive webhooksActive = buildBodyParams();
            updateActiveByIdWithHttpInfo(idWebhook, webhooksActive);
        }

        /**
         * Execute updateActiveById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebhooksActive webhooksActive = buildBodyParams();
            return updateActiveByIdWithHttpInfo(idWebhook, webhooksActive);
        }

        /**
         * Execute updateActiveById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebhooksActive webhooksActive = buildBodyParams();
            return updateActiveByIdAsync(idWebhook, webhooksActive, _callback);
        }
    }

    /**
     * updateWebhooksActiveByIdWebhook()
     * 
     * @param idWebhook idWebhook (required)
     * @param webhooksActive Attributes of \&quot;Webhooks Active\&quot; to be updated. (required)
     * @return UpdateActiveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateActiveByIdRequestBuilder updateActiveById(String idWebhook) throws IllegalArgumentException {
        if (idWebhook == null) throw new IllegalArgumentException("\"idWebhook\" is required but got null");
            

        return new UpdateActiveByIdRequestBuilder(idWebhook);
    }
    private okhttp3.Call updateByIdWebhookCall(String idWebhook, Webhooks webhooks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooks;

        // create path and map variables
        String localVarPath = "/webhooks/{idWebhook}"
            .replace("{" + "idWebhook" + "}", localVarApiClient.escapeString(idWebhook.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdWebhookValidateBeforeCall(String idWebhook, Webhooks webhooks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idWebhook' is set
        if (idWebhook == null) {
            throw new ApiException("Missing the required parameter 'idWebhook' when calling updateByIdWebhook(Async)");
        }

        // verify the required parameter 'webhooks' is set
        if (webhooks == null) {
            throw new ApiException("Missing the required parameter 'webhooks' when calling updateByIdWebhook(Async)");
        }

        return updateByIdWebhookCall(idWebhook, webhooks, _callback);

    }


    private ApiResponse<Void> updateByIdWebhookWithHttpInfo(String idWebhook, Webhooks webhooks) throws ApiException {
        okhttp3.Call localVarCall = updateByIdWebhookValidateBeforeCall(idWebhook, webhooks, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdWebhookAsync(String idWebhook, Webhooks webhooks, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdWebhookValidateBeforeCall(idWebhook, webhooks, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdWebhookRequestBuilder {
        private final String idWebhook;
        private String description;
        private String active;
        private String callbackURL;
        private String idModel;

        private UpdateByIdWebhookRequestBuilder(String idWebhook) {
            this.idWebhook = idWebhook;
        }

        /**
         * Set description
         * @param description a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdWebhookRequestBuilder
         */
        public UpdateByIdWebhookRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set active
         * @param active  true or false (optional)
         * @return UpdateByIdWebhookRequestBuilder
         */
        public UpdateByIdWebhookRequestBuilder active(String active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set callbackURL
         * @param callbackURL A valid URL that is reachable with a HEAD request (optional)
         * @return UpdateByIdWebhookRequestBuilder
         */
        public UpdateByIdWebhookRequestBuilder callbackURL(String callbackURL) {
            this.callbackURL = callbackURL;
            return this;
        }
        
        /**
         * Set idModel
         * @param idModel id of the model that should be hooked (optional)
         * @return UpdateByIdWebhookRequestBuilder
         */
        public UpdateByIdWebhookRequestBuilder idModel(String idModel) {
            this.idModel = idModel;
            return this;
        }
        
        /**
         * Build call for updateByIdWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Webhooks webhooks = buildBodyParams();
            return updateByIdWebhookCall(idWebhook, webhooks, _callback);
        }

        private Webhooks buildBodyParams() {
            Webhooks webhooks = new Webhooks();
            webhooks.description(this.description);
            webhooks.active(this.active);
            webhooks.callbackURL(this.callbackURL);
            webhooks.idModel(this.idModel);
            return webhooks;
        }

        /**
         * Execute updateByIdWebhook request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Webhooks webhooks = buildBodyParams();
            updateByIdWebhookWithHttpInfo(idWebhook, webhooks);
        }

        /**
         * Execute updateByIdWebhook request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Webhooks webhooks = buildBodyParams();
            return updateByIdWebhookWithHttpInfo(idWebhook, webhooks);
        }

        /**
         * Execute updateByIdWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Webhooks webhooks = buildBodyParams();
            return updateByIdWebhookAsync(idWebhook, webhooks, _callback);
        }
    }

    /**
     * updateWebhooksByIdWebhook()
     * 
     * @param idWebhook idWebhook (required)
     * @param webhooks Attributes of \&quot;Webhooks\&quot; to be updated. (required)
     * @return UpdateByIdWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdWebhookRequestBuilder updateByIdWebhook(String idWebhook) throws IllegalArgumentException {
        if (idWebhook == null) throw new IllegalArgumentException("\"idWebhook\" is required but got null");
            

        return new UpdateByIdWebhookRequestBuilder(idWebhook);
    }
    private okhttp3.Call updateCallbackUrlByIdCall(String idWebhook, WebhooksCallbackURL webhooksCallbackURL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksCallbackURL;

        // create path and map variables
        String localVarPath = "/webhooks/{idWebhook}/callbackURL"
            .replace("{" + "idWebhook" + "}", localVarApiClient.escapeString(idWebhook.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCallbackUrlByIdValidateBeforeCall(String idWebhook, WebhooksCallbackURL webhooksCallbackURL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idWebhook' is set
        if (idWebhook == null) {
            throw new ApiException("Missing the required parameter 'idWebhook' when calling updateCallbackUrlById(Async)");
        }

        // verify the required parameter 'webhooksCallbackURL' is set
        if (webhooksCallbackURL == null) {
            throw new ApiException("Missing the required parameter 'webhooksCallbackURL' when calling updateCallbackUrlById(Async)");
        }

        return updateCallbackUrlByIdCall(idWebhook, webhooksCallbackURL, _callback);

    }


    private ApiResponse<Void> updateCallbackUrlByIdWithHttpInfo(String idWebhook, WebhooksCallbackURL webhooksCallbackURL) throws ApiException {
        okhttp3.Call localVarCall = updateCallbackUrlByIdValidateBeforeCall(idWebhook, webhooksCallbackURL, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateCallbackUrlByIdAsync(String idWebhook, WebhooksCallbackURL webhooksCallbackURL, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCallbackUrlByIdValidateBeforeCall(idWebhook, webhooksCallbackURL, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateCallbackUrlByIdRequestBuilder {
        private final String idWebhook;
        private String value;

        private UpdateCallbackUrlByIdRequestBuilder(String idWebhook) {
            this.idWebhook = idWebhook;
        }

        /**
         * Set value
         * @param value A valid URL that is reachable with a HEAD request (optional)
         * @return UpdateCallbackUrlByIdRequestBuilder
         */
        public UpdateCallbackUrlByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateCallbackUrlById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksCallbackURL webhooksCallbackURL = buildBodyParams();
            return updateCallbackUrlByIdCall(idWebhook, webhooksCallbackURL, _callback);
        }

        private WebhooksCallbackURL buildBodyParams() {
            WebhooksCallbackURL webhooksCallbackURL = new WebhooksCallbackURL();
            webhooksCallbackURL.value(this.value);
            return webhooksCallbackURL;
        }

        /**
         * Execute updateCallbackUrlById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WebhooksCallbackURL webhooksCallbackURL = buildBodyParams();
            updateCallbackUrlByIdWithHttpInfo(idWebhook, webhooksCallbackURL);
        }

        /**
         * Execute updateCallbackUrlById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebhooksCallbackURL webhooksCallbackURL = buildBodyParams();
            return updateCallbackUrlByIdWithHttpInfo(idWebhook, webhooksCallbackURL);
        }

        /**
         * Execute updateCallbackUrlById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebhooksCallbackURL webhooksCallbackURL = buildBodyParams();
            return updateCallbackUrlByIdAsync(idWebhook, webhooksCallbackURL, _callback);
        }
    }

    /**
     * updateWebhooksCallbackURLByIdWebhook()
     * 
     * @param idWebhook idWebhook (required)
     * @param webhooksCallbackURL Attributes of \&quot;Webhooks Callback Url\&quot; to be updated. (required)
     * @return UpdateCallbackUrlByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCallbackUrlByIdRequestBuilder updateCallbackUrlById(String idWebhook) throws IllegalArgumentException {
        if (idWebhook == null) throw new IllegalArgumentException("\"idWebhook\" is required but got null");
            

        return new UpdateCallbackUrlByIdRequestBuilder(idWebhook);
    }
    private okhttp3.Call updateDescriptionByIdWebhookCall(String idWebhook, WebhooksDescription webhooksDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksDescription;

        // create path and map variables
        String localVarPath = "/webhooks/{idWebhook}/description"
            .replace("{" + "idWebhook" + "}", localVarApiClient.escapeString(idWebhook.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDescriptionByIdWebhookValidateBeforeCall(String idWebhook, WebhooksDescription webhooksDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idWebhook' is set
        if (idWebhook == null) {
            throw new ApiException("Missing the required parameter 'idWebhook' when calling updateDescriptionByIdWebhook(Async)");
        }

        // verify the required parameter 'webhooksDescription' is set
        if (webhooksDescription == null) {
            throw new ApiException("Missing the required parameter 'webhooksDescription' when calling updateDescriptionByIdWebhook(Async)");
        }

        return updateDescriptionByIdWebhookCall(idWebhook, webhooksDescription, _callback);

    }


    private ApiResponse<Void> updateDescriptionByIdWebhookWithHttpInfo(String idWebhook, WebhooksDescription webhooksDescription) throws ApiException {
        okhttp3.Call localVarCall = updateDescriptionByIdWebhookValidateBeforeCall(idWebhook, webhooksDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDescriptionByIdWebhookAsync(String idWebhook, WebhooksDescription webhooksDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDescriptionByIdWebhookValidateBeforeCall(idWebhook, webhooksDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDescriptionByIdWebhookRequestBuilder {
        private final String idWebhook;
        private String value;

        private UpdateDescriptionByIdWebhookRequestBuilder(String idWebhook) {
            this.idWebhook = idWebhook;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateDescriptionByIdWebhookRequestBuilder
         */
        public UpdateDescriptionByIdWebhookRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateDescriptionByIdWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksDescription webhooksDescription = buildBodyParams();
            return updateDescriptionByIdWebhookCall(idWebhook, webhooksDescription, _callback);
        }

        private WebhooksDescription buildBodyParams() {
            WebhooksDescription webhooksDescription = new WebhooksDescription();
            webhooksDescription.value(this.value);
            return webhooksDescription;
        }

        /**
         * Execute updateDescriptionByIdWebhook request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WebhooksDescription webhooksDescription = buildBodyParams();
            updateDescriptionByIdWebhookWithHttpInfo(idWebhook, webhooksDescription);
        }

        /**
         * Execute updateDescriptionByIdWebhook request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebhooksDescription webhooksDescription = buildBodyParams();
            return updateDescriptionByIdWebhookWithHttpInfo(idWebhook, webhooksDescription);
        }

        /**
         * Execute updateDescriptionByIdWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebhooksDescription webhooksDescription = buildBodyParams();
            return updateDescriptionByIdWebhookAsync(idWebhook, webhooksDescription, _callback);
        }
    }

    /**
     * updateWebhooksDescriptionByIdWebhook()
     * 
     * @param idWebhook idWebhook (required)
     * @param webhooksDescription Attributes of \&quot;Webhooks Description\&quot; to be updated. (required)
     * @return UpdateDescriptionByIdWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDescriptionByIdWebhookRequestBuilder updateDescriptionByIdWebhook(String idWebhook) throws IllegalArgumentException {
        if (idWebhook == null) throw new IllegalArgumentException("\"idWebhook\" is required but got null");
            

        return new UpdateDescriptionByIdWebhookRequestBuilder(idWebhook);
    }
    private okhttp3.Call updateModelByIdCall(String idWebhook, WebhooksIdModel webhooksIdModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksIdModel;

        // create path and map variables
        String localVarPath = "/webhooks/{idWebhook}/idModel"
            .replace("{" + "idWebhook" + "}", localVarApiClient.escapeString(idWebhook.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateModelByIdValidateBeforeCall(String idWebhook, WebhooksIdModel webhooksIdModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idWebhook' is set
        if (idWebhook == null) {
            throw new ApiException("Missing the required parameter 'idWebhook' when calling updateModelById(Async)");
        }

        // verify the required parameter 'webhooksIdModel' is set
        if (webhooksIdModel == null) {
            throw new ApiException("Missing the required parameter 'webhooksIdModel' when calling updateModelById(Async)");
        }

        return updateModelByIdCall(idWebhook, webhooksIdModel, _callback);

    }


    private ApiResponse<Void> updateModelByIdWithHttpInfo(String idWebhook, WebhooksIdModel webhooksIdModel) throws ApiException {
        okhttp3.Call localVarCall = updateModelByIdValidateBeforeCall(idWebhook, webhooksIdModel, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateModelByIdAsync(String idWebhook, WebhooksIdModel webhooksIdModel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateModelByIdValidateBeforeCall(idWebhook, webhooksIdModel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateModelByIdRequestBuilder {
        private final String idWebhook;
        private String value;

        private UpdateModelByIdRequestBuilder(String idWebhook) {
            this.idWebhook = idWebhook;
        }

        /**
         * Set value
         * @param value id of the model to be monitored (optional)
         * @return UpdateModelByIdRequestBuilder
         */
        public UpdateModelByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateModelById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksIdModel webhooksIdModel = buildBodyParams();
            return updateModelByIdCall(idWebhook, webhooksIdModel, _callback);
        }

        private WebhooksIdModel buildBodyParams() {
            WebhooksIdModel webhooksIdModel = new WebhooksIdModel();
            webhooksIdModel.value(this.value);
            return webhooksIdModel;
        }

        /**
         * Execute updateModelById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WebhooksIdModel webhooksIdModel = buildBodyParams();
            updateModelByIdWithHttpInfo(idWebhook, webhooksIdModel);
        }

        /**
         * Execute updateModelById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebhooksIdModel webhooksIdModel = buildBodyParams();
            return updateModelByIdWithHttpInfo(idWebhook, webhooksIdModel);
        }

        /**
         * Execute updateModelById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebhooksIdModel webhooksIdModel = buildBodyParams();
            return updateModelByIdAsync(idWebhook, webhooksIdModel, _callback);
        }
    }

    /**
     * updateWebhooksIdModelByIdWebhook()
     * 
     * @param idWebhook idWebhook (required)
     * @param webhooksIdModel Attributes of \&quot;Webhooks Id Model\&quot; to be updated. (required)
     * @return UpdateModelByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateModelByIdRequestBuilder updateModelById(String idWebhook) throws IllegalArgumentException {
        if (idWebhook == null) throw new IllegalArgumentException("\"idWebhook\" is required but got null");
            

        return new UpdateModelByIdRequestBuilder(idWebhook);
    }
}
