/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Lists;
import com.konfigthis.client.model.ListsCards;
import com.konfigthis.client.model.ListsClosed;
import com.konfigthis.client.model.ListsIdBoard;
import com.konfigthis.client.model.ListsMoveAllCards;
import com.konfigthis.client.model.ListsName;
import com.konfigthis.client.model.ListsPos;
import com.konfigthis.client.model.ListsSubscribed;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ListApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ListApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ListApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call archiveAllCardsByIdListCall(String idList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{idList}/archiveAllCards"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveAllCardsByIdListValidateBeforeCall(String idList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling archiveAllCardsByIdList(Async)");
        }

        return archiveAllCardsByIdListCall(idList, _callback);

    }


    private ApiResponse<Void> archiveAllCardsByIdListWithHttpInfo(String idList) throws ApiException {
        okhttp3.Call localVarCall = archiveAllCardsByIdListValidateBeforeCall(idList, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call archiveAllCardsByIdListAsync(String idList, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveAllCardsByIdListValidateBeforeCall(idList, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ArchiveAllCardsByIdListRequestBuilder {
        private final String idList;

        private ArchiveAllCardsByIdListRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Build call for archiveAllCardsByIdList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return archiveAllCardsByIdListCall(idList, _callback);
        }


        /**
         * Execute archiveAllCardsByIdList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            archiveAllCardsByIdListWithHttpInfo(idList);
        }

        /**
         * Execute archiveAllCardsByIdList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return archiveAllCardsByIdListWithHttpInfo(idList);
        }

        /**
         * Execute archiveAllCardsByIdList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return archiveAllCardsByIdListAsync(idList, _callback);
        }
    }

    /**
     * addListsArchiveAllCardsByIdList()
     * 
     * @param idList idList (required)
     * @return ArchiveAllCardsByIdListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ArchiveAllCardsByIdListRequestBuilder archiveAllCardsByIdList(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new ArchiveAllCardsByIdListRequestBuilder(idList);
    }
    private okhttp3.Call createCardsByIdListCall(String idList, ListsCards listsCards, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsCards;

        // create path and map variables
        String localVarPath = "/lists/{idList}/cards"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCardsByIdListValidateBeforeCall(String idList, ListsCards listsCards, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling createCardsByIdList(Async)");
        }

        // verify the required parameter 'listsCards' is set
        if (listsCards == null) {
            throw new ApiException("Missing the required parameter 'listsCards' when calling createCardsByIdList(Async)");
        }

        return createCardsByIdListCall(idList, listsCards, _callback);

    }


    private ApiResponse<Void> createCardsByIdListWithHttpInfo(String idList, ListsCards listsCards) throws ApiException {
        okhttp3.Call localVarCall = createCardsByIdListValidateBeforeCall(idList, listsCards, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createCardsByIdListAsync(String idList, ListsCards listsCards, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCardsByIdListValidateBeforeCall(idList, listsCards, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateCardsByIdListRequestBuilder {
        private final String idList;
        private String desc;
        private String due;
        private String idMembers;
        private String labels;
        private String name;

        private CreateCardsByIdListRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Set desc
         * @param desc a string with a length from 0 to 16384 (optional)
         * @return CreateCardsByIdListRequestBuilder
         */
        public CreateCardsByIdListRequestBuilder desc(String desc) {
            this.desc = desc;
            return this;
        }
        
        /**
         * Set due
         * @param due A date, or null (optional)
         * @return CreateCardsByIdListRequestBuilder
         */
        public CreateCardsByIdListRequestBuilder due(String due) {
            this.due = due;
            return this;
        }
        
        /**
         * Set idMembers
         * @param idMembers A comma-separated list of objectIds, 24-character hex strings (optional)
         * @return CreateCardsByIdListRequestBuilder
         */
        public CreateCardsByIdListRequestBuilder idMembers(String idMembers) {
            this.idMembers = idMembers;
            return this;
        }
        
        /**
         * Set labels
         * @param labels all or a comma-separated list of: blue, green, orange, purple, red or yellow (optional)
         * @return CreateCardsByIdListRequestBuilder
         */
        public CreateCardsByIdListRequestBuilder labels(String labels) {
            this.labels = labels;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 1 to 16384 (optional)
         * @return CreateCardsByIdListRequestBuilder
         */
        public CreateCardsByIdListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createCardsByIdList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsCards listsCards = buildBodyParams();
            return createCardsByIdListCall(idList, listsCards, _callback);
        }

        private ListsCards buildBodyParams() {
            ListsCards listsCards = new ListsCards();
            listsCards.desc(this.desc);
            listsCards.due(this.due);
            listsCards.idMembers(this.idMembers);
            listsCards.labels(this.labels);
            listsCards.name(this.name);
            return listsCards;
        }

        /**
         * Execute createCardsByIdList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ListsCards listsCards = buildBodyParams();
            createCardsByIdListWithHttpInfo(idList, listsCards);
        }

        /**
         * Execute createCardsByIdList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ListsCards listsCards = buildBodyParams();
            return createCardsByIdListWithHttpInfo(idList, listsCards);
        }

        /**
         * Execute createCardsByIdList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ListsCards listsCards = buildBodyParams();
            return createCardsByIdListAsync(idList, listsCards, _callback);
        }
    }

    /**
     * addListsCardsByIdList()
     * 
     * @param idList idList (required)
     * @param listsCards Attributes of \&quot;Lists Cards\&quot; to be added. (required)
     * @return CreateCardsByIdListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public CreateCardsByIdListRequestBuilder createCardsByIdList(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new CreateCardsByIdListRequestBuilder(idList);
    }
    private okhttp3.Call createListCall(Lists lists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lists;

        // create path and map variables
        String localVarPath = "/lists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createListValidateBeforeCall(Lists lists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lists' is set
        if (lists == null) {
            throw new ApiException("Missing the required parameter 'lists' when calling createList(Async)");
        }

        return createListCall(lists, _callback);

    }


    private ApiResponse<Void> createListWithHttpInfo(Lists lists) throws ApiException {
        okhttp3.Call localVarCall = createListValidateBeforeCall(lists, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createListAsync(Lists lists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createListValidateBeforeCall(lists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateListRequestBuilder {
        private String closed;
        private String idBoard;
        private String idListSource;
        private String name;
        private String pos;
        private String subscribed;

        private CreateListRequestBuilder() {
        }

        /**
         * Set closed
         * @param closed  true or false (optional)
         * @return CreateListRequestBuilder
         */
        public CreateListRequestBuilder closed(String closed) {
            this.closed = closed;
            return this;
        }
        
        /**
         * Set idBoard
         * @param idBoard id of the board that the list should be added to (optional)
         * @return CreateListRequestBuilder
         */
        public CreateListRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Set idListSource
         * @param idListSource The id of the list to copy into a new list. (optional)
         * @return CreateListRequestBuilder
         */
        public CreateListRequestBuilder idListSource(String idListSource) {
            this.idListSource = idListSource;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 1 to 16384 (optional)
         * @return CreateListRequestBuilder
         */
        public CreateListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return CreateListRequestBuilder
         */
        public CreateListRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Set subscribed
         * @param subscribed  true or false (optional)
         * @return CreateListRequestBuilder
         */
        public CreateListRequestBuilder subscribed(String subscribed) {
            this.subscribed = subscribed;
            return this;
        }
        
        /**
         * Build call for createList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Lists lists = buildBodyParams();
            return createListCall(lists, _callback);
        }

        private Lists buildBodyParams() {
            Lists lists = new Lists();
            lists.closed(this.closed);
            lists.idBoard(this.idBoard);
            lists.idListSource(this.idListSource);
            lists.name(this.name);
            lists.pos(this.pos);
            lists.subscribed(this.subscribed);
            return lists;
        }

        /**
         * Execute createList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Lists lists = buildBodyParams();
            createListWithHttpInfo(lists);
        }

        /**
         * Execute createList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Lists lists = buildBodyParams();
            return createListWithHttpInfo(lists);
        }

        /**
         * Execute createList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Lists lists = buildBodyParams();
            return createListAsync(lists, _callback);
        }
    }

    /**
     * addLists()
     * 
     * @param lists Attributes of \&quot;Lists\&quot; to be added. (required)
     * @return CreateListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public CreateListRequestBuilder createList() throws IllegalArgumentException {
        return new CreateListRequestBuilder();
    }
    private okhttp3.Call getActionsByIdListCall(String idList, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{idList}/actions"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (idModels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idModels", idModels));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (memberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator", memberCreator));
        }

        if (memberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator_fields", memberCreatorFields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActionsByIdListValidateBeforeCall(String idList, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling getActionsByIdList(Async)");
        }

        return getActionsByIdListCall(idList, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);

    }


    private ApiResponse<Void> getActionsByIdListWithHttpInfo(String idList, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields) throws ApiException {
        okhttp3.Call localVarCall = getActionsByIdListValidateBeforeCall(idList, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getActionsByIdListAsync(String idList, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActionsByIdListValidateBeforeCall(idList, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetActionsByIdListRequestBuilder {
        private final String idList;
        private String entities;
        private String display;
        private String filter;
        private String fields;
        private String limit;
        private String format;
        private String since;
        private String before;
        private String page;
        private String idModels;
        private String member;
        private String memberFields;
        private String memberCreator;
        private String memberCreatorFields;

        private GetActionsByIdListRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Set entities
         * @param entities  true or false (optional)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder entities(String entities) {
            this.entities = entities;
            return this;
        }
        
        /**
         * Set display
         * @param display  true or false (optional)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder display(String display) {
            this.display = display;
            return this;
        }
        
        /**
         * Set filter
         * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to all)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set limit
         * @param limit a number from 0 to 1000 (optional, default to 50)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set format
         * @param format One of: count, list or minimal (optional, default to list)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set since
         * @param since A date, null or lastView (optional)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set before
         * @param before A date, or null (optional)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set page
         * @param page Page * limit must be less than 1000 (optional, default to 0)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set idModels
         * @param idModels Only return actions related to these model ids (optional)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder idModels(String idModels) {
            this.idModels = idModels;
            return this;
        }
        
        /**
         * Set member
         * @param member  true or false (optional)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder member(String member) {
            this.member = member;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set memberCreator
         * @param memberCreator  true or false (optional)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder memberCreator(String memberCreator) {
            this.memberCreator = memberCreator;
            return this;
        }
        
        /**
         * Set memberCreatorFields
         * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetActionsByIdListRequestBuilder
         */
        public GetActionsByIdListRequestBuilder memberCreatorFields(String memberCreatorFields) {
            this.memberCreatorFields = memberCreatorFields;
            return this;
        }
        
        /**
         * Build call for getActionsByIdList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getActionsByIdListCall(idList, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        }


        /**
         * Execute getActionsByIdList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getActionsByIdListWithHttpInfo(idList, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
        }

        /**
         * Execute getActionsByIdList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getActionsByIdListWithHttpInfo(idList, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
        }

        /**
         * Execute getActionsByIdList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getActionsByIdListAsync(idList, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        }
    }

    /**
     * getListsActionsByIdList()
     * 
     * @param idList idList (required)
     * @return GetActionsByIdListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetActionsByIdListRequestBuilder getActionsByIdList(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new GetActionsByIdListRequestBuilder(idList);
    }
    private okhttp3.Call getBoardByIdListByFieldCall(String idList, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{idList}/board/{field}"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardByIdListByFieldValidateBeforeCall(String idList, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling getBoardByIdListByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getBoardByIdListByField(Async)");
        }

        return getBoardByIdListByFieldCall(idList, field, _callback);

    }


    private ApiResponse<Void> getBoardByIdListByFieldWithHttpInfo(String idList, String field) throws ApiException {
        okhttp3.Call localVarCall = getBoardByIdListByFieldValidateBeforeCall(idList, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardByIdListByFieldAsync(String idList, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardByIdListByFieldValidateBeforeCall(idList, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardByIdListByFieldRequestBuilder {
        private final String idList;
        private final String field;

        private GetBoardByIdListByFieldRequestBuilder(String idList, String field) {
            this.idList = idList;
            this.field = field;
        }

        /**
         * Build call for getBoardByIdListByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardByIdListByFieldCall(idList, field, _callback);
        }


        /**
         * Execute getBoardByIdListByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardByIdListByFieldWithHttpInfo(idList, field);
        }

        /**
         * Execute getBoardByIdListByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardByIdListByFieldWithHttpInfo(idList, field);
        }

        /**
         * Execute getBoardByIdListByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardByIdListByFieldAsync(idList, field, _callback);
        }
    }

    /**
     * getListsBoardByIdListByField()
     * 
     * @param idList idList (required)
     * @param field field (required)
     * @return GetBoardByIdListByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardByIdListByFieldRequestBuilder getBoardByIdListByField(String idList, String field) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetBoardByIdListByFieldRequestBuilder(idList, field);
    }
    private okhttp3.Call getByIdListCall(String idList, String cards, String cardFields, String board, String boardFields, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{idList}"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards", cards));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (board != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board", board));
        }

        if (boardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_fields", boardFields));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdListValidateBeforeCall(String idList, String cards, String cardFields, String board, String boardFields, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling getByIdList(Async)");
        }

        return getByIdListCall(idList, cards, cardFields, board, boardFields, fields, _callback);

    }


    private ApiResponse<Void> getByIdListWithHttpInfo(String idList, String cards, String cardFields, String board, String boardFields, String fields) throws ApiException {
        okhttp3.Call localVarCall = getByIdListValidateBeforeCall(idList, cards, cardFields, board, boardFields, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdListAsync(String idList, String cards, String cardFields, String board, String boardFields, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdListValidateBeforeCall(idList, cards, cardFields, board, boardFields, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdListRequestBuilder {
        private final String idList;
        private String cards;
        private String cardFields;
        private String board;
        private String boardFields;
        private String fields;

        private GetByIdListRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Set cards
         * @param cards One of: all, closed, none or open (optional, default to none)
         * @return GetByIdListRequestBuilder
         */
        public GetByIdListRequestBuilder cards(String cards) {
            this.cards = cards;
            return this;
        }
        
        /**
         * Set cardFields
         * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetByIdListRequestBuilder
         */
        public GetByIdListRequestBuilder cardFields(String cardFields) {
            this.cardFields = cardFields;
            return this;
        }
        
        /**
         * Set board
         * @param board  true or false (optional)
         * @return GetByIdListRequestBuilder
         */
        public GetByIdListRequestBuilder board(String board) {
            this.board = board;
            return this;
        }
        
        /**
         * Set boardFields
         * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, descData, closed, idOrganization, pinned, url and prefs)
         * @return GetByIdListRequestBuilder
         */
        public GetByIdListRequestBuilder boardFields(String boardFields) {
            this.boardFields = boardFields;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to name, closed, idBoard and pos)
         * @return GetByIdListRequestBuilder
         */
        public GetByIdListRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getByIdList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdListCall(idList, cards, cardFields, board, boardFields, fields, _callback);
        }


        /**
         * Execute getByIdList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdListWithHttpInfo(idList, cards, cardFields, board, boardFields, fields);
        }

        /**
         * Execute getByIdList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdListWithHttpInfo(idList, cards, cardFields, board, boardFields, fields);
        }

        /**
         * Execute getByIdList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdListAsync(idList, cards, cardFields, board, boardFields, fields, _callback);
        }
    }

    /**
     * getListsByIdList()
     * 
     * @param idList idList (required)
     * @return GetByIdListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdListRequestBuilder getByIdList(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new GetByIdListRequestBuilder(idList);
    }
    private okhttp3.Call getByIdListByFieldCall(String idList, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{idList}/{field}"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdListByFieldValidateBeforeCall(String idList, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling getByIdListByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getByIdListByField(Async)");
        }

        return getByIdListByFieldCall(idList, field, _callback);

    }


    private ApiResponse<Void> getByIdListByFieldWithHttpInfo(String idList, String field) throws ApiException {
        okhttp3.Call localVarCall = getByIdListByFieldValidateBeforeCall(idList, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdListByFieldAsync(String idList, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdListByFieldValidateBeforeCall(idList, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdListByFieldRequestBuilder {
        private final String idList;
        private final String field;

        private GetByIdListByFieldRequestBuilder(String idList, String field) {
            this.idList = idList;
            this.field = field;
        }

        /**
         * Build call for getByIdListByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdListByFieldCall(idList, field, _callback);
        }


        /**
         * Execute getByIdListByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdListByFieldWithHttpInfo(idList, field);
        }

        /**
         * Execute getByIdListByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdListByFieldWithHttpInfo(idList, field);
        }

        /**
         * Execute getByIdListByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdListByFieldAsync(idList, field, _callback);
        }
    }

    /**
     * getListsByIdListByField()
     * 
     * @param idList idList (required)
     * @param field field (required)
     * @return GetByIdListByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdListByFieldRequestBuilder getByIdListByField(String idList, String field) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetByIdListByFieldRequestBuilder(idList, field);
    }
    private okhttp3.Call getCardsByFilterCall(String idList, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{idList}/cards/{filter}"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsByFilterValidateBeforeCall(String idList, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling getCardsByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getCardsByFilter(Async)");
        }

        return getCardsByFilterCall(idList, filter, _callback);

    }


    private ApiResponse<Void> getCardsByFilterWithHttpInfo(String idList, String filter) throws ApiException {
        okhttp3.Call localVarCall = getCardsByFilterValidateBeforeCall(idList, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCardsByFilterAsync(String idList, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsByFilterValidateBeforeCall(idList, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCardsByFilterRequestBuilder {
        private final String idList;
        private final String filter;

        private GetCardsByFilterRequestBuilder(String idList, String filter) {
            this.idList = idList;
            this.filter = filter;
        }

        /**
         * Build call for getCardsByFilter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardsByFilterCall(idList, filter, _callback);
        }


        /**
         * Execute getCardsByFilter request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCardsByFilterWithHttpInfo(idList, filter);
        }

        /**
         * Execute getCardsByFilter request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCardsByFilterWithHttpInfo(idList, filter);
        }

        /**
         * Execute getCardsByFilter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCardsByFilterAsync(idList, filter, _callback);
        }
    }

    /**
     * getListsCardsByIdListByFilter()
     * 
     * @param idList idList (required)
     * @param filter filter (required)
     * @return GetCardsByFilterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCardsByFilterRequestBuilder getCardsByFilter(String idList, String filter) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new GetCardsByFilterRequestBuilder(idList, filter);
    }
    private okhttp3.Call getCardsByIdListCall(String idList, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{idList}/cards"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (stickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stickers", stickers));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsByIdListValidateBeforeCall(String idList, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling getCardsByIdList(Async)");
        }

        return getCardsByIdListCall(idList, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);

    }


    private ApiResponse<Void> getCardsByIdListWithHttpInfo(String idList, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsByIdListValidateBeforeCall(idList, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCardsByIdListAsync(String idList, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsByIdListValidateBeforeCall(idList, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCardsByIdListRequestBuilder {
        private final String idList;
        private String actions;
        private String attachments;
        private String attachmentFields;
        private String stickers;
        private String members;
        private String memberFields;
        private String checkItemStates;
        private String checklists;
        private String limit;
        private String since;
        private String before;
        private String filter;
        private String fields;

        private GetCardsByIdListRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder attachments(String attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set attachmentFields
         * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder attachmentFields(String attachmentFields) {
            this.attachmentFields = attachmentFields;
            return this;
        }
        
        /**
         * Set stickers
         * @param stickers  true or false (optional)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder stickers(String stickers) {
            this.stickers = stickers;
            return this;
        }
        
        /**
         * Set members
         * @param members  true or false (optional)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder members(String members) {
            this.members = members;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set checkItemStates
         * @param checkItemStates  true or false (optional)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder checkItemStates(String checkItemStates) {
            this.checkItemStates = checkItemStates;
            return this;
        }
        
        /**
         * Set checklists
         * @param checklists One of: all or none (optional, default to none)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder checklists(String checklists) {
            this.checklists = checklists;
            return this;
        }
        
        /**
         * Set limit
         * @param limit a number from 1 to 1000 (optional)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set since
         * @param since A date, or null (optional)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set before
         * @param before A date, or null (optional)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set filter
         * @param filter One of: all, closed, none or open (optional, default to open)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetCardsByIdListRequestBuilder
         */
        public GetCardsByIdListRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCardsByIdList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardsByIdListCall(idList, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        }


        /**
         * Execute getCardsByIdList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCardsByIdListWithHttpInfo(idList, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields);
        }

        /**
         * Execute getCardsByIdList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCardsByIdListWithHttpInfo(idList, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields);
        }

        /**
         * Execute getCardsByIdList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCardsByIdListAsync(idList, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        }
    }

    /**
     * getListsCardsByIdList()
     * 
     * @param idList idList (required)
     * @return GetCardsByIdListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCardsByIdListRequestBuilder getCardsByIdList(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new GetCardsByIdListRequestBuilder(idList);
    }
    private okhttp3.Call idBoardGetCall(String idList, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{idList}/board"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idBoardGetValidateBeforeCall(String idList, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling idBoardGet(Async)");
        }

        return idBoardGetCall(idList, fields, _callback);

    }


    private ApiResponse<Void> idBoardGetWithHttpInfo(String idList, String fields) throws ApiException {
        okhttp3.Call localVarCall = idBoardGetValidateBeforeCall(idList, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call idBoardGetAsync(String idList, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = idBoardGetValidateBeforeCall(idList, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class IdBoardGetRequestBuilder {
        private final String idList;
        private String fields;

        private IdBoardGetRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
         * @return IdBoardGetRequestBuilder
         */
        public IdBoardGetRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for idBoardGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return idBoardGetCall(idList, fields, _callback);
        }


        /**
         * Execute idBoardGet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            idBoardGetWithHttpInfo(idList, fields);
        }

        /**
         * Execute idBoardGet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return idBoardGetWithHttpInfo(idList, fields);
        }

        /**
         * Execute idBoardGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return idBoardGetAsync(idList, fields, _callback);
        }
    }

    /**
     * getListsBoardByIdList()
     * 
     * @param idList idList (required)
     * @return IdBoardGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public IdBoardGetRequestBuilder idBoardGet(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new IdBoardGetRequestBuilder(idList);
    }
    private okhttp3.Call moveAllCardsByIdListCall(String idList, ListsMoveAllCards listsMoveAllCards, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsMoveAllCards;

        // create path and map variables
        String localVarPath = "/lists/{idList}/moveAllCards"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveAllCardsByIdListValidateBeforeCall(String idList, ListsMoveAllCards listsMoveAllCards, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling moveAllCardsByIdList(Async)");
        }

        // verify the required parameter 'listsMoveAllCards' is set
        if (listsMoveAllCards == null) {
            throw new ApiException("Missing the required parameter 'listsMoveAllCards' when calling moveAllCardsByIdList(Async)");
        }

        return moveAllCardsByIdListCall(idList, listsMoveAllCards, _callback);

    }


    private ApiResponse<Void> moveAllCardsByIdListWithHttpInfo(String idList, ListsMoveAllCards listsMoveAllCards) throws ApiException {
        okhttp3.Call localVarCall = moveAllCardsByIdListValidateBeforeCall(idList, listsMoveAllCards, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call moveAllCardsByIdListAsync(String idList, ListsMoveAllCards listsMoveAllCards, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveAllCardsByIdListValidateBeforeCall(idList, listsMoveAllCards, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class MoveAllCardsByIdListRequestBuilder {
        private final String idList;
        private String idBoard;

        private MoveAllCardsByIdListRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Set idBoard
         * @param idBoard id of the board that the cards should be moved to (optional)
         * @return MoveAllCardsByIdListRequestBuilder
         */
        public MoveAllCardsByIdListRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Build call for moveAllCardsByIdList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsMoveAllCards listsMoveAllCards = buildBodyParams();
            return moveAllCardsByIdListCall(idList, listsMoveAllCards, _callback);
        }

        private ListsMoveAllCards buildBodyParams() {
            ListsMoveAllCards listsMoveAllCards = new ListsMoveAllCards();
            listsMoveAllCards.idBoard(this.idBoard);
            return listsMoveAllCards;
        }

        /**
         * Execute moveAllCardsByIdList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ListsMoveAllCards listsMoveAllCards = buildBodyParams();
            moveAllCardsByIdListWithHttpInfo(idList, listsMoveAllCards);
        }

        /**
         * Execute moveAllCardsByIdList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ListsMoveAllCards listsMoveAllCards = buildBodyParams();
            return moveAllCardsByIdListWithHttpInfo(idList, listsMoveAllCards);
        }

        /**
         * Execute moveAllCardsByIdList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ListsMoveAllCards listsMoveAllCards = buildBodyParams();
            return moveAllCardsByIdListAsync(idList, listsMoveAllCards, _callback);
        }
    }

    /**
     * addListsMoveAllCardsByIdList()
     * 
     * @param idList idList (required)
     * @param listsMoveAllCards Attributes of \&quot;Lists Move All Cards\&quot; to be added. (required)
     * @return MoveAllCardsByIdListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public MoveAllCardsByIdListRequestBuilder moveAllCardsByIdList(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new MoveAllCardsByIdListRequestBuilder(idList);
    }
    private okhttp3.Call updateByIdListCall(String idList, Lists lists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lists;

        // create path and map variables
        String localVarPath = "/lists/{idList}"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdListValidateBeforeCall(String idList, Lists lists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling updateByIdList(Async)");
        }

        // verify the required parameter 'lists' is set
        if (lists == null) {
            throw new ApiException("Missing the required parameter 'lists' when calling updateByIdList(Async)");
        }

        return updateByIdListCall(idList, lists, _callback);

    }


    private ApiResponse<Void> updateByIdListWithHttpInfo(String idList, Lists lists) throws ApiException {
        okhttp3.Call localVarCall = updateByIdListValidateBeforeCall(idList, lists, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdListAsync(String idList, Lists lists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdListValidateBeforeCall(idList, lists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdListRequestBuilder {
        private final String idList;
        private String closed;
        private String idBoard;
        private String idListSource;
        private String name;
        private String pos;
        private String subscribed;

        private UpdateByIdListRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Set closed
         * @param closed  true or false (optional)
         * @return UpdateByIdListRequestBuilder
         */
        public UpdateByIdListRequestBuilder closed(String closed) {
            this.closed = closed;
            return this;
        }
        
        /**
         * Set idBoard
         * @param idBoard id of the board that the list should be added to (optional)
         * @return UpdateByIdListRequestBuilder
         */
        public UpdateByIdListRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Set idListSource
         * @param idListSource The id of the list to copy into a new list. (optional)
         * @return UpdateByIdListRequestBuilder
         */
        public UpdateByIdListRequestBuilder idListSource(String idListSource) {
            this.idListSource = idListSource;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 1 to 16384 (optional)
         * @return UpdateByIdListRequestBuilder
         */
        public UpdateByIdListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return UpdateByIdListRequestBuilder
         */
        public UpdateByIdListRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Set subscribed
         * @param subscribed  true or false (optional)
         * @return UpdateByIdListRequestBuilder
         */
        public UpdateByIdListRequestBuilder subscribed(String subscribed) {
            this.subscribed = subscribed;
            return this;
        }
        
        /**
         * Build call for updateByIdList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Lists lists = buildBodyParams();
            return updateByIdListCall(idList, lists, _callback);
        }

        private Lists buildBodyParams() {
            Lists lists = new Lists();
            lists.closed(this.closed);
            lists.idBoard(this.idBoard);
            lists.idListSource(this.idListSource);
            lists.name(this.name);
            lists.pos(this.pos);
            lists.subscribed(this.subscribed);
            return lists;
        }

        /**
         * Execute updateByIdList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Lists lists = buildBodyParams();
            updateByIdListWithHttpInfo(idList, lists);
        }

        /**
         * Execute updateByIdList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Lists lists = buildBodyParams();
            return updateByIdListWithHttpInfo(idList, lists);
        }

        /**
         * Execute updateByIdList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Lists lists = buildBodyParams();
            return updateByIdListAsync(idList, lists, _callback);
        }
    }

    /**
     * updateListsByIdList()
     * 
     * @param idList idList (required)
     * @param lists Attributes of \&quot;Lists\&quot; to be updated. (required)
     * @return UpdateByIdListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdListRequestBuilder updateByIdList(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new UpdateByIdListRequestBuilder(idList);
    }
    private okhttp3.Call updateClosedByIdListCall(String idList, ListsClosed listsClosed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsClosed;

        // create path and map variables
        String localVarPath = "/lists/{idList}/closed"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClosedByIdListValidateBeforeCall(String idList, ListsClosed listsClosed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling updateClosedByIdList(Async)");
        }

        // verify the required parameter 'listsClosed' is set
        if (listsClosed == null) {
            throw new ApiException("Missing the required parameter 'listsClosed' when calling updateClosedByIdList(Async)");
        }

        return updateClosedByIdListCall(idList, listsClosed, _callback);

    }


    private ApiResponse<Void> updateClosedByIdListWithHttpInfo(String idList, ListsClosed listsClosed) throws ApiException {
        okhttp3.Call localVarCall = updateClosedByIdListValidateBeforeCall(idList, listsClosed, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateClosedByIdListAsync(String idList, ListsClosed listsClosed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClosedByIdListValidateBeforeCall(idList, listsClosed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateClosedByIdListRequestBuilder {
        private final String idList;
        private String value;

        private UpdateClosedByIdListRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateClosedByIdListRequestBuilder
         */
        public UpdateClosedByIdListRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateClosedByIdList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsClosed listsClosed = buildBodyParams();
            return updateClosedByIdListCall(idList, listsClosed, _callback);
        }

        private ListsClosed buildBodyParams() {
            ListsClosed listsClosed = new ListsClosed();
            listsClosed.value(this.value);
            return listsClosed;
        }

        /**
         * Execute updateClosedByIdList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ListsClosed listsClosed = buildBodyParams();
            updateClosedByIdListWithHttpInfo(idList, listsClosed);
        }

        /**
         * Execute updateClosedByIdList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ListsClosed listsClosed = buildBodyParams();
            return updateClosedByIdListWithHttpInfo(idList, listsClosed);
        }

        /**
         * Execute updateClosedByIdList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ListsClosed listsClosed = buildBodyParams();
            return updateClosedByIdListAsync(idList, listsClosed, _callback);
        }
    }

    /**
     * updateListsClosedByIdList()
     * 
     * @param idList idList (required)
     * @param listsClosed Attributes of \&quot;Lists Closed\&quot; to be updated. (required)
     * @return UpdateClosedByIdListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateClosedByIdListRequestBuilder updateClosedByIdList(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new UpdateClosedByIdListRequestBuilder(idList);
    }
    private okhttp3.Call updateIdBoardByIdListCall(String idList, ListsIdBoard listsIdBoard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsIdBoard;

        // create path and map variables
        String localVarPath = "/lists/{idList}/idBoard"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIdBoardByIdListValidateBeforeCall(String idList, ListsIdBoard listsIdBoard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling updateIdBoardByIdList(Async)");
        }

        // verify the required parameter 'listsIdBoard' is set
        if (listsIdBoard == null) {
            throw new ApiException("Missing the required parameter 'listsIdBoard' when calling updateIdBoardByIdList(Async)");
        }

        return updateIdBoardByIdListCall(idList, listsIdBoard, _callback);

    }


    private ApiResponse<Void> updateIdBoardByIdListWithHttpInfo(String idList, ListsIdBoard listsIdBoard) throws ApiException {
        okhttp3.Call localVarCall = updateIdBoardByIdListValidateBeforeCall(idList, listsIdBoard, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateIdBoardByIdListAsync(String idList, ListsIdBoard listsIdBoard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIdBoardByIdListValidateBeforeCall(idList, listsIdBoard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateIdBoardByIdListRequestBuilder {
        private final String idList;
        private String pos;
        private String value;

        private UpdateIdBoardByIdListRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Set pos
         * @param pos position of the list on the new board (optional)
         * @return UpdateIdBoardByIdListRequestBuilder
         */
        public UpdateIdBoardByIdListRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Set value
         * @param value id of the board the list should be moved to (optional)
         * @return UpdateIdBoardByIdListRequestBuilder
         */
        public UpdateIdBoardByIdListRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateIdBoardByIdList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsIdBoard listsIdBoard = buildBodyParams();
            return updateIdBoardByIdListCall(idList, listsIdBoard, _callback);
        }

        private ListsIdBoard buildBodyParams() {
            ListsIdBoard listsIdBoard = new ListsIdBoard();
            listsIdBoard.pos(this.pos);
            listsIdBoard.value(this.value);
            return listsIdBoard;
        }

        /**
         * Execute updateIdBoardByIdList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ListsIdBoard listsIdBoard = buildBodyParams();
            updateIdBoardByIdListWithHttpInfo(idList, listsIdBoard);
        }

        /**
         * Execute updateIdBoardByIdList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ListsIdBoard listsIdBoard = buildBodyParams();
            return updateIdBoardByIdListWithHttpInfo(idList, listsIdBoard);
        }

        /**
         * Execute updateIdBoardByIdList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ListsIdBoard listsIdBoard = buildBodyParams();
            return updateIdBoardByIdListAsync(idList, listsIdBoard, _callback);
        }
    }

    /**
     * updateListsIdBoardByIdList()
     * 
     * @param idList idList (required)
     * @param listsIdBoard Attributes of \&quot;Lists Id Board\&quot; to be updated. (required)
     * @return UpdateIdBoardByIdListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateIdBoardByIdListRequestBuilder updateIdBoardByIdList(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new UpdateIdBoardByIdListRequestBuilder(idList);
    }
    private okhttp3.Call updateNameByIdListCall(String idList, ListsName listsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsName;

        // create path and map variables
        String localVarPath = "/lists/{idList}/name"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNameByIdListValidateBeforeCall(String idList, ListsName listsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling updateNameByIdList(Async)");
        }

        // verify the required parameter 'listsName' is set
        if (listsName == null) {
            throw new ApiException("Missing the required parameter 'listsName' when calling updateNameByIdList(Async)");
        }

        return updateNameByIdListCall(idList, listsName, _callback);

    }


    private ApiResponse<Void> updateNameByIdListWithHttpInfo(String idList, ListsName listsName) throws ApiException {
        okhttp3.Call localVarCall = updateNameByIdListValidateBeforeCall(idList, listsName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateNameByIdListAsync(String idList, ListsName listsName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNameByIdListValidateBeforeCall(idList, listsName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateNameByIdListRequestBuilder {
        private final String idList;
        private String value;

        private UpdateNameByIdListRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Set value
         * @param value a string with a length from 1 to 16384 (optional)
         * @return UpdateNameByIdListRequestBuilder
         */
        public UpdateNameByIdListRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateNameByIdList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsName listsName = buildBodyParams();
            return updateNameByIdListCall(idList, listsName, _callback);
        }

        private ListsName buildBodyParams() {
            ListsName listsName = new ListsName();
            listsName.value(this.value);
            return listsName;
        }

        /**
         * Execute updateNameByIdList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ListsName listsName = buildBodyParams();
            updateNameByIdListWithHttpInfo(idList, listsName);
        }

        /**
         * Execute updateNameByIdList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ListsName listsName = buildBodyParams();
            return updateNameByIdListWithHttpInfo(idList, listsName);
        }

        /**
         * Execute updateNameByIdList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ListsName listsName = buildBodyParams();
            return updateNameByIdListAsync(idList, listsName, _callback);
        }
    }

    /**
     * updateListsNameByIdList()
     * 
     * @param idList idList (required)
     * @param listsName Attributes of \&quot;Lists Name\&quot; to be updated. (required)
     * @return UpdateNameByIdListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateNameByIdListRequestBuilder updateNameByIdList(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new UpdateNameByIdListRequestBuilder(idList);
    }
    private okhttp3.Call updatePosByIdListCall(String idList, ListsPos listsPos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsPos;

        // create path and map variables
        String localVarPath = "/lists/{idList}/pos"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePosByIdListValidateBeforeCall(String idList, ListsPos listsPos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling updatePosByIdList(Async)");
        }

        // verify the required parameter 'listsPos' is set
        if (listsPos == null) {
            throw new ApiException("Missing the required parameter 'listsPos' when calling updatePosByIdList(Async)");
        }

        return updatePosByIdListCall(idList, listsPos, _callback);

    }


    private ApiResponse<Void> updatePosByIdListWithHttpInfo(String idList, ListsPos listsPos) throws ApiException {
        okhttp3.Call localVarCall = updatePosByIdListValidateBeforeCall(idList, listsPos, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePosByIdListAsync(String idList, ListsPos listsPos, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePosByIdListValidateBeforeCall(idList, listsPos, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePosByIdListRequestBuilder {
        private final String idList;
        private String value;

        private UpdatePosByIdListRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Set value
         * @param value A position. top , bottom , or a positive number. (optional)
         * @return UpdatePosByIdListRequestBuilder
         */
        public UpdatePosByIdListRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePosByIdList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsPos listsPos = buildBodyParams();
            return updatePosByIdListCall(idList, listsPos, _callback);
        }

        private ListsPos buildBodyParams() {
            ListsPos listsPos = new ListsPos();
            listsPos.value(this.value);
            return listsPos;
        }

        /**
         * Execute updatePosByIdList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ListsPos listsPos = buildBodyParams();
            updatePosByIdListWithHttpInfo(idList, listsPos);
        }

        /**
         * Execute updatePosByIdList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ListsPos listsPos = buildBodyParams();
            return updatePosByIdListWithHttpInfo(idList, listsPos);
        }

        /**
         * Execute updatePosByIdList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ListsPos listsPos = buildBodyParams();
            return updatePosByIdListAsync(idList, listsPos, _callback);
        }
    }

    /**
     * updateListsPosByIdList()
     * 
     * @param idList idList (required)
     * @param listsPos Attributes of \&quot;Lists Pos\&quot; to be updated. (required)
     * @return UpdatePosByIdListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePosByIdListRequestBuilder updatePosByIdList(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new UpdatePosByIdListRequestBuilder(idList);
    }
    private okhttp3.Call updateSubscribedByIdListCall(String idList, ListsSubscribed listsSubscribed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listsSubscribed;

        // create path and map variables
        String localVarPath = "/lists/{idList}/subscribed"
            .replace("{" + "idList" + "}", localVarApiClient.escapeString(idList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscribedByIdListValidateBeforeCall(String idList, ListsSubscribed listsSubscribed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idList' is set
        if (idList == null) {
            throw new ApiException("Missing the required parameter 'idList' when calling updateSubscribedByIdList(Async)");
        }

        // verify the required parameter 'listsSubscribed' is set
        if (listsSubscribed == null) {
            throw new ApiException("Missing the required parameter 'listsSubscribed' when calling updateSubscribedByIdList(Async)");
        }

        return updateSubscribedByIdListCall(idList, listsSubscribed, _callback);

    }


    private ApiResponse<Void> updateSubscribedByIdListWithHttpInfo(String idList, ListsSubscribed listsSubscribed) throws ApiException {
        okhttp3.Call localVarCall = updateSubscribedByIdListValidateBeforeCall(idList, listsSubscribed, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSubscribedByIdListAsync(String idList, ListsSubscribed listsSubscribed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscribedByIdListValidateBeforeCall(idList, listsSubscribed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSubscribedByIdListRequestBuilder {
        private final String idList;
        private String value;

        private UpdateSubscribedByIdListRequestBuilder(String idList) {
            this.idList = idList;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateSubscribedByIdListRequestBuilder
         */
        public UpdateSubscribedByIdListRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateSubscribedByIdList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ListsSubscribed listsSubscribed = buildBodyParams();
            return updateSubscribedByIdListCall(idList, listsSubscribed, _callback);
        }

        private ListsSubscribed buildBodyParams() {
            ListsSubscribed listsSubscribed = new ListsSubscribed();
            listsSubscribed.value(this.value);
            return listsSubscribed;
        }

        /**
         * Execute updateSubscribedByIdList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ListsSubscribed listsSubscribed = buildBodyParams();
            updateSubscribedByIdListWithHttpInfo(idList, listsSubscribed);
        }

        /**
         * Execute updateSubscribedByIdList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ListsSubscribed listsSubscribed = buildBodyParams();
            return updateSubscribedByIdListWithHttpInfo(idList, listsSubscribed);
        }

        /**
         * Execute updateSubscribedByIdList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ListsSubscribed listsSubscribed = buildBodyParams();
            return updateSubscribedByIdListAsync(idList, listsSubscribed, _callback);
        }
    }

    /**
     * updateListsSubscribedByIdList()
     * 
     * @param idList idList (required)
     * @param listsSubscribed Attributes of \&quot;Lists Subscribed\&quot; to be updated. (required)
     * @return UpdateSubscribedByIdListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSubscribedByIdListRequestBuilder updateSubscribedByIdList(String idList) throws IllegalArgumentException {
        if (idList == null) throw new IllegalArgumentException("\"idList\" is required but got null");
            

        return new UpdateSubscribedByIdListRequestBuilder(idList);
    }
}
