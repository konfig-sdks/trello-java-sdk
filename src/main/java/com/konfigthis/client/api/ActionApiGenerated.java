/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Actions;
import com.konfigthis.client.model.ActionsText;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ActionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ActionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBoardByIdActionCall(String idAction, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/board"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardByIdActionValidateBeforeCall(String idAction, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getBoardByIdAction(Async)");
        }

        return getBoardByIdActionCall(idAction, fields, _callback);

    }


    private ApiResponse<Void> getBoardByIdActionWithHttpInfo(String idAction, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardByIdActionValidateBeforeCall(idAction, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardByIdActionAsync(String idAction, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardByIdActionValidateBeforeCall(idAction, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardByIdActionRequestBuilder {
        private final String idAction;
        private String fields;

        private GetBoardByIdActionRequestBuilder(String idAction) {
            this.idAction = idAction;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
         * @return GetBoardByIdActionRequestBuilder
         */
        public GetBoardByIdActionRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getBoardByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardByIdActionCall(idAction, fields, _callback);
        }


        /**
         * Execute getBoardByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardByIdActionWithHttpInfo(idAction, fields);
        }

        /**
         * Execute getBoardByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardByIdActionWithHttpInfo(idAction, fields);
        }

        /**
         * Execute getBoardByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardByIdActionAsync(idAction, fields, _callback);
        }
    }

    /**
     * getActionsBoardByIdAction()
     * 
     * @param idAction idAction (required)
     * @return GetBoardByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardByIdActionRequestBuilder getBoardByIdAction(String idAction) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new GetBoardByIdActionRequestBuilder(idAction);
    }
    private okhttp3.Call getBoardByIdActionByFieldCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/board/{field}"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardByIdActionByFieldValidateBeforeCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getBoardByIdActionByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getBoardByIdActionByField(Async)");
        }

        return getBoardByIdActionByFieldCall(idAction, field, _callback);

    }


    private ApiResponse<Void> getBoardByIdActionByFieldWithHttpInfo(String idAction, String field) throws ApiException {
        okhttp3.Call localVarCall = getBoardByIdActionByFieldValidateBeforeCall(idAction, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardByIdActionByFieldAsync(String idAction, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardByIdActionByFieldValidateBeforeCall(idAction, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardByIdActionByFieldRequestBuilder {
        private final String idAction;
        private final String field;

        private GetBoardByIdActionByFieldRequestBuilder(String idAction, String field) {
            this.idAction = idAction;
            this.field = field;
        }

        /**
         * Build call for getBoardByIdActionByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardByIdActionByFieldCall(idAction, field, _callback);
        }


        /**
         * Execute getBoardByIdActionByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardByIdActionByFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getBoardByIdActionByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardByIdActionByFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getBoardByIdActionByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardByIdActionByFieldAsync(idAction, field, _callback);
        }
    }

    /**
     * getActionsBoardByIdActionByField()
     * 
     * @param idAction idAction (required)
     * @param field field (required)
     * @return GetBoardByIdActionByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardByIdActionByFieldRequestBuilder getBoardByIdActionByField(String idAction, String field) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetBoardByIdActionByFieldRequestBuilder(idAction, field);
    }
    private okhttp3.Call getByIdCall(String idAction, String display, String entities, String fields, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (memberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator", memberCreator));
        }

        if (memberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator_fields", memberCreatorFields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String idAction, String display, String entities, String fields, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getById(Async)");
        }

        return getByIdCall(idAction, display, entities, fields, member, memberFields, memberCreator, memberCreatorFields, _callback);

    }


    private ApiResponse<Void> getByIdWithHttpInfo(String idAction, String display, String entities, String fields, String member, String memberFields, String memberCreator, String memberCreatorFields) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idAction, display, entities, fields, member, memberFields, memberCreator, memberCreatorFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdAsync(String idAction, String display, String entities, String fields, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idAction, display, entities, fields, member, memberFields, memberCreator, memberCreatorFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String idAction;
        private String display;
        private String entities;
        private String fields;
        private String member;
        private String memberFields;
        private String memberCreator;
        private String memberCreatorFields;

        private GetByIdRequestBuilder(String idAction) {
            this.idAction = idAction;
        }

        /**
         * Set display
         * @param display  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder display(String display) {
            this.display = display;
            return this;
        }
        
        /**
         * Set entities
         * @param entities  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder entities(String entities) {
            this.entities = entities;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set member
         * @param member  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder member(String member) {
            this.member = member;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set memberCreator
         * @param memberCreator  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder memberCreator(String memberCreator) {
            this.memberCreator = memberCreator;
            return this;
        }
        
        /**
         * Set memberCreatorFields
         * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder memberCreatorFields(String memberCreatorFields) {
            this.memberCreatorFields = memberCreatorFields;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(idAction, display, entities, fields, member, memberFields, memberCreator, memberCreatorFields, _callback);
        }


        /**
         * Execute getById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdWithHttpInfo(idAction, display, entities, fields, member, memberFields, memberCreator, memberCreatorFields);
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(idAction, display, entities, fields, member, memberFields, memberCreator, memberCreatorFields);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdAsync(idAction, display, entities, fields, member, memberFields, memberCreator, memberCreatorFields, _callback);
        }
    }

    /**
     * getActionsByIdAction()
     * 
     * @param idAction idAction (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String idAction) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new GetByIdRequestBuilder(idAction);
    }
    private okhttp3.Call getByIdActionFieldCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/{field}"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdActionFieldValidateBeforeCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getByIdActionField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getByIdActionField(Async)");
        }

        return getByIdActionFieldCall(idAction, field, _callback);

    }


    private ApiResponse<Void> getByIdActionFieldWithHttpInfo(String idAction, String field) throws ApiException {
        okhttp3.Call localVarCall = getByIdActionFieldValidateBeforeCall(idAction, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdActionFieldAsync(String idAction, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdActionFieldValidateBeforeCall(idAction, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdActionFieldRequestBuilder {
        private final String idAction;
        private final String field;

        private GetByIdActionFieldRequestBuilder(String idAction, String field) {
            this.idAction = idAction;
            this.field = field;
        }

        /**
         * Build call for getByIdActionField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdActionFieldCall(idAction, field, _callback);
        }


        /**
         * Execute getByIdActionField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdActionFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getByIdActionField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdActionFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getByIdActionField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdActionFieldAsync(idAction, field, _callback);
        }
    }

    /**
     * getActionsByIdActionByField()
     * 
     * @param idAction idAction (required)
     * @param field field (required)
     * @return GetByIdActionFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdActionFieldRequestBuilder getByIdActionField(String idAction, String field) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetByIdActionFieldRequestBuilder(idAction, field);
    }
    private okhttp3.Call getCardByIdActionCall(String idAction, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/card"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardByIdActionValidateBeforeCall(String idAction, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getCardByIdAction(Async)");
        }

        return getCardByIdActionCall(idAction, fields, _callback);

    }


    private ApiResponse<Void> getCardByIdActionWithHttpInfo(String idAction, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardByIdActionValidateBeforeCall(idAction, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCardByIdActionAsync(String idAction, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardByIdActionValidateBeforeCall(idAction, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCardByIdActionRequestBuilder {
        private final String idAction;
        private String fields;

        private GetCardByIdActionRequestBuilder(String idAction) {
            this.idAction = idAction;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetCardByIdActionRequestBuilder
         */
        public GetCardByIdActionRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCardByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardByIdActionCall(idAction, fields, _callback);
        }


        /**
         * Execute getCardByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCardByIdActionWithHttpInfo(idAction, fields);
        }

        /**
         * Execute getCardByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCardByIdActionWithHttpInfo(idAction, fields);
        }

        /**
         * Execute getCardByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCardByIdActionAsync(idAction, fields, _callback);
        }
    }

    /**
     * getActionsCardByIdAction()
     * 
     * @param idAction idAction (required)
     * @return GetCardByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCardByIdActionRequestBuilder getCardByIdAction(String idAction) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new GetCardByIdActionRequestBuilder(idAction);
    }
    private okhttp3.Call getCardByIdActionByFieldCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/card/{field}"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardByIdActionByFieldValidateBeforeCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getCardByIdActionByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getCardByIdActionByField(Async)");
        }

        return getCardByIdActionByFieldCall(idAction, field, _callback);

    }


    private ApiResponse<Void> getCardByIdActionByFieldWithHttpInfo(String idAction, String field) throws ApiException {
        okhttp3.Call localVarCall = getCardByIdActionByFieldValidateBeforeCall(idAction, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCardByIdActionByFieldAsync(String idAction, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardByIdActionByFieldValidateBeforeCall(idAction, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCardByIdActionByFieldRequestBuilder {
        private final String idAction;
        private final String field;

        private GetCardByIdActionByFieldRequestBuilder(String idAction, String field) {
            this.idAction = idAction;
            this.field = field;
        }

        /**
         * Build call for getCardByIdActionByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardByIdActionByFieldCall(idAction, field, _callback);
        }


        /**
         * Execute getCardByIdActionByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCardByIdActionByFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getCardByIdActionByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCardByIdActionByFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getCardByIdActionByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCardByIdActionByFieldAsync(idAction, field, _callback);
        }
    }

    /**
     * getActionsCardByIdActionByField()
     * 
     * @param idAction idAction (required)
     * @param field field (required)
     * @return GetCardByIdActionByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCardByIdActionByFieldRequestBuilder getCardByIdActionByField(String idAction, String field) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetCardByIdActionByFieldRequestBuilder(idAction, field);
    }
    private okhttp3.Call getDisplayByIdActionCall(String idAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/display"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDisplayByIdActionValidateBeforeCall(String idAction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getDisplayByIdAction(Async)");
        }

        return getDisplayByIdActionCall(idAction, _callback);

    }


    private ApiResponse<Void> getDisplayByIdActionWithHttpInfo(String idAction) throws ApiException {
        okhttp3.Call localVarCall = getDisplayByIdActionValidateBeforeCall(idAction, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDisplayByIdActionAsync(String idAction, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDisplayByIdActionValidateBeforeCall(idAction, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDisplayByIdActionRequestBuilder {
        private final String idAction;

        private GetDisplayByIdActionRequestBuilder(String idAction) {
            this.idAction = idAction;
        }

        /**
         * Build call for getDisplayByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDisplayByIdActionCall(idAction, _callback);
        }


        /**
         * Execute getDisplayByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDisplayByIdActionWithHttpInfo(idAction);
        }

        /**
         * Execute getDisplayByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDisplayByIdActionWithHttpInfo(idAction);
        }

        /**
         * Execute getDisplayByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDisplayByIdActionAsync(idAction, _callback);
        }
    }

    /**
     * getActionsDisplayByIdAction()
     * 
     * @param idAction idAction (required)
     * @return GetDisplayByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetDisplayByIdActionRequestBuilder getDisplayByIdAction(String idAction) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new GetDisplayByIdActionRequestBuilder(idAction);
    }
    private okhttp3.Call getEntitiesByIdActionCall(String idAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/entities"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitiesByIdActionValidateBeforeCall(String idAction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getEntitiesByIdAction(Async)");
        }

        return getEntitiesByIdActionCall(idAction, _callback);

    }


    private ApiResponse<Void> getEntitiesByIdActionWithHttpInfo(String idAction) throws ApiException {
        okhttp3.Call localVarCall = getEntitiesByIdActionValidateBeforeCall(idAction, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEntitiesByIdActionAsync(String idAction, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitiesByIdActionValidateBeforeCall(idAction, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetEntitiesByIdActionRequestBuilder {
        private final String idAction;

        private GetEntitiesByIdActionRequestBuilder(String idAction) {
            this.idAction = idAction;
        }

        /**
         * Build call for getEntitiesByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEntitiesByIdActionCall(idAction, _callback);
        }


        /**
         * Execute getEntitiesByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getEntitiesByIdActionWithHttpInfo(idAction);
        }

        /**
         * Execute getEntitiesByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getEntitiesByIdActionWithHttpInfo(idAction);
        }

        /**
         * Execute getEntitiesByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getEntitiesByIdActionAsync(idAction, _callback);
        }
    }

    /**
     * getActionsEntitiesByIdAction()
     * 
     * @param idAction idAction (required)
     * @return GetEntitiesByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetEntitiesByIdActionRequestBuilder getEntitiesByIdAction(String idAction) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new GetEntitiesByIdActionRequestBuilder(idAction);
    }
    private okhttp3.Call getListByIdActionCall(String idAction, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/list"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListByIdActionValidateBeforeCall(String idAction, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getListByIdAction(Async)");
        }

        return getListByIdActionCall(idAction, fields, _callback);

    }


    private ApiResponse<Void> getListByIdActionWithHttpInfo(String idAction, String fields) throws ApiException {
        okhttp3.Call localVarCall = getListByIdActionValidateBeforeCall(idAction, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getListByIdActionAsync(String idAction, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListByIdActionValidateBeforeCall(idAction, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetListByIdActionRequestBuilder {
        private final String idAction;
        private String fields;

        private GetListByIdActionRequestBuilder(String idAction) {
            this.idAction = idAction;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
         * @return GetListByIdActionRequestBuilder
         */
        public GetListByIdActionRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getListByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListByIdActionCall(idAction, fields, _callback);
        }


        /**
         * Execute getListByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getListByIdActionWithHttpInfo(idAction, fields);
        }

        /**
         * Execute getListByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getListByIdActionWithHttpInfo(idAction, fields);
        }

        /**
         * Execute getListByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getListByIdActionAsync(idAction, fields, _callback);
        }
    }

    /**
     * getActionsListByIdAction()
     * 
     * @param idAction idAction (required)
     * @return GetListByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetListByIdActionRequestBuilder getListByIdAction(String idAction) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new GetListByIdActionRequestBuilder(idAction);
    }
    private okhttp3.Call getListByIdActionByFieldCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/list/{field}"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListByIdActionByFieldValidateBeforeCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getListByIdActionByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getListByIdActionByField(Async)");
        }

        return getListByIdActionByFieldCall(idAction, field, _callback);

    }


    private ApiResponse<Void> getListByIdActionByFieldWithHttpInfo(String idAction, String field) throws ApiException {
        okhttp3.Call localVarCall = getListByIdActionByFieldValidateBeforeCall(idAction, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getListByIdActionByFieldAsync(String idAction, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListByIdActionByFieldValidateBeforeCall(idAction, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetListByIdActionByFieldRequestBuilder {
        private final String idAction;
        private final String field;

        private GetListByIdActionByFieldRequestBuilder(String idAction, String field) {
            this.idAction = idAction;
            this.field = field;
        }

        /**
         * Build call for getListByIdActionByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListByIdActionByFieldCall(idAction, field, _callback);
        }


        /**
         * Execute getListByIdActionByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getListByIdActionByFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getListByIdActionByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getListByIdActionByFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getListByIdActionByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getListByIdActionByFieldAsync(idAction, field, _callback);
        }
    }

    /**
     * getActionsListByIdActionByField()
     * 
     * @param idAction idAction (required)
     * @param field field (required)
     * @return GetListByIdActionByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetListByIdActionByFieldRequestBuilder getListByIdActionByField(String idAction, String field) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetListByIdActionByFieldRequestBuilder(idAction, field);
    }
    private okhttp3.Call getMemberByFieldCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/member/{field}"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberByFieldValidateBeforeCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getMemberByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getMemberByField(Async)");
        }

        return getMemberByFieldCall(idAction, field, _callback);

    }


    private ApiResponse<Void> getMemberByFieldWithHttpInfo(String idAction, String field) throws ApiException {
        okhttp3.Call localVarCall = getMemberByFieldValidateBeforeCall(idAction, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMemberByFieldAsync(String idAction, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberByFieldValidateBeforeCall(idAction, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMemberByFieldRequestBuilder {
        private final String idAction;
        private final String field;

        private GetMemberByFieldRequestBuilder(String idAction, String field) {
            this.idAction = idAction;
            this.field = field;
        }

        /**
         * Build call for getMemberByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberByFieldCall(idAction, field, _callback);
        }


        /**
         * Execute getMemberByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMemberByFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getMemberByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMemberByFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getMemberByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMemberByFieldAsync(idAction, field, _callback);
        }
    }

    /**
     * getActionsMemberByIdActionByField()
     * 
     * @param idAction idAction (required)
     * @param field field (required)
     * @return GetMemberByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberByFieldRequestBuilder getMemberByField(String idAction, String field) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetMemberByFieldRequestBuilder(idAction, field);
    }
    private okhttp3.Call getMemberByIdActionCall(String idAction, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/member"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberByIdActionValidateBeforeCall(String idAction, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getMemberByIdAction(Async)");
        }

        return getMemberByIdActionCall(idAction, fields, _callback);

    }


    private ApiResponse<Void> getMemberByIdActionWithHttpInfo(String idAction, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMemberByIdActionValidateBeforeCall(idAction, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMemberByIdActionAsync(String idAction, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberByIdActionValidateBeforeCall(idAction, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMemberByIdActionRequestBuilder {
        private final String idAction;
        private String fields;

        private GetMemberByIdActionRequestBuilder(String idAction) {
            this.idAction = idAction;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
         * @return GetMemberByIdActionRequestBuilder
         */
        public GetMemberByIdActionRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getMemberByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberByIdActionCall(idAction, fields, _callback);
        }


        /**
         * Execute getMemberByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMemberByIdActionWithHttpInfo(idAction, fields);
        }

        /**
         * Execute getMemberByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMemberByIdActionWithHttpInfo(idAction, fields);
        }

        /**
         * Execute getMemberByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMemberByIdActionAsync(idAction, fields, _callback);
        }
    }

    /**
     * getActionsMemberByIdAction()
     * 
     * @param idAction idAction (required)
     * @return GetMemberByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberByIdActionRequestBuilder getMemberByIdAction(String idAction) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new GetMemberByIdActionRequestBuilder(idAction);
    }
    private okhttp3.Call getMemberByIdActionByFieldCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/memberCreator/{field}"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberByIdActionByFieldValidateBeforeCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getMemberByIdActionByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getMemberByIdActionByField(Async)");
        }

        return getMemberByIdActionByFieldCall(idAction, field, _callback);

    }


    private ApiResponse<Void> getMemberByIdActionByFieldWithHttpInfo(String idAction, String field) throws ApiException {
        okhttp3.Call localVarCall = getMemberByIdActionByFieldValidateBeforeCall(idAction, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMemberByIdActionByFieldAsync(String idAction, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberByIdActionByFieldValidateBeforeCall(idAction, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMemberByIdActionByFieldRequestBuilder {
        private final String idAction;
        private final String field;

        private GetMemberByIdActionByFieldRequestBuilder(String idAction, String field) {
            this.idAction = idAction;
            this.field = field;
        }

        /**
         * Build call for getMemberByIdActionByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberByIdActionByFieldCall(idAction, field, _callback);
        }


        /**
         * Execute getMemberByIdActionByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMemberByIdActionByFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getMemberByIdActionByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMemberByIdActionByFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getMemberByIdActionByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMemberByIdActionByFieldAsync(idAction, field, _callback);
        }
    }

    /**
     * getActionsMemberCreatorByIdActionByField()
     * 
     * @param idAction idAction (required)
     * @param field field (required)
     * @return GetMemberByIdActionByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberByIdActionByFieldRequestBuilder getMemberByIdActionByField(String idAction, String field) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetMemberByIdActionByFieldRequestBuilder(idAction, field);
    }
    private okhttp3.Call getMemberCreatorByIdActionCall(String idAction, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/memberCreator"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberCreatorByIdActionValidateBeforeCall(String idAction, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getMemberCreatorByIdAction(Async)");
        }

        return getMemberCreatorByIdActionCall(idAction, fields, _callback);

    }


    private ApiResponse<Void> getMemberCreatorByIdActionWithHttpInfo(String idAction, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMemberCreatorByIdActionValidateBeforeCall(idAction, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMemberCreatorByIdActionAsync(String idAction, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberCreatorByIdActionValidateBeforeCall(idAction, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMemberCreatorByIdActionRequestBuilder {
        private final String idAction;
        private String fields;

        private GetMemberCreatorByIdActionRequestBuilder(String idAction) {
            this.idAction = idAction;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
         * @return GetMemberCreatorByIdActionRequestBuilder
         */
        public GetMemberCreatorByIdActionRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getMemberCreatorByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberCreatorByIdActionCall(idAction, fields, _callback);
        }


        /**
         * Execute getMemberCreatorByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMemberCreatorByIdActionWithHttpInfo(idAction, fields);
        }

        /**
         * Execute getMemberCreatorByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMemberCreatorByIdActionWithHttpInfo(idAction, fields);
        }

        /**
         * Execute getMemberCreatorByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMemberCreatorByIdActionAsync(idAction, fields, _callback);
        }
    }

    /**
     * getActionsMemberCreatorByIdAction()
     * 
     * @param idAction idAction (required)
     * @return GetMemberCreatorByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberCreatorByIdActionRequestBuilder getMemberCreatorByIdAction(String idAction) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new GetMemberCreatorByIdActionRequestBuilder(idAction);
    }
    private okhttp3.Call getOrgByIdActionByFieldCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/organization/{field}"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrgByIdActionByFieldValidateBeforeCall(String idAction, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getOrgByIdActionByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getOrgByIdActionByField(Async)");
        }

        return getOrgByIdActionByFieldCall(idAction, field, _callback);

    }


    private ApiResponse<Void> getOrgByIdActionByFieldWithHttpInfo(String idAction, String field) throws ApiException {
        okhttp3.Call localVarCall = getOrgByIdActionByFieldValidateBeforeCall(idAction, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getOrgByIdActionByFieldAsync(String idAction, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrgByIdActionByFieldValidateBeforeCall(idAction, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetOrgByIdActionByFieldRequestBuilder {
        private final String idAction;
        private final String field;

        private GetOrgByIdActionByFieldRequestBuilder(String idAction, String field) {
            this.idAction = idAction;
            this.field = field;
        }

        /**
         * Build call for getOrgByIdActionByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrgByIdActionByFieldCall(idAction, field, _callback);
        }


        /**
         * Execute getOrgByIdActionByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getOrgByIdActionByFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getOrgByIdActionByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getOrgByIdActionByFieldWithHttpInfo(idAction, field);
        }

        /**
         * Execute getOrgByIdActionByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getOrgByIdActionByFieldAsync(idAction, field, _callback);
        }
    }

    /**
     * getActionsOrganizationByIdActionByField()
     * 
     * @param idAction idAction (required)
     * @param field field (required)
     * @return GetOrgByIdActionByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetOrgByIdActionByFieldRequestBuilder getOrgByIdActionByField(String idAction, String field) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetOrgByIdActionByFieldRequestBuilder(idAction, field);
    }
    private okhttp3.Call getOrganizationByIdActionCall(String idAction, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/organization"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationByIdActionValidateBeforeCall(String idAction, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling getOrganizationByIdAction(Async)");
        }

        return getOrganizationByIdActionCall(idAction, fields, _callback);

    }


    private ApiResponse<Void> getOrganizationByIdActionWithHttpInfo(String idAction, String fields) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationByIdActionValidateBeforeCall(idAction, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getOrganizationByIdActionAsync(String idAction, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationByIdActionValidateBeforeCall(idAction, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetOrganizationByIdActionRequestBuilder {
        private final String idAction;
        private String fields;

        private GetOrganizationByIdActionRequestBuilder(String idAction) {
            this.idAction = idAction;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
         * @return GetOrganizationByIdActionRequestBuilder
         */
        public GetOrganizationByIdActionRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getOrganizationByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationByIdActionCall(idAction, fields, _callback);
        }


        /**
         * Execute getOrganizationByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getOrganizationByIdActionWithHttpInfo(idAction, fields);
        }

        /**
         * Execute getOrganizationByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getOrganizationByIdActionWithHttpInfo(idAction, fields);
        }

        /**
         * Execute getOrganizationByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getOrganizationByIdActionAsync(idAction, fields, _callback);
        }
    }

    /**
     * getActionsOrganizationByIdAction()
     * 
     * @param idAction idAction (required)
     * @return GetOrganizationByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationByIdActionRequestBuilder getOrganizationByIdAction(String idAction) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new GetOrganizationByIdActionRequestBuilder(idAction);
    }
    private okhttp3.Call removeByIdActionCall(String idAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{idAction}"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdActionValidateBeforeCall(String idAction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling removeByIdAction(Async)");
        }

        return removeByIdActionCall(idAction, _callback);

    }


    private ApiResponse<Void> removeByIdActionWithHttpInfo(String idAction) throws ApiException {
        okhttp3.Call localVarCall = removeByIdActionValidateBeforeCall(idAction, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdActionAsync(String idAction, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdActionValidateBeforeCall(idAction, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdActionRequestBuilder {
        private final String idAction;

        private RemoveByIdActionRequestBuilder(String idAction) {
            this.idAction = idAction;
        }

        /**
         * Build call for removeByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdActionCall(idAction, _callback);
        }


        /**
         * Execute removeByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdActionWithHttpInfo(idAction);
        }

        /**
         * Execute removeByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdActionWithHttpInfo(idAction);
        }

        /**
         * Execute removeByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdActionAsync(idAction, _callback);
        }
    }

    /**
     * deleteActionsByIdAction()
     * 
     * @param idAction idAction (required)
     * @return RemoveByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdActionRequestBuilder removeByIdAction(String idAction) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new RemoveByIdActionRequestBuilder(idAction);
    }
    private okhttp3.Call updateByIdActionCall(String idAction, Actions actions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actions;

        // create path and map variables
        String localVarPath = "/actions/{idAction}"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdActionValidateBeforeCall(String idAction, Actions actions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling updateByIdAction(Async)");
        }

        // verify the required parameter 'actions' is set
        if (actions == null) {
            throw new ApiException("Missing the required parameter 'actions' when calling updateByIdAction(Async)");
        }

        return updateByIdActionCall(idAction, actions, _callback);

    }


    private ApiResponse<Void> updateByIdActionWithHttpInfo(String idAction, Actions actions) throws ApiException {
        okhttp3.Call localVarCall = updateByIdActionValidateBeforeCall(idAction, actions, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdActionAsync(String idAction, Actions actions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdActionValidateBeforeCall(idAction, actions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdActionRequestBuilder {
        private final String idAction;
        private String text;

        private UpdateByIdActionRequestBuilder(String idAction) {
            this.idAction = idAction;
        }

        /**
         * Set text
         * @param text a string with a length from 1 to 16384 (optional)
         * @return UpdateByIdActionRequestBuilder
         */
        public UpdateByIdActionRequestBuilder text(String text) {
            this.text = text;
            return this;
        }
        
        /**
         * Build call for updateByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Actions actions = buildBodyParams();
            return updateByIdActionCall(idAction, actions, _callback);
        }

        private Actions buildBodyParams() {
            Actions actions = new Actions();
            actions.text(this.text);
            return actions;
        }

        /**
         * Execute updateByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Actions actions = buildBodyParams();
            updateByIdActionWithHttpInfo(idAction, actions);
        }

        /**
         * Execute updateByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Actions actions = buildBodyParams();
            return updateByIdActionWithHttpInfo(idAction, actions);
        }

        /**
         * Execute updateByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Actions actions = buildBodyParams();
            return updateByIdActionAsync(idAction, actions, _callback);
        }
    }

    /**
     * updateActionsByIdAction()
     * 
     * @param idAction idAction (required)
     * @param actions Attributes of \&quot;Actions\&quot; to be updated. (required)
     * @return UpdateByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdActionRequestBuilder updateByIdAction(String idAction) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new UpdateByIdActionRequestBuilder(idAction);
    }
    private okhttp3.Call updateTextByIdActionCall(String idAction, ActionsText actionsText, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsText;

        // create path and map variables
        String localVarPath = "/actions/{idAction}/text"
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTextByIdActionValidateBeforeCall(String idAction, ActionsText actionsText, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling updateTextByIdAction(Async)");
        }

        // verify the required parameter 'actionsText' is set
        if (actionsText == null) {
            throw new ApiException("Missing the required parameter 'actionsText' when calling updateTextByIdAction(Async)");
        }

        return updateTextByIdActionCall(idAction, actionsText, _callback);

    }


    private ApiResponse<Void> updateTextByIdActionWithHttpInfo(String idAction, ActionsText actionsText) throws ApiException {
        okhttp3.Call localVarCall = updateTextByIdActionValidateBeforeCall(idAction, actionsText, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateTextByIdActionAsync(String idAction, ActionsText actionsText, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTextByIdActionValidateBeforeCall(idAction, actionsText, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateTextByIdActionRequestBuilder {
        private final String idAction;
        private String value;

        private UpdateTextByIdActionRequestBuilder(String idAction) {
            this.idAction = idAction;
        }

        /**
         * Set value
         * @param value a string with a length from 1 to 16384 (optional)
         * @return UpdateTextByIdActionRequestBuilder
         */
        public UpdateTextByIdActionRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateTextByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ActionsText actionsText = buildBodyParams();
            return updateTextByIdActionCall(idAction, actionsText, _callback);
        }

        private ActionsText buildBodyParams() {
            ActionsText actionsText = new ActionsText();
            actionsText.value(this.value);
            return actionsText;
        }

        /**
         * Execute updateTextByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ActionsText actionsText = buildBodyParams();
            updateTextByIdActionWithHttpInfo(idAction, actionsText);
        }

        /**
         * Execute updateTextByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ActionsText actionsText = buildBodyParams();
            return updateTextByIdActionWithHttpInfo(idAction, actionsText);
        }

        /**
         * Execute updateTextByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ActionsText actionsText = buildBodyParams();
            return updateTextByIdActionAsync(idAction, actionsText, _callback);
        }
    }

    /**
     * updateActionsTextByIdAction()
     * 
     * @param idAction idAction (required)
     * @param actionsText Attributes of \&quot;Actions Text\&quot; to be updated. (required)
     * @return UpdateTextByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTextByIdActionRequestBuilder updateTextByIdAction(String idAction) throws IllegalArgumentException {
        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new UpdateTextByIdActionRequestBuilder(idAction);
    }
}
