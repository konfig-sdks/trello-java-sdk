/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Sessions;
import com.konfigthis.client.model.SessionsStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SessionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SessionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SessionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAndUpdateCall(Sessions sessions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sessions;

        // create path and map variables
        String localVarPath = "/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAndUpdateValidateBeforeCall(Sessions sessions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessions' is set
        if (sessions == null) {
            throw new ApiException("Missing the required parameter 'sessions' when calling createAndUpdate(Async)");
        }

        return createAndUpdateCall(sessions, _callback);

    }


    private ApiResponse<Void> createAndUpdateWithHttpInfo(Sessions sessions) throws ApiException {
        okhttp3.Call localVarCall = createAndUpdateValidateBeforeCall(sessions, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createAndUpdateAsync(Sessions sessions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAndUpdateValidateBeforeCall(sessions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateAndUpdateRequestBuilder {
        private String idBoard;
        private String status;

        private CreateAndUpdateRequestBuilder() {
        }

        /**
         * Set idBoard
         * @param idBoard The id of the board you&amp;#39;re viewing.  Boards with no viewers will not get updates about members&amp;#39; statuses. (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Set status
         * @param status One of: active, disconnected or idle (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for createAndUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Sessions sessions = buildBodyParams();
            return createAndUpdateCall(sessions, _callback);
        }

        private Sessions buildBodyParams() {
            Sessions sessions = new Sessions();
            sessions.idBoard(this.idBoard);
            sessions.status(this.status);
            return sessions;
        }

        /**
         * Execute createAndUpdate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Sessions sessions = buildBodyParams();
            createAndUpdateWithHttpInfo(sessions);
        }

        /**
         * Execute createAndUpdate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Sessions sessions = buildBodyParams();
            return createAndUpdateWithHttpInfo(sessions);
        }

        /**
         * Execute createAndUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Sessions sessions = buildBodyParams();
            return createAndUpdateAsync(sessions, _callback);
        }
    }

    /**
     * addSessions()
     * 
     * @param sessions Attributes of \&quot;Sessions\&quot; to be added. (required)
     * @return CreateAndUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public CreateAndUpdateRequestBuilder createAndUpdate() throws IllegalArgumentException {
        return new CreateAndUpdateRequestBuilder();
    }
    private okhttp3.Call getSocketSessionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessions/socket";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSocketSessionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSocketSessionsCall(_callback);

    }


    private ApiResponse<Void> getSocketSessionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSocketSessionsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getSocketSessionsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSocketSessionsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetSocketSessionsRequestBuilder {

        private GetSocketSessionsRequestBuilder() {
        }

        /**
         * Build call for getSocketSessions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSocketSessionsCall(_callback);
        }


        /**
         * Execute getSocketSessions request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getSocketSessionsWithHttpInfo();
        }

        /**
         * Execute getSocketSessions request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getSocketSessionsWithHttpInfo();
        }

        /**
         * Execute getSocketSessions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getSocketSessionsAsync(_callback);
        }
    }

    /**
     * getSessionsSocket()
     * This is the route for WebSocket requests.  See the socket API reference for a description of WebSocket usage.
     * @return GetSocketSessionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetSocketSessionsRequestBuilder getSocketSessions() throws IllegalArgumentException {
        return new GetSocketSessionsRequestBuilder();
    }
    private okhttp3.Call updateStatusByIdSessionCall(String idSession, Sessions sessions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sessions;

        // create path and map variables
        String localVarPath = "/sessions/{idSession}"
            .replace("{" + "idSession" + "}", localVarApiClient.escapeString(idSession.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusByIdSessionValidateBeforeCall(String idSession, Sessions sessions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idSession' is set
        if (idSession == null) {
            throw new ApiException("Missing the required parameter 'idSession' when calling updateStatusByIdSession(Async)");
        }

        // verify the required parameter 'sessions' is set
        if (sessions == null) {
            throw new ApiException("Missing the required parameter 'sessions' when calling updateStatusByIdSession(Async)");
        }

        return updateStatusByIdSessionCall(idSession, sessions, _callback);

    }


    private ApiResponse<Void> updateStatusByIdSessionWithHttpInfo(String idSession, Sessions sessions) throws ApiException {
        okhttp3.Call localVarCall = updateStatusByIdSessionValidateBeforeCall(idSession, sessions, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateStatusByIdSessionAsync(String idSession, Sessions sessions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusByIdSessionValidateBeforeCall(idSession, sessions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateStatusByIdSessionRequestBuilder {
        private final String idSession;
        private String idBoard;
        private String status;

        private UpdateStatusByIdSessionRequestBuilder(String idSession) {
            this.idSession = idSession;
        }

        /**
         * Set idBoard
         * @param idBoard The id of the board you&amp;#39;re viewing.  Boards with no viewers will not get updates about members&amp;#39; statuses. (optional)
         * @return UpdateStatusByIdSessionRequestBuilder
         */
        public UpdateStatusByIdSessionRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Set status
         * @param status One of: active, disconnected or idle (optional)
         * @return UpdateStatusByIdSessionRequestBuilder
         */
        public UpdateStatusByIdSessionRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updateStatusByIdSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Sessions sessions = buildBodyParams();
            return updateStatusByIdSessionCall(idSession, sessions, _callback);
        }

        private Sessions buildBodyParams() {
            Sessions sessions = new Sessions();
            sessions.idBoard(this.idBoard);
            sessions.status(this.status);
            return sessions;
        }

        /**
         * Execute updateStatusByIdSession request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Sessions sessions = buildBodyParams();
            updateStatusByIdSessionWithHttpInfo(idSession, sessions);
        }

        /**
         * Execute updateStatusByIdSession request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Sessions sessions = buildBodyParams();
            return updateStatusByIdSessionWithHttpInfo(idSession, sessions);
        }

        /**
         * Execute updateStatusByIdSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Sessions sessions = buildBodyParams();
            return updateStatusByIdSessionAsync(idSession, sessions, _callback);
        }
    }

    /**
     * updateSessionsByIdSession()
     * 
     * @param idSession idSession (required)
     * @param sessions Attributes of \&quot;Sessions\&quot; to be updated. (required)
     * @return UpdateStatusByIdSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatusByIdSessionRequestBuilder updateStatusByIdSession(String idSession) throws IllegalArgumentException {
        if (idSession == null) throw new IllegalArgumentException("\"idSession\" is required but got null");
            

        return new UpdateStatusByIdSessionRequestBuilder(idSession);
    }
    private okhttp3.Call updateStatusByIdSession_0Call(String idSession, SessionsStatus sessionsStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sessionsStatus;

        // create path and map variables
        String localVarPath = "/sessions/{idSession}/status"
            .replace("{" + "idSession" + "}", localVarApiClient.escapeString(idSession.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusByIdSession_0ValidateBeforeCall(String idSession, SessionsStatus sessionsStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idSession' is set
        if (idSession == null) {
            throw new ApiException("Missing the required parameter 'idSession' when calling updateStatusByIdSession_0(Async)");
        }

        // verify the required parameter 'sessionsStatus' is set
        if (sessionsStatus == null) {
            throw new ApiException("Missing the required parameter 'sessionsStatus' when calling updateStatusByIdSession_0(Async)");
        }

        return updateStatusByIdSession_0Call(idSession, sessionsStatus, _callback);

    }


    private ApiResponse<Void> updateStatusByIdSession_0WithHttpInfo(String idSession, SessionsStatus sessionsStatus) throws ApiException {
        okhttp3.Call localVarCall = updateStatusByIdSession_0ValidateBeforeCall(idSession, sessionsStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateStatusByIdSession_0Async(String idSession, SessionsStatus sessionsStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusByIdSession_0ValidateBeforeCall(idSession, sessionsStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateStatusByIdSession0RequestBuilder {
        private final String idSession;
        private String value;

        private UpdateStatusByIdSession0RequestBuilder(String idSession) {
            this.idSession = idSession;
        }

        /**
         * Set value
         * @param value One of: active, disconnected or idle (optional)
         * @return UpdateStatusByIdSession0RequestBuilder
         */
        public UpdateStatusByIdSession0RequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateStatusByIdSession_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SessionsStatus sessionsStatus = buildBodyParams();
            return updateStatusByIdSession_0Call(idSession, sessionsStatus, _callback);
        }

        private SessionsStatus buildBodyParams() {
            SessionsStatus sessionsStatus = new SessionsStatus();
            sessionsStatus.value(this.value);
            return sessionsStatus;
        }

        /**
         * Execute updateStatusByIdSession_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SessionsStatus sessionsStatus = buildBodyParams();
            updateStatusByIdSession_0WithHttpInfo(idSession, sessionsStatus);
        }

        /**
         * Execute updateStatusByIdSession_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SessionsStatus sessionsStatus = buildBodyParams();
            return updateStatusByIdSession_0WithHttpInfo(idSession, sessionsStatus);
        }

        /**
         * Execute updateStatusByIdSession_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SessionsStatus sessionsStatus = buildBodyParams();
            return updateStatusByIdSession_0Async(idSession, sessionsStatus, _callback);
        }
    }

    /**
     * updateSessionsStatusByIdSession()
     * 
     * @param idSession idSession (required)
     * @param sessionsStatus Attributes of \&quot;Sessions Status\&quot; to be updated. (required)
     * @return UpdateStatusByIdSession0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatusByIdSession0RequestBuilder updateStatusByIdSession_0(String idSession) throws IllegalArgumentException {
        if (idSession == null) throw new IllegalArgumentException("\"idSession\" is required but got null");
            

        return new UpdateStatusByIdSession0RequestBuilder(idSession);
    }
}
