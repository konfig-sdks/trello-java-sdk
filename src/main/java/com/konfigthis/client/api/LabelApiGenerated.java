/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Labels;
import com.konfigthis.client.model.LabelsColor;
import com.konfigthis.client.model.LabelsName;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LabelApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LabelApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LabelApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createLabelsCall(Labels labels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labels;

        // create path and map variables
        String localVarPath = "/labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLabelsValidateBeforeCall(Labels labels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labels' is set
        if (labels == null) {
            throw new ApiException("Missing the required parameter 'labels' when calling createLabels(Async)");
        }

        return createLabelsCall(labels, _callback);

    }


    private ApiResponse<Void> createLabelsWithHttpInfo(Labels labels) throws ApiException {
        okhttp3.Call localVarCall = createLabelsValidateBeforeCall(labels, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createLabelsAsync(Labels labels, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLabelsValidateBeforeCall(labels, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateLabelsRequestBuilder {
        private String color;
        private String idBoard;
        private String name;

        private CreateLabelsRequestBuilder() {
        }

        /**
         * Set color
         * @param color A valid label color or null (optional)
         * @return CreateLabelsRequestBuilder
         */
        public CreateLabelsRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set idBoard
         * @param idBoard An id (optional)
         * @return CreateLabelsRequestBuilder
         */
        public CreateLabelsRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 0 to 16384 (optional)
         * @return CreateLabelsRequestBuilder
         */
        public CreateLabelsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createLabels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Labels labels = buildBodyParams();
            return createLabelsCall(labels, _callback);
        }

        private Labels buildBodyParams() {
            Labels labels = new Labels();
            labels.color(this.color);
            labels.idBoard(this.idBoard);
            labels.name(this.name);
            return labels;
        }

        /**
         * Execute createLabels request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Labels labels = buildBodyParams();
            createLabelsWithHttpInfo(labels);
        }

        /**
         * Execute createLabels request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Labels labels = buildBodyParams();
            return createLabelsWithHttpInfo(labels);
        }

        /**
         * Execute createLabels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Labels labels = buildBodyParams();
            return createLabelsAsync(labels, _callback);
        }
    }

    /**
     * addLabels()
     * 
     * @param labels Attributes of \&quot;Labels\&quot; to be added. (required)
     * @return CreateLabelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public CreateLabelsRequestBuilder createLabels() throws IllegalArgumentException {
        return new CreateLabelsRequestBuilder();
    }
    private okhttp3.Call getBoardByIdLabelCall(String idLabel, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/labels/{idLabel}/board"
            .replace("{" + "idLabel" + "}", localVarApiClient.escapeString(idLabel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardByIdLabelValidateBeforeCall(String idLabel, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idLabel' is set
        if (idLabel == null) {
            throw new ApiException("Missing the required parameter 'idLabel' when calling getBoardByIdLabel(Async)");
        }

        return getBoardByIdLabelCall(idLabel, fields, _callback);

    }


    private ApiResponse<Void> getBoardByIdLabelWithHttpInfo(String idLabel, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardByIdLabelValidateBeforeCall(idLabel, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardByIdLabelAsync(String idLabel, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardByIdLabelValidateBeforeCall(idLabel, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardByIdLabelRequestBuilder {
        private final String idLabel;
        private String fields;

        private GetBoardByIdLabelRequestBuilder(String idLabel) {
            this.idLabel = idLabel;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
         * @return GetBoardByIdLabelRequestBuilder
         */
        public GetBoardByIdLabelRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getBoardByIdLabel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardByIdLabelCall(idLabel, fields, _callback);
        }


        /**
         * Execute getBoardByIdLabel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardByIdLabelWithHttpInfo(idLabel, fields);
        }

        /**
         * Execute getBoardByIdLabel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardByIdLabelWithHttpInfo(idLabel, fields);
        }

        /**
         * Execute getBoardByIdLabel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardByIdLabelAsync(idLabel, fields, _callback);
        }
    }

    /**
     * getLabelsBoardByIdLabel()
     * 
     * @param idLabel idLabel (required)
     * @return GetBoardByIdLabelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardByIdLabelRequestBuilder getBoardByIdLabel(String idLabel) throws IllegalArgumentException {
        if (idLabel == null) throw new IllegalArgumentException("\"idLabel\" is required but got null");
            

        return new GetBoardByIdLabelRequestBuilder(idLabel);
    }
    private okhttp3.Call getBoardByIdLabelByFieldCall(String idLabel, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/labels/{idLabel}/board/{field}"
            .replace("{" + "idLabel" + "}", localVarApiClient.escapeString(idLabel.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardByIdLabelByFieldValidateBeforeCall(String idLabel, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idLabel' is set
        if (idLabel == null) {
            throw new ApiException("Missing the required parameter 'idLabel' when calling getBoardByIdLabelByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getBoardByIdLabelByField(Async)");
        }

        return getBoardByIdLabelByFieldCall(idLabel, field, _callback);

    }


    private ApiResponse<Void> getBoardByIdLabelByFieldWithHttpInfo(String idLabel, String field) throws ApiException {
        okhttp3.Call localVarCall = getBoardByIdLabelByFieldValidateBeforeCall(idLabel, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardByIdLabelByFieldAsync(String idLabel, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardByIdLabelByFieldValidateBeforeCall(idLabel, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardByIdLabelByFieldRequestBuilder {
        private final String idLabel;
        private final String field;

        private GetBoardByIdLabelByFieldRequestBuilder(String idLabel, String field) {
            this.idLabel = idLabel;
            this.field = field;
        }

        /**
         * Build call for getBoardByIdLabelByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardByIdLabelByFieldCall(idLabel, field, _callback);
        }


        /**
         * Execute getBoardByIdLabelByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardByIdLabelByFieldWithHttpInfo(idLabel, field);
        }

        /**
         * Execute getBoardByIdLabelByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardByIdLabelByFieldWithHttpInfo(idLabel, field);
        }

        /**
         * Execute getBoardByIdLabelByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardByIdLabelByFieldAsync(idLabel, field, _callback);
        }
    }

    /**
     * getLabelsBoardByIdLabelByField()
     * 
     * @param idLabel idLabel (required)
     * @param field field (required)
     * @return GetBoardByIdLabelByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardByIdLabelByFieldRequestBuilder getBoardByIdLabelByField(String idLabel, String field) throws IllegalArgumentException {
        if (idLabel == null) throw new IllegalArgumentException("\"idLabel\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetBoardByIdLabelByFieldRequestBuilder(idLabel, field);
    }
    private okhttp3.Call getByIdLabelCall(String idLabel, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/labels/{idLabel}"
            .replace("{" + "idLabel" + "}", localVarApiClient.escapeString(idLabel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdLabelValidateBeforeCall(String idLabel, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idLabel' is set
        if (idLabel == null) {
            throw new ApiException("Missing the required parameter 'idLabel' when calling getByIdLabel(Async)");
        }

        return getByIdLabelCall(idLabel, fields, _callback);

    }


    private ApiResponse<Void> getByIdLabelWithHttpInfo(String idLabel, String fields) throws ApiException {
        okhttp3.Call localVarCall = getByIdLabelValidateBeforeCall(idLabel, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdLabelAsync(String idLabel, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdLabelValidateBeforeCall(idLabel, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdLabelRequestBuilder {
        private final String idLabel;
        private String fields;

        private GetByIdLabelRequestBuilder(String idLabel) {
            this.idLabel = idLabel;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
         * @return GetByIdLabelRequestBuilder
         */
        public GetByIdLabelRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getByIdLabel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdLabelCall(idLabel, fields, _callback);
        }


        /**
         * Execute getByIdLabel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdLabelWithHttpInfo(idLabel, fields);
        }

        /**
         * Execute getByIdLabel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdLabelWithHttpInfo(idLabel, fields);
        }

        /**
         * Execute getByIdLabel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdLabelAsync(idLabel, fields, _callback);
        }
    }

    /**
     * getLabelsByIdLabel()
     * 
     * @param idLabel idLabel (required)
     * @return GetByIdLabelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdLabelRequestBuilder getByIdLabel(String idLabel) throws IllegalArgumentException {
        if (idLabel == null) throw new IllegalArgumentException("\"idLabel\" is required but got null");
            

        return new GetByIdLabelRequestBuilder(idLabel);
    }
    private okhttp3.Call removeByIdLabelCall(String idLabel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/labels/{idLabel}"
            .replace("{" + "idLabel" + "}", localVarApiClient.escapeString(idLabel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdLabelValidateBeforeCall(String idLabel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idLabel' is set
        if (idLabel == null) {
            throw new ApiException("Missing the required parameter 'idLabel' when calling removeByIdLabel(Async)");
        }

        return removeByIdLabelCall(idLabel, _callback);

    }


    private ApiResponse<Void> removeByIdLabelWithHttpInfo(String idLabel) throws ApiException {
        okhttp3.Call localVarCall = removeByIdLabelValidateBeforeCall(idLabel, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdLabelAsync(String idLabel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdLabelValidateBeforeCall(idLabel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdLabelRequestBuilder {
        private final String idLabel;

        private RemoveByIdLabelRequestBuilder(String idLabel) {
            this.idLabel = idLabel;
        }

        /**
         * Build call for removeByIdLabel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdLabelCall(idLabel, _callback);
        }


        /**
         * Execute removeByIdLabel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdLabelWithHttpInfo(idLabel);
        }

        /**
         * Execute removeByIdLabel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdLabelWithHttpInfo(idLabel);
        }

        /**
         * Execute removeByIdLabel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdLabelAsync(idLabel, _callback);
        }
    }

    /**
     * deleteLabelsByIdLabel()
     * 
     * @param idLabel idLabel (required)
     * @return RemoveByIdLabelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdLabelRequestBuilder removeByIdLabel(String idLabel) throws IllegalArgumentException {
        if (idLabel == null) throw new IllegalArgumentException("\"idLabel\" is required but got null");
            

        return new RemoveByIdLabelRequestBuilder(idLabel);
    }
    private okhttp3.Call updateByIdLabelCall(String idLabel, Labels labels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labels;

        // create path and map variables
        String localVarPath = "/labels/{idLabel}"
            .replace("{" + "idLabel" + "}", localVarApiClient.escapeString(idLabel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdLabelValidateBeforeCall(String idLabel, Labels labels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idLabel' is set
        if (idLabel == null) {
            throw new ApiException("Missing the required parameter 'idLabel' when calling updateByIdLabel(Async)");
        }

        // verify the required parameter 'labels' is set
        if (labels == null) {
            throw new ApiException("Missing the required parameter 'labels' when calling updateByIdLabel(Async)");
        }

        return updateByIdLabelCall(idLabel, labels, _callback);

    }


    private ApiResponse<Void> updateByIdLabelWithHttpInfo(String idLabel, Labels labels) throws ApiException {
        okhttp3.Call localVarCall = updateByIdLabelValidateBeforeCall(idLabel, labels, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdLabelAsync(String idLabel, Labels labels, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdLabelValidateBeforeCall(idLabel, labels, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdLabelRequestBuilder {
        private final String idLabel;
        private String color;
        private String idBoard;
        private String name;

        private UpdateByIdLabelRequestBuilder(String idLabel) {
            this.idLabel = idLabel;
        }

        /**
         * Set color
         * @param color A valid label color or null (optional)
         * @return UpdateByIdLabelRequestBuilder
         */
        public UpdateByIdLabelRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set idBoard
         * @param idBoard An id (optional)
         * @return UpdateByIdLabelRequestBuilder
         */
        public UpdateByIdLabelRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdLabelRequestBuilder
         */
        public UpdateByIdLabelRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateByIdLabel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Labels labels = buildBodyParams();
            return updateByIdLabelCall(idLabel, labels, _callback);
        }

        private Labels buildBodyParams() {
            Labels labels = new Labels();
            labels.color(this.color);
            labels.idBoard(this.idBoard);
            labels.name(this.name);
            return labels;
        }

        /**
         * Execute updateByIdLabel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Labels labels = buildBodyParams();
            updateByIdLabelWithHttpInfo(idLabel, labels);
        }

        /**
         * Execute updateByIdLabel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Labels labels = buildBodyParams();
            return updateByIdLabelWithHttpInfo(idLabel, labels);
        }

        /**
         * Execute updateByIdLabel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Labels labels = buildBodyParams();
            return updateByIdLabelAsync(idLabel, labels, _callback);
        }
    }

    /**
     * updateLabelsByIdLabel()
     * 
     * @param idLabel idLabel (required)
     * @param labels Attributes of \&quot;Labels\&quot; to be updated. (required)
     * @return UpdateByIdLabelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdLabelRequestBuilder updateByIdLabel(String idLabel) throws IllegalArgumentException {
        if (idLabel == null) throw new IllegalArgumentException("\"idLabel\" is required but got null");
            

        return new UpdateByIdLabelRequestBuilder(idLabel);
    }
    private okhttp3.Call updateColorByIdLabelCall(String idLabel, LabelsColor labelsColor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelsColor;

        // create path and map variables
        String localVarPath = "/labels/{idLabel}/color"
            .replace("{" + "idLabel" + "}", localVarApiClient.escapeString(idLabel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateColorByIdLabelValidateBeforeCall(String idLabel, LabelsColor labelsColor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idLabel' is set
        if (idLabel == null) {
            throw new ApiException("Missing the required parameter 'idLabel' when calling updateColorByIdLabel(Async)");
        }

        // verify the required parameter 'labelsColor' is set
        if (labelsColor == null) {
            throw new ApiException("Missing the required parameter 'labelsColor' when calling updateColorByIdLabel(Async)");
        }

        return updateColorByIdLabelCall(idLabel, labelsColor, _callback);

    }


    private ApiResponse<Void> updateColorByIdLabelWithHttpInfo(String idLabel, LabelsColor labelsColor) throws ApiException {
        okhttp3.Call localVarCall = updateColorByIdLabelValidateBeforeCall(idLabel, labelsColor, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateColorByIdLabelAsync(String idLabel, LabelsColor labelsColor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateColorByIdLabelValidateBeforeCall(idLabel, labelsColor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateColorByIdLabelRequestBuilder {
        private final String idLabel;
        private String value;

        private UpdateColorByIdLabelRequestBuilder(String idLabel) {
            this.idLabel = idLabel;
        }

        /**
         * Set value
         * @param value A valid label color or null (optional)
         * @return UpdateColorByIdLabelRequestBuilder
         */
        public UpdateColorByIdLabelRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateColorByIdLabel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LabelsColor labelsColor = buildBodyParams();
            return updateColorByIdLabelCall(idLabel, labelsColor, _callback);
        }

        private LabelsColor buildBodyParams() {
            LabelsColor labelsColor = new LabelsColor();
            labelsColor.value(this.value);
            return labelsColor;
        }

        /**
         * Execute updateColorByIdLabel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LabelsColor labelsColor = buildBodyParams();
            updateColorByIdLabelWithHttpInfo(idLabel, labelsColor);
        }

        /**
         * Execute updateColorByIdLabel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LabelsColor labelsColor = buildBodyParams();
            return updateColorByIdLabelWithHttpInfo(idLabel, labelsColor);
        }

        /**
         * Execute updateColorByIdLabel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LabelsColor labelsColor = buildBodyParams();
            return updateColorByIdLabelAsync(idLabel, labelsColor, _callback);
        }
    }

    /**
     * updateLabelsColorByIdLabel()
     * 
     * @param idLabel idLabel (required)
     * @param labelsColor Attributes of \&quot;Labels Color\&quot; to be updated. (required)
     * @return UpdateColorByIdLabelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateColorByIdLabelRequestBuilder updateColorByIdLabel(String idLabel) throws IllegalArgumentException {
        if (idLabel == null) throw new IllegalArgumentException("\"idLabel\" is required but got null");
            

        return new UpdateColorByIdLabelRequestBuilder(idLabel);
    }
    private okhttp3.Call updateNameByIdLabelCall(String idLabel, LabelsName labelsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelsName;

        // create path and map variables
        String localVarPath = "/labels/{idLabel}/name"
            .replace("{" + "idLabel" + "}", localVarApiClient.escapeString(idLabel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNameByIdLabelValidateBeforeCall(String idLabel, LabelsName labelsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idLabel' is set
        if (idLabel == null) {
            throw new ApiException("Missing the required parameter 'idLabel' when calling updateNameByIdLabel(Async)");
        }

        // verify the required parameter 'labelsName' is set
        if (labelsName == null) {
            throw new ApiException("Missing the required parameter 'labelsName' when calling updateNameByIdLabel(Async)");
        }

        return updateNameByIdLabelCall(idLabel, labelsName, _callback);

    }


    private ApiResponse<Void> updateNameByIdLabelWithHttpInfo(String idLabel, LabelsName labelsName) throws ApiException {
        okhttp3.Call localVarCall = updateNameByIdLabelValidateBeforeCall(idLabel, labelsName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateNameByIdLabelAsync(String idLabel, LabelsName labelsName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNameByIdLabelValidateBeforeCall(idLabel, labelsName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateNameByIdLabelRequestBuilder {
        private final String idLabel;
        private String value;

        private UpdateNameByIdLabelRequestBuilder(String idLabel) {
            this.idLabel = idLabel;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateNameByIdLabelRequestBuilder
         */
        public UpdateNameByIdLabelRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateNameByIdLabel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LabelsName labelsName = buildBodyParams();
            return updateNameByIdLabelCall(idLabel, labelsName, _callback);
        }

        private LabelsName buildBodyParams() {
            LabelsName labelsName = new LabelsName();
            labelsName.value(this.value);
            return labelsName;
        }

        /**
         * Execute updateNameByIdLabel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LabelsName labelsName = buildBodyParams();
            updateNameByIdLabelWithHttpInfo(idLabel, labelsName);
        }

        /**
         * Execute updateNameByIdLabel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LabelsName labelsName = buildBodyParams();
            return updateNameByIdLabelWithHttpInfo(idLabel, labelsName);
        }

        /**
         * Execute updateNameByIdLabel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LabelsName labelsName = buildBodyParams();
            return updateNameByIdLabelAsync(idLabel, labelsName, _callback);
        }
    }

    /**
     * updateLabelsNameByIdLabel()
     * 
     * @param idLabel idLabel (required)
     * @param labelsName Attributes of \&quot;Labels Name\&quot; to be updated. (required)
     * @return UpdateNameByIdLabelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateNameByIdLabelRequestBuilder updateNameByIdLabel(String idLabel) throws IllegalArgumentException {
        if (idLabel == null) throw new IllegalArgumentException("\"idLabel\" is required but got null");
            

        return new UpdateNameByIdLabelRequestBuilder(idLabel);
    }
}
