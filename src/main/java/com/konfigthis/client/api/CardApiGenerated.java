/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ActionsComments;
import com.konfigthis.client.model.Cards;
import com.konfigthis.client.model.CardsActionsComments;
import com.konfigthis.client.model.CardsAttachments;
import com.konfigthis.client.model.CardsChecklistCheckItem;
import com.konfigthis.client.model.CardsChecklistCheckItemName;
import com.konfigthis.client.model.CardsChecklistCheckItemPos;
import com.konfigthis.client.model.CardsChecklistCheckItemState;
import com.konfigthis.client.model.CardsChecklistIdChecklistCurrentCheckItem;
import com.konfigthis.client.model.CardsChecklists;
import com.konfigthis.client.model.CardsClosed;
import com.konfigthis.client.model.CardsDesc;
import com.konfigthis.client.model.CardsDue;
import com.konfigthis.client.model.CardsIdAttachmentCover;
import com.konfigthis.client.model.CardsIdBoard;
import com.konfigthis.client.model.CardsIdLabels;
import com.konfigthis.client.model.CardsIdList;
import com.konfigthis.client.model.CardsIdMembers;
import com.konfigthis.client.model.CardsLabels;
import com.konfigthis.client.model.CardsMembersVoted;
import com.konfigthis.client.model.CardsName;
import com.konfigthis.client.model.CardsPos;
import com.konfigthis.client.model.CardsStickers;
import com.konfigthis.client.model.CardsSubscribed;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CardApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CardApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addActionsCommentsByIdCardCall(String idCard, ActionsComments actionsComments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsComments;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/actions/comments"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addActionsCommentsByIdCardValidateBeforeCall(String idCard, ActionsComments actionsComments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addActionsCommentsByIdCard(Async)");
        }

        // verify the required parameter 'actionsComments' is set
        if (actionsComments == null) {
            throw new ApiException("Missing the required parameter 'actionsComments' when calling addActionsCommentsByIdCard(Async)");
        }

        return addActionsCommentsByIdCardCall(idCard, actionsComments, _callback);

    }


    private ApiResponse<Void> addActionsCommentsByIdCardWithHttpInfo(String idCard, ActionsComments actionsComments) throws ApiException {
        okhttp3.Call localVarCall = addActionsCommentsByIdCardValidateBeforeCall(idCard, actionsComments, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addActionsCommentsByIdCardAsync(String idCard, ActionsComments actionsComments, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addActionsCommentsByIdCardValidateBeforeCall(idCard, actionsComments, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddActionsCommentsByIdCardRequestBuilder {
        private final String idCard;
        private String text;

        private AddActionsCommentsByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set text
         * @param text a string with a length from 1 to 16384 (optional)
         * @return AddActionsCommentsByIdCardRequestBuilder
         */
        public AddActionsCommentsByIdCardRequestBuilder text(String text) {
            this.text = text;
            return this;
        }
        
        /**
         * Build call for addActionsCommentsByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ActionsComments actionsComments = buildBodyParams();
            return addActionsCommentsByIdCardCall(idCard, actionsComments, _callback);
        }

        private ActionsComments buildBodyParams() {
            ActionsComments actionsComments = new ActionsComments();
            actionsComments.text(this.text);
            return actionsComments;
        }

        /**
         * Execute addActionsCommentsByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ActionsComments actionsComments = buildBodyParams();
            addActionsCommentsByIdCardWithHttpInfo(idCard, actionsComments);
        }

        /**
         * Execute addActionsCommentsByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ActionsComments actionsComments = buildBodyParams();
            return addActionsCommentsByIdCardWithHttpInfo(idCard, actionsComments);
        }

        /**
         * Execute addActionsCommentsByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ActionsComments actionsComments = buildBodyParams();
            return addActionsCommentsByIdCardAsync(idCard, actionsComments, _callback);
        }
    }

    /**
     * addCardsActionsCommentsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param actionsComments Attributes of \&quot;Actions Comments\&quot; to be added. (required)
     * @return AddActionsCommentsByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddActionsCommentsByIdCardRequestBuilder addActionsCommentsByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new AddActionsCommentsByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call addAttachmentsByIdCardCall(String idCard, CardsAttachments cardsAttachments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsAttachments;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/attachments"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAttachmentsByIdCardValidateBeforeCall(String idCard, CardsAttachments cardsAttachments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addAttachmentsByIdCard(Async)");
        }

        // verify the required parameter 'cardsAttachments' is set
        if (cardsAttachments == null) {
            throw new ApiException("Missing the required parameter 'cardsAttachments' when calling addAttachmentsByIdCard(Async)");
        }

        return addAttachmentsByIdCardCall(idCard, cardsAttachments, _callback);

    }


    private ApiResponse<Void> addAttachmentsByIdCardWithHttpInfo(String idCard, CardsAttachments cardsAttachments) throws ApiException {
        okhttp3.Call localVarCall = addAttachmentsByIdCardValidateBeforeCall(idCard, cardsAttachments, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addAttachmentsByIdCardAsync(String idCard, CardsAttachments cardsAttachments, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAttachmentsByIdCardValidateBeforeCall(idCard, cardsAttachments, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddAttachmentsByIdCardRequestBuilder {
        private final String idCard;
        private String _file;
        private String mimeType;
        private String name;
        private String url;

        private AddAttachmentsByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set _file
         * @param _file A file (optional)
         * @return AddAttachmentsByIdCardRequestBuilder
         */
        public AddAttachmentsByIdCardRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set mimeType
         * @param mimeType a string with a length from 0 to 256 (optional)
         * @return AddAttachmentsByIdCardRequestBuilder
         */
        public AddAttachmentsByIdCardRequestBuilder mimeType(String mimeType) {
            this.mimeType = mimeType;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 0 to 256 (optional)
         * @return AddAttachmentsByIdCardRequestBuilder
         */
        public AddAttachmentsByIdCardRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set url
         * @param url A URL starting with http:// or https:// or null (optional)
         * @return AddAttachmentsByIdCardRequestBuilder
         */
        public AddAttachmentsByIdCardRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Build call for addAttachmentsByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsAttachments cardsAttachments = buildBodyParams();
            return addAttachmentsByIdCardCall(idCard, cardsAttachments, _callback);
        }

        private CardsAttachments buildBodyParams() {
            CardsAttachments cardsAttachments = new CardsAttachments();
            cardsAttachments._file(this._file);
            cardsAttachments.mimeType(this.mimeType);
            cardsAttachments.name(this.name);
            cardsAttachments.url(this.url);
            return cardsAttachments;
        }

        /**
         * Execute addAttachmentsByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsAttachments cardsAttachments = buildBodyParams();
            addAttachmentsByIdCardWithHttpInfo(idCard, cardsAttachments);
        }

        /**
         * Execute addAttachmentsByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsAttachments cardsAttachments = buildBodyParams();
            return addAttachmentsByIdCardWithHttpInfo(idCard, cardsAttachments);
        }

        /**
         * Execute addAttachmentsByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsAttachments cardsAttachments = buildBodyParams();
            return addAttachmentsByIdCardAsync(idCard, cardsAttachments, _callback);
        }
    }

    /**
     * addCardsAttachmentsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsAttachments Attributes of \&quot;Cards Attachments\&quot; to be added. (required)
     * @return AddAttachmentsByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddAttachmentsByIdCardRequestBuilder addAttachmentsByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new AddAttachmentsByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call addChecklistCheckItemCall(String idCard, String idChecklist, CardsChecklistCheckItem cardsChecklistCheckItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsChecklistCheckItem;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklist}/checkItem"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChecklistCheckItemValidateBeforeCall(String idCard, String idChecklist, CardsChecklistCheckItem cardsChecklistCheckItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addChecklistCheckItem(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling addChecklistCheckItem(Async)");
        }

        // verify the required parameter 'cardsChecklistCheckItem' is set
        if (cardsChecklistCheckItem == null) {
            throw new ApiException("Missing the required parameter 'cardsChecklistCheckItem' when calling addChecklistCheckItem(Async)");
        }

        return addChecklistCheckItemCall(idCard, idChecklist, cardsChecklistCheckItem, _callback);

    }


    private ApiResponse<Void> addChecklistCheckItemWithHttpInfo(String idCard, String idChecklist, CardsChecklistCheckItem cardsChecklistCheckItem) throws ApiException {
        okhttp3.Call localVarCall = addChecklistCheckItemValidateBeforeCall(idCard, idChecklist, cardsChecklistCheckItem, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addChecklistCheckItemAsync(String idCard, String idChecklist, CardsChecklistCheckItem cardsChecklistCheckItem, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChecklistCheckItemValidateBeforeCall(idCard, idChecklist, cardsChecklistCheckItem, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddChecklistCheckItemRequestBuilder {
        private final String idCard;
        private final String idChecklist;
        private String name;
        private String pos;

        private AddChecklistCheckItemRequestBuilder(String idCard, String idChecklist) {
            this.idCard = idCard;
            this.idChecklist = idChecklist;
        }

        /**
         * Set name
         * @param name a string with a length from 1 to 16384 (optional)
         * @return AddChecklistCheckItemRequestBuilder
         */
        public AddChecklistCheckItemRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return AddChecklistCheckItemRequestBuilder
         */
        public AddChecklistCheckItemRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Build call for addChecklistCheckItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsChecklistCheckItem cardsChecklistCheckItem = buildBodyParams();
            return addChecklistCheckItemCall(idCard, idChecklist, cardsChecklistCheckItem, _callback);
        }

        private CardsChecklistCheckItem buildBodyParams() {
            CardsChecklistCheckItem cardsChecklistCheckItem = new CardsChecklistCheckItem();
            cardsChecklistCheckItem.name(this.name);
            cardsChecklistCheckItem.pos(this.pos);
            return cardsChecklistCheckItem;
        }

        /**
         * Execute addChecklistCheckItem request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsChecklistCheckItem cardsChecklistCheckItem = buildBodyParams();
            addChecklistCheckItemWithHttpInfo(idCard, idChecklist, cardsChecklistCheckItem);
        }

        /**
         * Execute addChecklistCheckItem request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsChecklistCheckItem cardsChecklistCheckItem = buildBodyParams();
            return addChecklistCheckItemWithHttpInfo(idCard, idChecklist, cardsChecklistCheckItem);
        }

        /**
         * Execute addChecklistCheckItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsChecklistCheckItem cardsChecklistCheckItem = buildBodyParams();
            return addChecklistCheckItemAsync(idCard, idChecklist, cardsChecklistCheckItem, _callback);
        }
    }

    /**
     * addCardsChecklistCheckItemByIdCardByIdChecklist()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param cardsChecklistCheckItem Attributes of \&quot;Cards Checklist Check Item\&quot; to be added. (required)
     * @return AddChecklistCheckItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddChecklistCheckItemRequestBuilder addChecklistCheckItem(String idCard, String idChecklist) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        return new AddChecklistCheckItemRequestBuilder(idCard, idChecklist);
    }
    private okhttp3.Call addChecklistsCall(String idCard, CardsChecklists cardsChecklists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsChecklists;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklists"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChecklistsValidateBeforeCall(String idCard, CardsChecklists cardsChecklists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addChecklists(Async)");
        }

        // verify the required parameter 'cardsChecklists' is set
        if (cardsChecklists == null) {
            throw new ApiException("Missing the required parameter 'cardsChecklists' when calling addChecklists(Async)");
        }

        return addChecklistsCall(idCard, cardsChecklists, _callback);

    }


    private ApiResponse<Void> addChecklistsWithHttpInfo(String idCard, CardsChecklists cardsChecklists) throws ApiException {
        okhttp3.Call localVarCall = addChecklistsValidateBeforeCall(idCard, cardsChecklists, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addChecklistsAsync(String idCard, CardsChecklists cardsChecklists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChecklistsValidateBeforeCall(idCard, cardsChecklists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddChecklistsRequestBuilder {
        private final String idCard;
        private String idChecklistSource;
        private String name;
        private String value;

        private AddChecklistsRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set idChecklistSource
         * @param idChecklistSource The id of the source checklist to copy into a new checklist. (optional)
         * @return AddChecklistsRequestBuilder
         */
        public AddChecklistsRequestBuilder idChecklistSource(String idChecklistSource) {
            this.idChecklistSource = idChecklistSource;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 0 to 16384 (optional)
         * @return AddChecklistsRequestBuilder
         */
        public AddChecklistsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set value
         * @param value The id of the checklist to add to the card, or null to create a new one. (optional)
         * @return AddChecklistsRequestBuilder
         */
        public AddChecklistsRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for addChecklists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsChecklists cardsChecklists = buildBodyParams();
            return addChecklistsCall(idCard, cardsChecklists, _callback);
        }

        private CardsChecklists buildBodyParams() {
            CardsChecklists cardsChecklists = new CardsChecklists();
            cardsChecklists.idChecklistSource(this.idChecklistSource);
            cardsChecklists.name(this.name);
            cardsChecklists.value(this.value);
            return cardsChecklists;
        }

        /**
         * Execute addChecklists request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsChecklists cardsChecklists = buildBodyParams();
            addChecklistsWithHttpInfo(idCard, cardsChecklists);
        }

        /**
         * Execute addChecklists request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsChecklists cardsChecklists = buildBodyParams();
            return addChecklistsWithHttpInfo(idCard, cardsChecklists);
        }

        /**
         * Execute addChecklists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsChecklists cardsChecklists = buildBodyParams();
            return addChecklistsAsync(idCard, cardsChecklists, _callback);
        }
    }

    /**
     * addCardsChecklistsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsChecklists Attributes of \&quot;Cards Checklists\&quot; to be added. (required)
     * @return AddChecklistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddChecklistsRequestBuilder addChecklists(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new AddChecklistsRequestBuilder(idCard);
    }
    private okhttp3.Call addIdLabelsToCardCall(String idCard, CardsIdLabels cardsIdLabels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsIdLabels;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idLabels"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addIdLabelsToCardValidateBeforeCall(String idCard, CardsIdLabels cardsIdLabels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addIdLabelsToCard(Async)");
        }

        // verify the required parameter 'cardsIdLabels' is set
        if (cardsIdLabels == null) {
            throw new ApiException("Missing the required parameter 'cardsIdLabels' when calling addIdLabelsToCard(Async)");
        }

        return addIdLabelsToCardCall(idCard, cardsIdLabels, _callback);

    }


    private ApiResponse<Void> addIdLabelsToCardWithHttpInfo(String idCard, CardsIdLabels cardsIdLabels) throws ApiException {
        okhttp3.Call localVarCall = addIdLabelsToCardValidateBeforeCall(idCard, cardsIdLabels, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addIdLabelsToCardAsync(String idCard, CardsIdLabels cardsIdLabels, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addIdLabelsToCardValidateBeforeCall(idCard, cardsIdLabels, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddIdLabelsToCardRequestBuilder {
        private final String idCard;
        private String value;

        private AddIdLabelsToCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set value
         * @param value The id of the label to add (optional)
         * @return AddIdLabelsToCardRequestBuilder
         */
        public AddIdLabelsToCardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for addIdLabelsToCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsIdLabels cardsIdLabels = buildBodyParams();
            return addIdLabelsToCardCall(idCard, cardsIdLabels, _callback);
        }

        private CardsIdLabels buildBodyParams() {
            CardsIdLabels cardsIdLabels = new CardsIdLabels();
            cardsIdLabels.value(this.value);
            return cardsIdLabels;
        }

        /**
         * Execute addIdLabelsToCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsIdLabels cardsIdLabels = buildBodyParams();
            addIdLabelsToCardWithHttpInfo(idCard, cardsIdLabels);
        }

        /**
         * Execute addIdLabelsToCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsIdLabels cardsIdLabels = buildBodyParams();
            return addIdLabelsToCardWithHttpInfo(idCard, cardsIdLabels);
        }

        /**
         * Execute addIdLabelsToCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsIdLabels cardsIdLabels = buildBodyParams();
            return addIdLabelsToCardAsync(idCard, cardsIdLabels, _callback);
        }
    }

    /**
     * addCardsIdLabelsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsIdLabels Attributes of \&quot;Cards Id Labels\&quot; to be added. (required)
     * @return AddIdLabelsToCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddIdLabelsToCardRequestBuilder addIdLabelsToCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new AddIdLabelsToCardRequestBuilder(idCard);
    }
    private okhttp3.Call addLabelsCall(String idCard, CardsLabels cardsLabels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsLabels;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/labels"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLabelsValidateBeforeCall(String idCard, CardsLabels cardsLabels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addLabels(Async)");
        }

        // verify the required parameter 'cardsLabels' is set
        if (cardsLabels == null) {
            throw new ApiException("Missing the required parameter 'cardsLabels' when calling addLabels(Async)");
        }

        return addLabelsCall(idCard, cardsLabels, _callback);

    }


    private ApiResponse<Void> addLabelsWithHttpInfo(String idCard, CardsLabels cardsLabels) throws ApiException {
        okhttp3.Call localVarCall = addLabelsValidateBeforeCall(idCard, cardsLabels, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addLabelsAsync(String idCard, CardsLabels cardsLabels, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLabelsValidateBeforeCall(idCard, cardsLabels, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddLabelsRequestBuilder {
        private final String idCard;
        private String color;
        private String name;
        private String value;

        private AddLabelsRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set color
         * @param color A valid label color or null (optional)
         * @return AddLabelsRequestBuilder
         */
        public AddLabelsRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 0 to 16384 (optional)
         * @return AddLabelsRequestBuilder
         */
        public AddLabelsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set value
         * @param value all or a comma-separated list of: blue, green, orange, purple, red or yellow (optional)
         * @return AddLabelsRequestBuilder
         */
        public AddLabelsRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for addLabels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsLabels cardsLabels = buildBodyParams();
            return addLabelsCall(idCard, cardsLabels, _callback);
        }

        private CardsLabels buildBodyParams() {
            CardsLabels cardsLabels = new CardsLabels();
            cardsLabels.color(this.color);
            cardsLabels.name(this.name);
            cardsLabels.value(this.value);
            return cardsLabels;
        }

        /**
         * Execute addLabels request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsLabels cardsLabels = buildBodyParams();
            addLabelsWithHttpInfo(idCard, cardsLabels);
        }

        /**
         * Execute addLabels request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsLabels cardsLabels = buildBodyParams();
            return addLabelsWithHttpInfo(idCard, cardsLabels);
        }

        /**
         * Execute addLabels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsLabels cardsLabels = buildBodyParams();
            return addLabelsAsync(idCard, cardsLabels, _callback);
        }
    }

    /**
     * addCardsLabelsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsLabels Attributes of \&quot;Cards Labels\&quot; to be added. (required)
     * @return AddLabelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddLabelsRequestBuilder addLabels(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new AddLabelsRequestBuilder(idCard);
    }
    private okhttp3.Call addMembersCall(String idCard, CardsIdMembers cardsIdMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsIdMembers;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idMembers"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersValidateBeforeCall(String idCard, CardsIdMembers cardsIdMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addMembers(Async)");
        }

        // verify the required parameter 'cardsIdMembers' is set
        if (cardsIdMembers == null) {
            throw new ApiException("Missing the required parameter 'cardsIdMembers' when calling addMembers(Async)");
        }

        return addMembersCall(idCard, cardsIdMembers, _callback);

    }


    private ApiResponse<Void> addMembersWithHttpInfo(String idCard, CardsIdMembers cardsIdMembers) throws ApiException {
        okhttp3.Call localVarCall = addMembersValidateBeforeCall(idCard, cardsIdMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addMembersAsync(String idCard, CardsIdMembers cardsIdMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersValidateBeforeCall(idCard, cardsIdMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddMembersRequestBuilder {
        private final String idCard;
        private String value;

        private AddMembersRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set value
         * @param value The id of the member to add to the card (optional)
         * @return AddMembersRequestBuilder
         */
        public AddMembersRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for addMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsIdMembers cardsIdMembers = buildBodyParams();
            return addMembersCall(idCard, cardsIdMembers, _callback);
        }

        private CardsIdMembers buildBodyParams() {
            CardsIdMembers cardsIdMembers = new CardsIdMembers();
            cardsIdMembers.value(this.value);
            return cardsIdMembers;
        }

        /**
         * Execute addMembers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsIdMembers cardsIdMembers = buildBodyParams();
            addMembersWithHttpInfo(idCard, cardsIdMembers);
        }

        /**
         * Execute addMembers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsIdMembers cardsIdMembers = buildBodyParams();
            return addMembersWithHttpInfo(idCard, cardsIdMembers);
        }

        /**
         * Execute addMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsIdMembers cardsIdMembers = buildBodyParams();
            return addMembersAsync(idCard, cardsIdMembers, _callback);
        }
    }

    /**
     * addCardsIdMembersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsIdMembers Attributes of \&quot;Cards Id Members\&quot; to be added. (required)
     * @return AddMembersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddMembersRequestBuilder addMembers(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new AddMembersRequestBuilder(idCard);
    }
    private okhttp3.Call addMembersVotedCall(String idCard, CardsMembersVoted cardsMembersVoted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsMembersVoted;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/membersVoted"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersVotedValidateBeforeCall(String idCard, CardsMembersVoted cardsMembersVoted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addMembersVoted(Async)");
        }

        // verify the required parameter 'cardsMembersVoted' is set
        if (cardsMembersVoted == null) {
            throw new ApiException("Missing the required parameter 'cardsMembersVoted' when calling addMembersVoted(Async)");
        }

        return addMembersVotedCall(idCard, cardsMembersVoted, _callback);

    }


    private ApiResponse<Void> addMembersVotedWithHttpInfo(String idCard, CardsMembersVoted cardsMembersVoted) throws ApiException {
        okhttp3.Call localVarCall = addMembersVotedValidateBeforeCall(idCard, cardsMembersVoted, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addMembersVotedAsync(String idCard, CardsMembersVoted cardsMembersVoted, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersVotedValidateBeforeCall(idCard, cardsMembersVoted, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddMembersVotedRequestBuilder {
        private final String idCard;
        private String value;

        private AddMembersVotedRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set value
         * @param value The id of the member to vote &amp;#39;yes&amp;#39; on the card (optional)
         * @return AddMembersVotedRequestBuilder
         */
        public AddMembersVotedRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for addMembersVoted
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsMembersVoted cardsMembersVoted = buildBodyParams();
            return addMembersVotedCall(idCard, cardsMembersVoted, _callback);
        }

        private CardsMembersVoted buildBodyParams() {
            CardsMembersVoted cardsMembersVoted = new CardsMembersVoted();
            cardsMembersVoted.value(this.value);
            return cardsMembersVoted;
        }

        /**
         * Execute addMembersVoted request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsMembersVoted cardsMembersVoted = buildBodyParams();
            addMembersVotedWithHttpInfo(idCard, cardsMembersVoted);
        }

        /**
         * Execute addMembersVoted request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsMembersVoted cardsMembersVoted = buildBodyParams();
            return addMembersVotedWithHttpInfo(idCard, cardsMembersVoted);
        }

        /**
         * Execute addMembersVoted request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsMembersVoted cardsMembersVoted = buildBodyParams();
            return addMembersVotedAsync(idCard, cardsMembersVoted, _callback);
        }
    }

    /**
     * addCardsMembersVotedByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsMembersVoted Attributes of \&quot;Cards Members Voted\&quot; to be added. (required)
     * @return AddMembersVotedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddMembersVotedRequestBuilder addMembersVoted(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new AddMembersVotedRequestBuilder(idCard);
    }
    private okhttp3.Call addStickersByIdCardCall(String idCard, CardsStickers cardsStickers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsStickers;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/stickers"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addStickersByIdCardValidateBeforeCall(String idCard, CardsStickers cardsStickers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addStickersByIdCard(Async)");
        }

        // verify the required parameter 'cardsStickers' is set
        if (cardsStickers == null) {
            throw new ApiException("Missing the required parameter 'cardsStickers' when calling addStickersByIdCard(Async)");
        }

        return addStickersByIdCardCall(idCard, cardsStickers, _callback);

    }


    private ApiResponse<Void> addStickersByIdCardWithHttpInfo(String idCard, CardsStickers cardsStickers) throws ApiException {
        okhttp3.Call localVarCall = addStickersByIdCardValidateBeforeCall(idCard, cardsStickers, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addStickersByIdCardAsync(String idCard, CardsStickers cardsStickers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addStickersByIdCardValidateBeforeCall(idCard, cardsStickers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddStickersByIdCardRequestBuilder {
        private final String idCard;
        private String image;
        private String left;
        private String rotate;
        private String top;
        private String zIndex;

        private AddStickersByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set image
         * @param image a string with a length from 0 to 16384 (optional)
         * @return AddStickersByIdCardRequestBuilder
         */
        public AddStickersByIdCardRequestBuilder image(String image) {
            this.image = image;
            return this;
        }
        
        /**
         * Set left
         * @param left undefined (optional)
         * @return AddStickersByIdCardRequestBuilder
         */
        public AddStickersByIdCardRequestBuilder left(String left) {
            this.left = left;
            return this;
        }
        
        /**
         * Set rotate
         * @param rotate undefined (optional)
         * @return AddStickersByIdCardRequestBuilder
         */
        public AddStickersByIdCardRequestBuilder rotate(String rotate) {
            this.rotate = rotate;
            return this;
        }
        
        /**
         * Set top
         * @param top undefined (optional)
         * @return AddStickersByIdCardRequestBuilder
         */
        public AddStickersByIdCardRequestBuilder top(String top) {
            this.top = top;
            return this;
        }
        
        /**
         * Set zIndex
         * @param zIndex Valid Z values for stickers, must be an integer (optional)
         * @return AddStickersByIdCardRequestBuilder
         */
        public AddStickersByIdCardRequestBuilder zIndex(String zIndex) {
            this.zIndex = zIndex;
            return this;
        }
        
        /**
         * Build call for addStickersByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsStickers cardsStickers = buildBodyParams();
            return addStickersByIdCardCall(idCard, cardsStickers, _callback);
        }

        private CardsStickers buildBodyParams() {
            CardsStickers cardsStickers = new CardsStickers();
            cardsStickers.image(this.image);
            cardsStickers.left(this.left);
            cardsStickers.rotate(this.rotate);
            cardsStickers.top(this.top);
            cardsStickers.zIndex(this.zIndex);
            return cardsStickers;
        }

        /**
         * Execute addStickersByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsStickers cardsStickers = buildBodyParams();
            addStickersByIdCardWithHttpInfo(idCard, cardsStickers);
        }

        /**
         * Execute addStickersByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsStickers cardsStickers = buildBodyParams();
            return addStickersByIdCardWithHttpInfo(idCard, cardsStickers);
        }

        /**
         * Execute addStickersByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsStickers cardsStickers = buildBodyParams();
            return addStickersByIdCardAsync(idCard, cardsStickers, _callback);
        }
    }

    /**
     * addCardsStickersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsStickers Attributes of \&quot;Cards Stickers\&quot; to be added. (required)
     * @return AddStickersByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddStickersByIdCardRequestBuilder addStickersByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new AddStickersByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call convertCheckItemToCardCall(String idCard, String idChecklist, String idCheckItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/convertToCard"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertCheckItemToCardValidateBeforeCall(String idCard, String idChecklist, String idCheckItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling convertCheckItemToCard(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling convertCheckItemToCard(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling convertCheckItemToCard(Async)");
        }

        return convertCheckItemToCardCall(idCard, idChecklist, idCheckItem, _callback);

    }


    private ApiResponse<Void> convertCheckItemToCardWithHttpInfo(String idCard, String idChecklist, String idCheckItem) throws ApiException {
        okhttp3.Call localVarCall = convertCheckItemToCardValidateBeforeCall(idCard, idChecklist, idCheckItem, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call convertCheckItemToCardAsync(String idCard, String idChecklist, String idCheckItem, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertCheckItemToCardValidateBeforeCall(idCard, idChecklist, idCheckItem, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ConvertCheckItemToCardRequestBuilder {
        private final String idCard;
        private final String idChecklist;
        private final String idCheckItem;

        private ConvertCheckItemToCardRequestBuilder(String idCard, String idChecklist, String idCheckItem) {
            this.idCard = idCard;
            this.idChecklist = idChecklist;
            this.idCheckItem = idCheckItem;
        }

        /**
         * Build call for convertCheckItemToCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return convertCheckItemToCardCall(idCard, idChecklist, idCheckItem, _callback);
        }


        /**
         * Execute convertCheckItemToCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            convertCheckItemToCardWithHttpInfo(idCard, idChecklist, idCheckItem);
        }

        /**
         * Execute convertCheckItemToCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return convertCheckItemToCardWithHttpInfo(idCard, idChecklist, idCheckItem);
        }

        /**
         * Execute convertCheckItemToCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return convertCheckItemToCardAsync(idCard, idChecklist, idCheckItem, _callback);
        }
    }

    /**
     * addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @return ConvertCheckItemToCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ConvertCheckItemToCardRequestBuilder convertCheckItemToCard(String idCard, String idChecklist, String idCheckItem) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        if (idCheckItem == null) throw new IllegalArgumentException("\"idCheckItem\" is required but got null");
            

        return new ConvertCheckItemToCardRequestBuilder(idCard, idChecklist, idCheckItem);
    }
    private okhttp3.Call createAndUpdateCall(Cards cards, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cards;

        // create path and map variables
        String localVarPath = "/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAndUpdateValidateBeforeCall(Cards cards, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cards' is set
        if (cards == null) {
            throw new ApiException("Missing the required parameter 'cards' when calling createAndUpdate(Async)");
        }

        return createAndUpdateCall(cards, _callback);

    }


    private ApiResponse<Void> createAndUpdateWithHttpInfo(Cards cards) throws ApiException {
        okhttp3.Call localVarCall = createAndUpdateValidateBeforeCall(cards, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createAndUpdateAsync(Cards cards, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAndUpdateValidateBeforeCall(cards, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateAndUpdateRequestBuilder {
        private String closed;
        private String desc;
        private String due;
        private String fileSource;
        private String idAttachmentCover;
        private String idBoard;
        private String idCardSource;
        private String idLabels;
        private String idList;
        private String idMembers;
        private String keepFromSource;
        private String labels;
        private String name;
        private String pos;
        private String subscribed;
        private String urlSource;

        private CreateAndUpdateRequestBuilder() {
        }

        /**
         * Set closed
         * @param closed  true or false (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder closed(String closed) {
            this.closed = closed;
            return this;
        }
        
        /**
         * Set desc
         * @param desc a string with a length from 0 to 16384 (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder desc(String desc) {
            this.desc = desc;
            return this;
        }
        
        /**
         * Set due
         * @param due A date, or null (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder due(String due) {
            this.due = due;
            return this;
        }
        
        /**
         * Set fileSource
         * @param fileSource A file (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder fileSource(String fileSource) {
            this.fileSource = fileSource;
            return this;
        }
        
        /**
         * Set idAttachmentCover
         * @param idAttachmentCover Id of the image attachment of this card to use as its cover, or null for no cover (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder idAttachmentCover(String idAttachmentCover) {
            this.idAttachmentCover = idAttachmentCover;
            return this;
        }
        
        /**
         * Set idBoard
         * @param idBoard id of the board the card should be moved to (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Set idCardSource
         * @param idCardSource The id of the card to copy into a new card. (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder idCardSource(String idCardSource) {
            this.idCardSource = idCardSource;
            return this;
        }
        
        /**
         * Set idLabels
         * @param idLabels A comma-separated list of objectIds, 24-character hex strings (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder idLabels(String idLabels) {
            this.idLabels = idLabels;
            return this;
        }
        
        /**
         * Set idList
         * @param idList id of the list that the card should be added to (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder idList(String idList) {
            this.idList = idList;
            return this;
        }
        
        /**
         * Set idMembers
         * @param idMembers A comma-separated list of objectIds, 24-character hex strings (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder idMembers(String idMembers) {
            this.idMembers = idMembers;
            return this;
        }
        
        /**
         * Set keepFromSource
         * @param keepFromSource Properties of the card to copy over from the source. (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder keepFromSource(String keepFromSource) {
            this.keepFromSource = keepFromSource;
            return this;
        }
        
        /**
         * Set labels
         * @param labels all or a comma-separated list of: blue, green, orange, purple, red or yellow (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder labels(String labels) {
            this.labels = labels;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the new card.  It isn&amp;#39;t required if the name is being copied from provided by a URL, file or card that is being copied. (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Set subscribed
         * @param subscribed  true or false (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder subscribed(String subscribed) {
            this.subscribed = subscribed;
            return this;
        }
        
        /**
         * Set urlSource
         * @param urlSource A URL starting with http:// or https:// or null (optional)
         * @return CreateAndUpdateRequestBuilder
         */
        public CreateAndUpdateRequestBuilder urlSource(String urlSource) {
            this.urlSource = urlSource;
            return this;
        }
        
        /**
         * Build call for createAndUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Cards cards = buildBodyParams();
            return createAndUpdateCall(cards, _callback);
        }

        private Cards buildBodyParams() {
            Cards cards = new Cards();
            cards.closed(this.closed);
            cards.desc(this.desc);
            cards.due(this.due);
            cards.fileSource(this.fileSource);
            cards.idAttachmentCover(this.idAttachmentCover);
            cards.idBoard(this.idBoard);
            cards.idCardSource(this.idCardSource);
            cards.idLabels(this.idLabels);
            cards.idList(this.idList);
            cards.idMembers(this.idMembers);
            cards.keepFromSource(this.keepFromSource);
            cards.labels(this.labels);
            cards.name(this.name);
            cards.pos(this.pos);
            cards.subscribed(this.subscribed);
            cards.urlSource(this.urlSource);
            return cards;
        }

        /**
         * Execute createAndUpdate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Cards cards = buildBodyParams();
            createAndUpdateWithHttpInfo(cards);
        }

        /**
         * Execute createAndUpdate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Cards cards = buildBodyParams();
            return createAndUpdateWithHttpInfo(cards);
        }

        /**
         * Execute createAndUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Cards cards = buildBodyParams();
            return createAndUpdateAsync(cards, _callback);
        }
    }

    /**
     * addCards()
     * 
     * @param cards Attributes of \&quot;Cards\&quot; to be added. (required)
     * @return CreateAndUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public CreateAndUpdateRequestBuilder createAndUpdate() throws IllegalArgumentException {
        return new CreateAndUpdateRequestBuilder();
    }
    private okhttp3.Call deleteAttachmentsByIdCardByIdAttachmentCall(String idCard, String idAttachment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/attachments/{idAttachment}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idAttachment" + "}", localVarApiClient.escapeString(idAttachment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttachmentsByIdCardByIdAttachmentValidateBeforeCall(String idCard, String idAttachment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling deleteAttachmentsByIdCardByIdAttachment(Async)");
        }

        // verify the required parameter 'idAttachment' is set
        if (idAttachment == null) {
            throw new ApiException("Missing the required parameter 'idAttachment' when calling deleteAttachmentsByIdCardByIdAttachment(Async)");
        }

        return deleteAttachmentsByIdCardByIdAttachmentCall(idCard, idAttachment, _callback);

    }


    private ApiResponse<Void> deleteAttachmentsByIdCardByIdAttachmentWithHttpInfo(String idCard, String idAttachment) throws ApiException {
        okhttp3.Call localVarCall = deleteAttachmentsByIdCardByIdAttachmentValidateBeforeCall(idCard, idAttachment, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAttachmentsByIdCardByIdAttachmentAsync(String idCard, String idAttachment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttachmentsByIdCardByIdAttachmentValidateBeforeCall(idCard, idAttachment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteAttachmentsByIdCardByIdAttachmentRequestBuilder {
        private final String idCard;
        private final String idAttachment;

        private DeleteAttachmentsByIdCardByIdAttachmentRequestBuilder(String idCard, String idAttachment) {
            this.idCard = idCard;
            this.idAttachment = idAttachment;
        }

        /**
         * Build call for deleteAttachmentsByIdCardByIdAttachment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAttachmentsByIdCardByIdAttachmentCall(idCard, idAttachment, _callback);
        }


        /**
         * Execute deleteAttachmentsByIdCardByIdAttachment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAttachmentsByIdCardByIdAttachmentWithHttpInfo(idCard, idAttachment);
        }

        /**
         * Execute deleteAttachmentsByIdCardByIdAttachment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAttachmentsByIdCardByIdAttachmentWithHttpInfo(idCard, idAttachment);
        }

        /**
         * Execute deleteAttachmentsByIdCardByIdAttachment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAttachmentsByIdCardByIdAttachmentAsync(idCard, idAttachment, _callback);
        }
    }

    /**
     * deleteCardsAttachmentsByIdCardByIdAttachment()
     * 
     * @param idCard card id or shortlink (required)
     * @param idAttachment idAttachment (required)
     * @return DeleteAttachmentsByIdCardByIdAttachmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachmentsByIdCardByIdAttachmentRequestBuilder deleteAttachmentsByIdCardByIdAttachment(String idCard, String idAttachment) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idAttachment == null) throw new IllegalArgumentException("\"idAttachment\" is required but got null");
            

        return new DeleteAttachmentsByIdCardByIdAttachmentRequestBuilder(idCard, idAttachment);
    }
    private okhttp3.Call deleteChecklistByIdCardByIdChecklistCall(String idCard, String idChecklist, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklists/{idChecklist}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChecklistByIdCardByIdChecklistValidateBeforeCall(String idCard, String idChecklist, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling deleteChecklistByIdCardByIdChecklist(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling deleteChecklistByIdCardByIdChecklist(Async)");
        }

        return deleteChecklistByIdCardByIdChecklistCall(idCard, idChecklist, _callback);

    }


    private ApiResponse<Void> deleteChecklistByIdCardByIdChecklistWithHttpInfo(String idCard, String idChecklist) throws ApiException {
        okhttp3.Call localVarCall = deleteChecklistByIdCardByIdChecklistValidateBeforeCall(idCard, idChecklist, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteChecklistByIdCardByIdChecklistAsync(String idCard, String idChecklist, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChecklistByIdCardByIdChecklistValidateBeforeCall(idCard, idChecklist, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteChecklistByIdCardByIdChecklistRequestBuilder {
        private final String idCard;
        private final String idChecklist;

        private DeleteChecklistByIdCardByIdChecklistRequestBuilder(String idCard, String idChecklist) {
            this.idCard = idCard;
            this.idChecklist = idChecklist;
        }

        /**
         * Build call for deleteChecklistByIdCardByIdChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteChecklistByIdCardByIdChecklistCall(idCard, idChecklist, _callback);
        }


        /**
         * Execute deleteChecklistByIdCardByIdChecklist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteChecklistByIdCardByIdChecklistWithHttpInfo(idCard, idChecklist);
        }

        /**
         * Execute deleteChecklistByIdCardByIdChecklist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteChecklistByIdCardByIdChecklistWithHttpInfo(idCard, idChecklist);
        }

        /**
         * Execute deleteChecklistByIdCardByIdChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteChecklistByIdCardByIdChecklistAsync(idCard, idChecklist, _callback);
        }
    }

    /**
     * deleteCardsChecklistsByIdCardByIdChecklist()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @return DeleteChecklistByIdCardByIdChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public DeleteChecklistByIdCardByIdChecklistRequestBuilder deleteChecklistByIdCardByIdChecklist(String idCard, String idChecklist) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        return new DeleteChecklistByIdCardByIdChecklistRequestBuilder(idCard, idChecklist);
    }
    private okhttp3.Call getAttachmentsByIdCardCall(String idCard, String fields, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/attachments"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentsByIdCardValidateBeforeCall(String idCard, String fields, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getAttachmentsByIdCard(Async)");
        }

        return getAttachmentsByIdCardCall(idCard, fields, filter, _callback);

    }


    private ApiResponse<Void> getAttachmentsByIdCardWithHttpInfo(String idCard, String fields, String filter) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentsByIdCardValidateBeforeCall(idCard, fields, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getAttachmentsByIdCardAsync(String idCard, String fields, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentsByIdCardValidateBeforeCall(idCard, fields, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetAttachmentsByIdCardRequestBuilder {
        private final String idCard;
        private String fields;
        private String filter;

        private GetAttachmentsByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
         * @return GetAttachmentsByIdCardRequestBuilder
         */
        public GetAttachmentsByIdCardRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set filter
         * @param filter A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
         * @return GetAttachmentsByIdCardRequestBuilder
         */
        public GetAttachmentsByIdCardRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getAttachmentsByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttachmentsByIdCardCall(idCard, fields, filter, _callback);
        }


        /**
         * Execute getAttachmentsByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getAttachmentsByIdCardWithHttpInfo(idCard, fields, filter);
        }

        /**
         * Execute getAttachmentsByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getAttachmentsByIdCardWithHttpInfo(idCard, fields, filter);
        }

        /**
         * Execute getAttachmentsByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getAttachmentsByIdCardAsync(idCard, fields, filter, _callback);
        }
    }

    /**
     * getCardsAttachmentsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @return GetAttachmentsByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetAttachmentsByIdCardRequestBuilder getAttachmentsByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new GetAttachmentsByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call getAttachmentsByIdsCall(String idCard, String idAttachment, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/attachments/{idAttachment}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idAttachment" + "}", localVarApiClient.escapeString(idAttachment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentsByIdsValidateBeforeCall(String idCard, String idAttachment, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getAttachmentsByIds(Async)");
        }

        // verify the required parameter 'idAttachment' is set
        if (idAttachment == null) {
            throw new ApiException("Missing the required parameter 'idAttachment' when calling getAttachmentsByIds(Async)");
        }

        return getAttachmentsByIdsCall(idCard, idAttachment, fields, _callback);

    }


    private ApiResponse<Void> getAttachmentsByIdsWithHttpInfo(String idCard, String idAttachment, String fields) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentsByIdsValidateBeforeCall(idCard, idAttachment, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getAttachmentsByIdsAsync(String idCard, String idAttachment, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentsByIdsValidateBeforeCall(idCard, idAttachment, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetAttachmentsByIdsRequestBuilder {
        private final String idCard;
        private final String idAttachment;
        private String fields;

        private GetAttachmentsByIdsRequestBuilder(String idCard, String idAttachment) {
            this.idCard = idCard;
            this.idAttachment = idAttachment;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
         * @return GetAttachmentsByIdsRequestBuilder
         */
        public GetAttachmentsByIdsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getAttachmentsByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttachmentsByIdsCall(idCard, idAttachment, fields, _callback);
        }


        /**
         * Execute getAttachmentsByIds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getAttachmentsByIdsWithHttpInfo(idCard, idAttachment, fields);
        }

        /**
         * Execute getAttachmentsByIds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getAttachmentsByIdsWithHttpInfo(idCard, idAttachment, fields);
        }

        /**
         * Execute getAttachmentsByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getAttachmentsByIdsAsync(idCard, idAttachment, fields, _callback);
        }
    }

    /**
     * getCardsAttachmentsByIdCardByIdAttachment()
     * 
     * @param idCard card id or shortlink (required)
     * @param idAttachment idAttachment (required)
     * @return GetAttachmentsByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetAttachmentsByIdsRequestBuilder getAttachmentsByIds(String idCard, String idAttachment) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idAttachment == null) throw new IllegalArgumentException("\"idAttachment\" is required but got null");
            

        return new GetAttachmentsByIdsRequestBuilder(idCard, idAttachment);
    }
    private okhttp3.Call getBoardByIdCall(String idCard, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/board"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardByIdValidateBeforeCall(String idCard, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getBoardById(Async)");
        }

        return getBoardByIdCall(idCard, fields, _callback);

    }


    private ApiResponse<Void> getBoardByIdWithHttpInfo(String idCard, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardByIdValidateBeforeCall(idCard, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardByIdAsync(String idCard, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardByIdValidateBeforeCall(idCard, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardByIdRequestBuilder {
        private final String idCard;
        private String fields;

        private GetBoardByIdRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
         * @return GetBoardByIdRequestBuilder
         */
        public GetBoardByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getBoardById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardByIdCall(idCard, fields, _callback);
        }


        /**
         * Execute getBoardById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardByIdWithHttpInfo(idCard, fields);
        }

        /**
         * Execute getBoardById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardByIdWithHttpInfo(idCard, fields);
        }

        /**
         * Execute getBoardById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardByIdAsync(idCard, fields, _callback);
        }
    }

    /**
     * getCardsBoardByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @return GetBoardByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardByIdRequestBuilder getBoardById(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new GetBoardByIdRequestBuilder(idCard);
    }
    private okhttp3.Call getBoardByIdCardByFieldCall(String idCard, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/board/{field}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardByIdCardByFieldValidateBeforeCall(String idCard, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getBoardByIdCardByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getBoardByIdCardByField(Async)");
        }

        return getBoardByIdCardByFieldCall(idCard, field, _callback);

    }


    private ApiResponse<Void> getBoardByIdCardByFieldWithHttpInfo(String idCard, String field) throws ApiException {
        okhttp3.Call localVarCall = getBoardByIdCardByFieldValidateBeforeCall(idCard, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardByIdCardByFieldAsync(String idCard, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardByIdCardByFieldValidateBeforeCall(idCard, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardByIdCardByFieldRequestBuilder {
        private final String idCard;
        private final String field;

        private GetBoardByIdCardByFieldRequestBuilder(String idCard, String field) {
            this.idCard = idCard;
            this.field = field;
        }

        /**
         * Build call for getBoardByIdCardByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardByIdCardByFieldCall(idCard, field, _callback);
        }


        /**
         * Execute getBoardByIdCardByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardByIdCardByFieldWithHttpInfo(idCard, field);
        }

        /**
         * Execute getBoardByIdCardByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardByIdCardByFieldWithHttpInfo(idCard, field);
        }

        /**
         * Execute getBoardByIdCardByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardByIdCardByFieldAsync(idCard, field, _callback);
        }
    }

    /**
     * getCardsBoardByIdCardByField()
     * 
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @return GetBoardByIdCardByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardByIdCardByFieldRequestBuilder getBoardByIdCardByField(String idCard, String field) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetBoardByIdCardByFieldRequestBuilder(idCard, field);
    }
    private okhttp3.Call getByIdCall(String idCard, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String attachments, String attachmentFields, String members, String memberFields, String membersVoted, String memberVotedFields, String checkItemStates, String checkItemStateFields, String checklists, String checklistFields, String board, String boardFields, String list, String listFields, String stickers, String stickerFields, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (actionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_entities", actionsEntities));
        }

        if (actionsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_display", actionsDisplay));
        }

        if (actionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_limit", actionsLimit));
        }

        if (actionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_fields", actionFields));
        }

        if (actionMemberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_memberCreator_fields", actionMemberCreatorFields));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (membersVoted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("membersVoted", membersVoted));
        }

        if (memberVotedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberVoted_fields", memberVotedFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checkItemStateFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemState_fields", checkItemStateFields));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (checklistFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklist_fields", checklistFields));
        }

        if (board != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board", board));
        }

        if (boardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_fields", boardFields));
        }

        if (list != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list", list));
        }

        if (listFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_fields", listFields));
        }

        if (stickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stickers", stickers));
        }

        if (stickerFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sticker_fields", stickerFields));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String idCard, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String attachments, String attachmentFields, String members, String memberFields, String membersVoted, String memberVotedFields, String checkItemStates, String checkItemStateFields, String checklists, String checklistFields, String board, String boardFields, String list, String listFields, String stickers, String stickerFields, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getById(Async)");
        }

        return getByIdCall(idCard, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, attachments, attachmentFields, members, memberFields, membersVoted, memberVotedFields, checkItemStates, checkItemStateFields, checklists, checklistFields, board, boardFields, list, listFields, stickers, stickerFields, fields, _callback);

    }


    private ApiResponse<Void> getByIdWithHttpInfo(String idCard, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String attachments, String attachmentFields, String members, String memberFields, String membersVoted, String memberVotedFields, String checkItemStates, String checkItemStateFields, String checklists, String checklistFields, String board, String boardFields, String list, String listFields, String stickers, String stickerFields, String fields) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idCard, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, attachments, attachmentFields, members, memberFields, membersVoted, memberVotedFields, checkItemStates, checkItemStateFields, checklists, checklistFields, board, boardFields, list, listFields, stickers, stickerFields, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdAsync(String idCard, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String attachments, String attachmentFields, String members, String memberFields, String membersVoted, String memberVotedFields, String checkItemStates, String checkItemStateFields, String checklists, String checklistFields, String board, String boardFields, String list, String listFields, String stickers, String stickerFields, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idCard, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, attachments, attachmentFields, members, memberFields, membersVoted, memberVotedFields, checkItemStates, checkItemStateFields, checklists, checklistFields, board, boardFields, list, listFields, stickers, stickerFields, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String idCard;
        private String actions;
        private String actionsEntities;
        private String actionsDisplay;
        private String actionsLimit;
        private String actionFields;
        private String actionMemberCreatorFields;
        private String attachments;
        private String attachmentFields;
        private String members;
        private String memberFields;
        private String membersVoted;
        private String memberVotedFields;
        private String checkItemStates;
        private String checkItemStateFields;
        private String checklists;
        private String checklistFields;
        private String board;
        private String boardFields;
        private String list;
        private String listFields;
        private String stickers;
        private String stickerFields;
        private String fields;

        private GetByIdRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set actionsEntities
         * @param actionsEntities  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionsEntities(String actionsEntities) {
            this.actionsEntities = actionsEntities;
            return this;
        }
        
        /**
         * Set actionsDisplay
         * @param actionsDisplay  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionsDisplay(String actionsDisplay) {
            this.actionsDisplay = actionsDisplay;
            return this;
        }
        
        /**
         * Set actionsLimit
         * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionsLimit(String actionsLimit) {
            this.actionsLimit = actionsLimit;
            return this;
        }
        
        /**
         * Set actionFields
         * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionFields(String actionFields) {
            this.actionFields = actionFields;
            return this;
        }
        
        /**
         * Set actionMemberCreatorFields
         * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionMemberCreatorFields(String actionMemberCreatorFields) {
            this.actionMemberCreatorFields = actionMemberCreatorFields;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder attachments(String attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set attachmentFields
         * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder attachmentFields(String attachmentFields) {
            this.attachmentFields = attachmentFields;
            return this;
        }
        
        /**
         * Set members
         * @param members  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder members(String members) {
            this.members = members;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set membersVoted
         * @param membersVoted  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder membersVoted(String membersVoted) {
            this.membersVoted = membersVoted;
            return this;
        }
        
        /**
         * Set memberVotedFields
         * @param memberVotedFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder memberVotedFields(String memberVotedFields) {
            this.memberVotedFields = memberVotedFields;
            return this;
        }
        
        /**
         * Set checkItemStates
         * @param checkItemStates  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder checkItemStates(String checkItemStates) {
            this.checkItemStates = checkItemStates;
            return this;
        }
        
        /**
         * Set checkItemStateFields
         * @param checkItemStateFields all or a comma-separated list of: idCheckItem or state (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder checkItemStateFields(String checkItemStateFields) {
            this.checkItemStateFields = checkItemStateFields;
            return this;
        }
        
        /**
         * Set checklists
         * @param checklists One of: all or none (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder checklists(String checklists) {
            this.checklists = checklists;
            return this;
        }
        
        /**
         * Set checklistFields
         * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder checklistFields(String checklistFields) {
            this.checklistFields = checklistFields;
            return this;
        }
        
        /**
         * Set board
         * @param board  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder board(String board) {
            this.board = board;
            return this;
        }
        
        /**
         * Set boardFields
         * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, descData, closed, idOrganization, pinned, url and prefs)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardFields(String boardFields) {
            this.boardFields = boardFields;
            return this;
        }
        
        /**
         * Set list
         * @param list  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder list(String list) {
            this.list = list;
            return this;
        }
        
        /**
         * Set listFields
         * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder listFields(String listFields) {
            this.listFields = listFields;
            return this;
        }
        
        /**
         * Set stickers
         * @param stickers  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder stickers(String stickers) {
            this.stickers = stickers;
            return this;
        }
        
        /**
         * Set stickerFields
         * @param stickerFields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder stickerFields(String stickerFields) {
            this.stickerFields = stickerFields;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl and url)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(idCard, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, attachments, attachmentFields, members, memberFields, membersVoted, memberVotedFields, checkItemStates, checkItemStateFields, checklists, checklistFields, board, boardFields, list, listFields, stickers, stickerFields, fields, _callback);
        }


        /**
         * Execute getById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdWithHttpInfo(idCard, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, attachments, attachmentFields, members, memberFields, membersVoted, memberVotedFields, checkItemStates, checkItemStateFields, checklists, checklistFields, board, boardFields, list, listFields, stickers, stickerFields, fields);
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(idCard, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, attachments, attachmentFields, members, memberFields, membersVoted, memberVotedFields, checkItemStates, checkItemStateFields, checklists, checklistFields, board, boardFields, list, listFields, stickers, stickerFields, fields);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdAsync(idCard, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, attachments, attachmentFields, members, memberFields, membersVoted, memberVotedFields, checkItemStates, checkItemStateFields, checklists, checklistFields, board, boardFields, list, listFields, stickers, stickerFields, fields, _callback);
        }
    }

    /**
     * getCardsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new GetByIdRequestBuilder(idCard);
    }
    private okhttp3.Call getByIdFieldCall(String idCard, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/{field}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdFieldValidateBeforeCall(String idCard, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getByIdField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getByIdField(Async)");
        }

        return getByIdFieldCall(idCard, field, _callback);

    }


    private ApiResponse<Void> getByIdFieldWithHttpInfo(String idCard, String field) throws ApiException {
        okhttp3.Call localVarCall = getByIdFieldValidateBeforeCall(idCard, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdFieldAsync(String idCard, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdFieldValidateBeforeCall(idCard, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdFieldRequestBuilder {
        private final String idCard;
        private final String field;

        private GetByIdFieldRequestBuilder(String idCard, String field) {
            this.idCard = idCard;
            this.field = field;
        }

        /**
         * Build call for getByIdField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdFieldCall(idCard, field, _callback);
        }


        /**
         * Execute getByIdField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdFieldWithHttpInfo(idCard, field);
        }

        /**
         * Execute getByIdField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdFieldWithHttpInfo(idCard, field);
        }

        /**
         * Execute getByIdField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdFieldAsync(idCard, field, _callback);
        }
    }

    /**
     * getCardsByIdCardByField()
     * 
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @return GetByIdFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdFieldRequestBuilder getByIdField(String idCard, String field) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetByIdFieldRequestBuilder(idCard, field);
    }
    private okhttp3.Call getCardsListByIdCardByFieldCall(String idCard, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/list/{field}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsListByIdCardByFieldValidateBeforeCall(String idCard, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsListByIdCardByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getCardsListByIdCardByField(Async)");
        }

        return getCardsListByIdCardByFieldCall(idCard, field, _callback);

    }


    private ApiResponse<Void> getCardsListByIdCardByFieldWithHttpInfo(String idCard, String field) throws ApiException {
        okhttp3.Call localVarCall = getCardsListByIdCardByFieldValidateBeforeCall(idCard, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCardsListByIdCardByFieldAsync(String idCard, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsListByIdCardByFieldValidateBeforeCall(idCard, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCardsListByIdCardByFieldRequestBuilder {
        private final String idCard;
        private final String field;

        private GetCardsListByIdCardByFieldRequestBuilder(String idCard, String field) {
            this.idCard = idCard;
            this.field = field;
        }

        /**
         * Build call for getCardsListByIdCardByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardsListByIdCardByFieldCall(idCard, field, _callback);
        }


        /**
         * Execute getCardsListByIdCardByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCardsListByIdCardByFieldWithHttpInfo(idCard, field);
        }

        /**
         * Execute getCardsListByIdCardByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCardsListByIdCardByFieldWithHttpInfo(idCard, field);
        }

        /**
         * Execute getCardsListByIdCardByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCardsListByIdCardByFieldAsync(idCard, field, _callback);
        }
    }

    /**
     * getCardsListByIdCardByField()
     * 
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @return GetCardsListByIdCardByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCardsListByIdCardByFieldRequestBuilder getCardsListByIdCardByField(String idCard, String field) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetCardsListByIdCardByFieldRequestBuilder(idCard, field);
    }
    private okhttp3.Call getCheckItemStatesByIdCall(String idCard, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checkItemStates"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckItemStatesByIdValidateBeforeCall(String idCard, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCheckItemStatesById(Async)");
        }

        return getCheckItemStatesByIdCall(idCard, fields, _callback);

    }


    private ApiResponse<Void> getCheckItemStatesByIdWithHttpInfo(String idCard, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCheckItemStatesByIdValidateBeforeCall(idCard, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCheckItemStatesByIdAsync(String idCard, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckItemStatesByIdValidateBeforeCall(idCard, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCheckItemStatesByIdRequestBuilder {
        private final String idCard;
        private String fields;

        private GetCheckItemStatesByIdRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: idCheckItem or state (optional, default to all)
         * @return GetCheckItemStatesByIdRequestBuilder
         */
        public GetCheckItemStatesByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCheckItemStatesById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCheckItemStatesByIdCall(idCard, fields, _callback);
        }


        /**
         * Execute getCheckItemStatesById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCheckItemStatesByIdWithHttpInfo(idCard, fields);
        }

        /**
         * Execute getCheckItemStatesById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCheckItemStatesByIdWithHttpInfo(idCard, fields);
        }

        /**
         * Execute getCheckItemStatesById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCheckItemStatesByIdAsync(idCard, fields, _callback);
        }
    }

    /**
     * getCardsCheckItemStatesByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @return GetCheckItemStatesByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCheckItemStatesByIdRequestBuilder getCheckItemStatesById(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new GetCheckItemStatesByIdRequestBuilder(idCard);
    }
    private okhttp3.Call getChecklistsByIdCall(String idCard, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklists"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards", cards));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (checkItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItems", checkItems));
        }

        if (checkItemFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItem_fields", checkItemFields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChecklistsByIdValidateBeforeCall(String idCard, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getChecklistsById(Async)");
        }

        return getChecklistsByIdCall(idCard, cards, cardFields, checkItems, checkItemFields, filter, fields, _callback);

    }


    private ApiResponse<Void> getChecklistsByIdWithHttpInfo(String idCard, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getChecklistsByIdValidateBeforeCall(idCard, cards, cardFields, checkItems, checkItemFields, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getChecklistsByIdAsync(String idCard, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChecklistsByIdValidateBeforeCall(idCard, cards, cardFields, checkItems, checkItemFields, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetChecklistsByIdRequestBuilder {
        private final String idCard;
        private String cards;
        private String cardFields;
        private String checkItems;
        private String checkItemFields;
        private String filter;
        private String fields;

        private GetChecklistsByIdRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set cards
         * @param cards One of: all, closed, none, open or visible (optional, default to none)
         * @return GetChecklistsByIdRequestBuilder
         */
        public GetChecklistsByIdRequestBuilder cards(String cards) {
            this.cards = cards;
            return this;
        }
        
        /**
         * Set cardFields
         * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetChecklistsByIdRequestBuilder
         */
        public GetChecklistsByIdRequestBuilder cardFields(String cardFields) {
            this.cardFields = cardFields;
            return this;
        }
        
        /**
         * Set checkItems
         * @param checkItems One of: all or none (optional, default to all)
         * @return GetChecklistsByIdRequestBuilder
         */
        public GetChecklistsByIdRequestBuilder checkItems(String checkItems) {
            this.checkItems = checkItems;
            return this;
        }
        
        /**
         * Set checkItemFields
         * @param checkItemFields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
         * @return GetChecklistsByIdRequestBuilder
         */
        public GetChecklistsByIdRequestBuilder checkItemFields(String checkItemFields) {
            this.checkItemFields = checkItemFields;
            return this;
        }
        
        /**
         * Set filter
         * @param filter One of: all or none (optional, default to all)
         * @return GetChecklistsByIdRequestBuilder
         */
        public GetChecklistsByIdRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
         * @return GetChecklistsByIdRequestBuilder
         */
        public GetChecklistsByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getChecklistsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChecklistsByIdCall(idCard, cards, cardFields, checkItems, checkItemFields, filter, fields, _callback);
        }


        /**
         * Execute getChecklistsById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getChecklistsByIdWithHttpInfo(idCard, cards, cardFields, checkItems, checkItemFields, filter, fields);
        }

        /**
         * Execute getChecklistsById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getChecklistsByIdWithHttpInfo(idCard, cards, cardFields, checkItems, checkItemFields, filter, fields);
        }

        /**
         * Execute getChecklistsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getChecklistsByIdAsync(idCard, cards, cardFields, checkItems, checkItemFields, filter, fields, _callback);
        }
    }

    /**
     * getCardsChecklistsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @return GetChecklistsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetChecklistsByIdRequestBuilder getChecklistsById(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new GetChecklistsByIdRequestBuilder(idCard);
    }
    private okhttp3.Call getListByIdCall(String idCard, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/list"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListByIdValidateBeforeCall(String idCard, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getListById(Async)");
        }

        return getListByIdCall(idCard, fields, _callback);

    }


    private ApiResponse<Void> getListByIdWithHttpInfo(String idCard, String fields) throws ApiException {
        okhttp3.Call localVarCall = getListByIdValidateBeforeCall(idCard, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getListByIdAsync(String idCard, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListByIdValidateBeforeCall(idCard, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetListByIdRequestBuilder {
        private final String idCard;
        private String fields;

        private GetListByIdRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
         * @return GetListByIdRequestBuilder
         */
        public GetListByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getListById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListByIdCall(idCard, fields, _callback);
        }


        /**
         * Execute getListById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getListByIdWithHttpInfo(idCard, fields);
        }

        /**
         * Execute getListById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getListByIdWithHttpInfo(idCard, fields);
        }

        /**
         * Execute getListById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getListByIdAsync(idCard, fields, _callback);
        }
    }

    /**
     * getCardsListByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @return GetListByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetListByIdRequestBuilder getListById(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new GetListByIdRequestBuilder(idCard);
    }
    private okhttp3.Call getMembersVotedByIdCardCall(String idCard, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/membersVoted"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersVotedByIdCardValidateBeforeCall(String idCard, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getMembersVotedByIdCard(Async)");
        }

        return getMembersVotedByIdCardCall(idCard, fields, _callback);

    }


    private ApiResponse<Void> getMembersVotedByIdCardWithHttpInfo(String idCard, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMembersVotedByIdCardValidateBeforeCall(idCard, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMembersVotedByIdCardAsync(String idCard, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersVotedByIdCardValidateBeforeCall(idCard, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMembersVotedByIdCardRequestBuilder {
        private final String idCard;
        private String fields;

        private GetMembersVotedByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetMembersVotedByIdCardRequestBuilder
         */
        public GetMembersVotedByIdCardRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getMembersVotedByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersVotedByIdCardCall(idCard, fields, _callback);
        }


        /**
         * Execute getMembersVotedByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMembersVotedByIdCardWithHttpInfo(idCard, fields);
        }

        /**
         * Execute getMembersVotedByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMembersVotedByIdCardWithHttpInfo(idCard, fields);
        }

        /**
         * Execute getMembersVotedByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMembersVotedByIdCardAsync(idCard, fields, _callback);
        }
    }

    /**
     * getCardsMembersVotedByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @return GetMembersVotedByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMembersVotedByIdCardRequestBuilder getMembersVotedByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new GetMembersVotedByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call getStickerByIdsCall(String idCard, String idSticker, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/stickers/{idSticker}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idSticker" + "}", localVarApiClient.escapeString(idSticker.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStickerByIdsValidateBeforeCall(String idCard, String idSticker, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getStickerByIds(Async)");
        }

        // verify the required parameter 'idSticker' is set
        if (idSticker == null) {
            throw new ApiException("Missing the required parameter 'idSticker' when calling getStickerByIds(Async)");
        }

        return getStickerByIdsCall(idCard, idSticker, fields, _callback);

    }


    private ApiResponse<Void> getStickerByIdsWithHttpInfo(String idCard, String idSticker, String fields) throws ApiException {
        okhttp3.Call localVarCall = getStickerByIdsValidateBeforeCall(idCard, idSticker, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getStickerByIdsAsync(String idCard, String idSticker, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStickerByIdsValidateBeforeCall(idCard, idSticker, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetStickerByIdsRequestBuilder {
        private final String idCard;
        private final String idSticker;
        private String fields;

        private GetStickerByIdsRequestBuilder(String idCard, String idSticker) {
            this.idCard = idCard;
            this.idSticker = idSticker;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
         * @return GetStickerByIdsRequestBuilder
         */
        public GetStickerByIdsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getStickerByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStickerByIdsCall(idCard, idSticker, fields, _callback);
        }


        /**
         * Execute getStickerByIds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getStickerByIdsWithHttpInfo(idCard, idSticker, fields);
        }

        /**
         * Execute getStickerByIds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getStickerByIdsWithHttpInfo(idCard, idSticker, fields);
        }

        /**
         * Execute getStickerByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getStickerByIdsAsync(idCard, idSticker, fields, _callback);
        }
    }

    /**
     * getCardsStickersByIdCardByIdSticker()
     * 
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @return GetStickerByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetStickerByIdsRequestBuilder getStickerByIds(String idCard, String idSticker) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idSticker == null) throw new IllegalArgumentException("\"idSticker\" is required but got null");
            

        return new GetStickerByIdsRequestBuilder(idCard, idSticker);
    }
    private okhttp3.Call getStickersByIdCardCall(String idCard, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/stickers"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStickersByIdCardValidateBeforeCall(String idCard, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getStickersByIdCard(Async)");
        }

        return getStickersByIdCardCall(idCard, fields, _callback);

    }


    private ApiResponse<Void> getStickersByIdCardWithHttpInfo(String idCard, String fields) throws ApiException {
        okhttp3.Call localVarCall = getStickersByIdCardValidateBeforeCall(idCard, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getStickersByIdCardAsync(String idCard, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStickersByIdCardValidateBeforeCall(idCard, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetStickersByIdCardRequestBuilder {
        private final String idCard;
        private String fields;

        private GetStickersByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
         * @return GetStickersByIdCardRequestBuilder
         */
        public GetStickersByIdCardRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getStickersByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStickersByIdCardCall(idCard, fields, _callback);
        }


        /**
         * Execute getStickersByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getStickersByIdCardWithHttpInfo(idCard, fields);
        }

        /**
         * Execute getStickersByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getStickersByIdCardWithHttpInfo(idCard, fields);
        }

        /**
         * Execute getStickersByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getStickersByIdCardAsync(idCard, fields, _callback);
        }
    }

    /**
     * getCardsStickersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @return GetStickersByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetStickersByIdCardRequestBuilder getStickersByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new GetStickersByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call listCardActionsByIdCall(String idCard, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/actions"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (idModels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idModels", idModels));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (memberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator", memberCreator));
        }

        if (memberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator_fields", memberCreatorFields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCardActionsByIdValidateBeforeCall(String idCard, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling listCardActionsById(Async)");
        }

        return listCardActionsByIdCall(idCard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);

    }


    private ApiResponse<Void> listCardActionsByIdWithHttpInfo(String idCard, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields) throws ApiException {
        okhttp3.Call localVarCall = listCardActionsByIdValidateBeforeCall(idCard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listCardActionsByIdAsync(String idCard, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCardActionsByIdValidateBeforeCall(idCard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListCardActionsByIdRequestBuilder {
        private final String idCard;
        private String entities;
        private String display;
        private String filter;
        private String fields;
        private String limit;
        private String format;
        private String since;
        private String before;
        private String page;
        private String idModels;
        private String member;
        private String memberFields;
        private String memberCreator;
        private String memberCreatorFields;

        private ListCardActionsByIdRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set entities
         * @param entities  true or false (optional)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder entities(String entities) {
            this.entities = entities;
            return this;
        }
        
        /**
         * Set display
         * @param display  true or false (optional)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder display(String display) {
            this.display = display;
            return this;
        }
        
        /**
         * Set filter
         * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to commentCard and updateCard:idList)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set limit
         * @param limit a number from 0 to 1000 (optional, default to 50)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set format
         * @param format One of: count, list or minimal (optional, default to list)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set since
         * @param since A date, null or lastView (optional)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set before
         * @param before A date, or null (optional)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set page
         * @param page Page * limit must be less than 1000 (optional, default to 0)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set idModels
         * @param idModels Only return actions related to these model ids (optional)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder idModels(String idModels) {
            this.idModels = idModels;
            return this;
        }
        
        /**
         * Set member
         * @param member  true or false (optional)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder member(String member) {
            this.member = member;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set memberCreator
         * @param memberCreator  true or false (optional)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder memberCreator(String memberCreator) {
            this.memberCreator = memberCreator;
            return this;
        }
        
        /**
         * Set memberCreatorFields
         * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return ListCardActionsByIdRequestBuilder
         */
        public ListCardActionsByIdRequestBuilder memberCreatorFields(String memberCreatorFields) {
            this.memberCreatorFields = memberCreatorFields;
            return this;
        }
        
        /**
         * Build call for listCardActionsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCardActionsByIdCall(idCard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        }


        /**
         * Execute listCardActionsById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listCardActionsByIdWithHttpInfo(idCard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
        }

        /**
         * Execute listCardActionsById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listCardActionsByIdWithHttpInfo(idCard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
        }

        /**
         * Execute listCardActionsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listCardActionsByIdAsync(idCard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        }
    }

    /**
     * getCardsActionsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @return ListCardActionsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListCardActionsByIdRequestBuilder listCardActionsById(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new ListCardActionsByIdRequestBuilder(idCard);
    }
    private okhttp3.Call listMembersByIdCardCall(String idCard, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/members"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMembersByIdCardValidateBeforeCall(String idCard, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling listMembersByIdCard(Async)");
        }

        return listMembersByIdCardCall(idCard, fields, _callback);

    }


    private ApiResponse<Void> listMembersByIdCardWithHttpInfo(String idCard, String fields) throws ApiException {
        okhttp3.Call localVarCall = listMembersByIdCardValidateBeforeCall(idCard, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listMembersByIdCardAsync(String idCard, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMembersByIdCardValidateBeforeCall(idCard, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListMembersByIdCardRequestBuilder {
        private final String idCard;
        private String fields;

        private ListMembersByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return ListMembersByIdCardRequestBuilder
         */
        public ListMembersByIdCardRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for listMembersByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMembersByIdCardCall(idCard, fields, _callback);
        }


        /**
         * Execute listMembersByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listMembersByIdCardWithHttpInfo(idCard, fields);
        }

        /**
         * Execute listMembersByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listMembersByIdCardWithHttpInfo(idCard, fields);
        }

        /**
         * Execute listMembersByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listMembersByIdCardAsync(idCard, fields, _callback);
        }
    }

    /**
     * getCardsMembersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @return ListMembersByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListMembersByIdCardRequestBuilder listMembersByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new ListMembersByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call markAssociatedNotificationsReadCall(String idCard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/markAssociatedNotificationsRead"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markAssociatedNotificationsReadValidateBeforeCall(String idCard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling markAssociatedNotificationsRead(Async)");
        }

        return markAssociatedNotificationsReadCall(idCard, _callback);

    }


    private ApiResponse<Void> markAssociatedNotificationsReadWithHttpInfo(String idCard) throws ApiException {
        okhttp3.Call localVarCall = markAssociatedNotificationsReadValidateBeforeCall(idCard, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call markAssociatedNotificationsReadAsync(String idCard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markAssociatedNotificationsReadValidateBeforeCall(idCard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class MarkAssociatedNotificationsReadRequestBuilder {
        private final String idCard;

        private MarkAssociatedNotificationsReadRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Build call for markAssociatedNotificationsRead
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return markAssociatedNotificationsReadCall(idCard, _callback);
        }


        /**
         * Execute markAssociatedNotificationsRead request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            markAssociatedNotificationsReadWithHttpInfo(idCard);
        }

        /**
         * Execute markAssociatedNotificationsRead request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return markAssociatedNotificationsReadWithHttpInfo(idCard);
        }

        /**
         * Execute markAssociatedNotificationsRead request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return markAssociatedNotificationsReadAsync(idCard, _callback);
        }
    }

    /**
     * addCardsMarkAssociatedNotificationsReadByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @return MarkAssociatedNotificationsReadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public MarkAssociatedNotificationsReadRequestBuilder markAssociatedNotificationsRead(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new MarkAssociatedNotificationsReadRequestBuilder(idCard);
    }
    private okhttp3.Call removeActionCommentByIdCardByIdActionCall(String idCard, String idAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/actions/{idAction}/comments"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeActionCommentByIdCardByIdActionValidateBeforeCall(String idCard, String idAction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling removeActionCommentByIdCardByIdAction(Async)");
        }

        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling removeActionCommentByIdCardByIdAction(Async)");
        }

        return removeActionCommentByIdCardByIdActionCall(idCard, idAction, _callback);

    }


    private ApiResponse<Void> removeActionCommentByIdCardByIdActionWithHttpInfo(String idCard, String idAction) throws ApiException {
        okhttp3.Call localVarCall = removeActionCommentByIdCardByIdActionValidateBeforeCall(idCard, idAction, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeActionCommentByIdCardByIdActionAsync(String idCard, String idAction, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeActionCommentByIdCardByIdActionValidateBeforeCall(idCard, idAction, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveActionCommentByIdCardByIdActionRequestBuilder {
        private final String idCard;
        private final String idAction;

        private RemoveActionCommentByIdCardByIdActionRequestBuilder(String idCard, String idAction) {
            this.idCard = idCard;
            this.idAction = idAction;
        }

        /**
         * Build call for removeActionCommentByIdCardByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeActionCommentByIdCardByIdActionCall(idCard, idAction, _callback);
        }


        /**
         * Execute removeActionCommentByIdCardByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeActionCommentByIdCardByIdActionWithHttpInfo(idCard, idAction);
        }

        /**
         * Execute removeActionCommentByIdCardByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeActionCommentByIdCardByIdActionWithHttpInfo(idCard, idAction);
        }

        /**
         * Execute removeActionCommentByIdCardByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeActionCommentByIdCardByIdActionAsync(idCard, idAction, _callback);
        }
    }

    /**
     * deleteCardsActionsCommentsByIdCardByIdAction()
     * This can only be done by the original author of the comment, or someone with higher permissions than the original author.
     * @param idCard card id or shortlink (required)
     * @param idAction idAction (required)
     * @return RemoveActionCommentByIdCardByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveActionCommentByIdCardByIdActionRequestBuilder removeActionCommentByIdCardByIdAction(String idCard, String idAction) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new RemoveActionCommentByIdCardByIdActionRequestBuilder(idCard, idAction);
    }
    private okhttp3.Call removeByIdCardCall(String idCard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdCardValidateBeforeCall(String idCard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling removeByIdCard(Async)");
        }

        return removeByIdCardCall(idCard, _callback);

    }


    private ApiResponse<Void> removeByIdCardWithHttpInfo(String idCard) throws ApiException {
        okhttp3.Call localVarCall = removeByIdCardValidateBeforeCall(idCard, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdCardAsync(String idCard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdCardValidateBeforeCall(idCard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdCardRequestBuilder {
        private final String idCard;

        private RemoveByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Build call for removeByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCardCall(idCard, _callback);
        }


        /**
         * Execute removeByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdCardWithHttpInfo(idCard);
        }

        /**
         * Execute removeByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdCardWithHttpInfo(idCard);
        }

        /**
         * Execute removeByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdCardAsync(idCard, _callback);
        }
    }

    /**
     * deleteCardsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @return RemoveByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdCardRequestBuilder removeByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new RemoveByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call removeChecklistCheckItemCall(String idCard, String idChecklist, String idCheckItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeChecklistCheckItemValidateBeforeCall(String idCard, String idChecklist, String idCheckItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling removeChecklistCheckItem(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling removeChecklistCheckItem(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling removeChecklistCheckItem(Async)");
        }

        return removeChecklistCheckItemCall(idCard, idChecklist, idCheckItem, _callback);

    }


    private ApiResponse<Void> removeChecklistCheckItemWithHttpInfo(String idCard, String idChecklist, String idCheckItem) throws ApiException {
        okhttp3.Call localVarCall = removeChecklistCheckItemValidateBeforeCall(idCard, idChecklist, idCheckItem, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeChecklistCheckItemAsync(String idCard, String idChecklist, String idCheckItem, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeChecklistCheckItemValidateBeforeCall(idCard, idChecklist, idCheckItem, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveChecklistCheckItemRequestBuilder {
        private final String idCard;
        private final String idChecklist;
        private final String idCheckItem;

        private RemoveChecklistCheckItemRequestBuilder(String idCard, String idChecklist, String idCheckItem) {
            this.idCard = idCard;
            this.idChecklist = idChecklist;
            this.idCheckItem = idCheckItem;
        }

        /**
         * Build call for removeChecklistCheckItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeChecklistCheckItemCall(idCard, idChecklist, idCheckItem, _callback);
        }


        /**
         * Execute removeChecklistCheckItem request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeChecklistCheckItemWithHttpInfo(idCard, idChecklist, idCheckItem);
        }

        /**
         * Execute removeChecklistCheckItem request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeChecklistCheckItemWithHttpInfo(idCard, idChecklist, idCheckItem);
        }

        /**
         * Execute removeChecklistCheckItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeChecklistCheckItemAsync(idCard, idChecklist, idCheckItem, _callback);
        }
    }

    /**
     * deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @return RemoveChecklistCheckItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveChecklistCheckItemRequestBuilder removeChecklistCheckItem(String idCard, String idChecklist, String idCheckItem) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        if (idCheckItem == null) throw new IllegalArgumentException("\"idCheckItem\" is required but got null");
            

        return new RemoveChecklistCheckItemRequestBuilder(idCard, idChecklist, idCheckItem);
    }
    private okhttp3.Call removeLabelByIdCardByIdLabelCall(String idCard, String idLabel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idLabels/{idLabel}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idLabel" + "}", localVarApiClient.escapeString(idLabel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLabelByIdCardByIdLabelValidateBeforeCall(String idCard, String idLabel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling removeLabelByIdCardByIdLabel(Async)");
        }

        // verify the required parameter 'idLabel' is set
        if (idLabel == null) {
            throw new ApiException("Missing the required parameter 'idLabel' when calling removeLabelByIdCardByIdLabel(Async)");
        }

        return removeLabelByIdCardByIdLabelCall(idCard, idLabel, _callback);

    }


    private ApiResponse<Void> removeLabelByIdCardByIdLabelWithHttpInfo(String idCard, String idLabel) throws ApiException {
        okhttp3.Call localVarCall = removeLabelByIdCardByIdLabelValidateBeforeCall(idCard, idLabel, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeLabelByIdCardByIdLabelAsync(String idCard, String idLabel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLabelByIdCardByIdLabelValidateBeforeCall(idCard, idLabel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveLabelByIdCardByIdLabelRequestBuilder {
        private final String idCard;
        private final String idLabel;

        private RemoveLabelByIdCardByIdLabelRequestBuilder(String idCard, String idLabel) {
            this.idCard = idCard;
            this.idLabel = idLabel;
        }

        /**
         * Build call for removeLabelByIdCardByIdLabel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeLabelByIdCardByIdLabelCall(idCard, idLabel, _callback);
        }


        /**
         * Execute removeLabelByIdCardByIdLabel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeLabelByIdCardByIdLabelWithHttpInfo(idCard, idLabel);
        }

        /**
         * Execute removeLabelByIdCardByIdLabel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeLabelByIdCardByIdLabelWithHttpInfo(idCard, idLabel);
        }

        /**
         * Execute removeLabelByIdCardByIdLabel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeLabelByIdCardByIdLabelAsync(idCard, idLabel, _callback);
        }
    }

    /**
     * deleteCardsIdLabelsByIdCardByIdLabel()
     * 
     * @param idCard card id or shortlink (required)
     * @param idLabel idLabel (required)
     * @return RemoveLabelByIdCardByIdLabelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveLabelByIdCardByIdLabelRequestBuilder removeLabelByIdCardByIdLabel(String idCard, String idLabel) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idLabel == null) throw new IllegalArgumentException("\"idLabel\" is required but got null");
            

        return new RemoveLabelByIdCardByIdLabelRequestBuilder(idCard, idLabel);
    }
    private okhttp3.Call removeLabelsByIdCardByColorCall(String idCard, String color, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/labels/{color}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "color" + "}", localVarApiClient.escapeString(color.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLabelsByIdCardByColorValidateBeforeCall(String idCard, String color, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling removeLabelsByIdCardByColor(Async)");
        }

        // verify the required parameter 'color' is set
        if (color == null) {
            throw new ApiException("Missing the required parameter 'color' when calling removeLabelsByIdCardByColor(Async)");
        }

        return removeLabelsByIdCardByColorCall(idCard, color, _callback);

    }


    private ApiResponse<Void> removeLabelsByIdCardByColorWithHttpInfo(String idCard, String color) throws ApiException {
        okhttp3.Call localVarCall = removeLabelsByIdCardByColorValidateBeforeCall(idCard, color, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeLabelsByIdCardByColorAsync(String idCard, String color, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLabelsByIdCardByColorValidateBeforeCall(idCard, color, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveLabelsByIdCardByColorRequestBuilder {
        private final String idCard;
        private final String color;

        private RemoveLabelsByIdCardByColorRequestBuilder(String idCard, String color) {
            this.idCard = idCard;
            this.color = color;
        }

        /**
         * Build call for removeLabelsByIdCardByColor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeLabelsByIdCardByColorCall(idCard, color, _callback);
        }


        /**
         * Execute removeLabelsByIdCardByColor request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeLabelsByIdCardByColorWithHttpInfo(idCard, color);
        }

        /**
         * Execute removeLabelsByIdCardByColor request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeLabelsByIdCardByColorWithHttpInfo(idCard, color);
        }

        /**
         * Execute removeLabelsByIdCardByColor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeLabelsByIdCardByColorAsync(idCard, color, _callback);
        }
    }

    /**
     * deleteCardsLabelsByIdCardByColor()
     * 
     * @param idCard card id or shortlink (required)
     * @param color color (required)
     * @return RemoveLabelsByIdCardByColorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveLabelsByIdCardByColorRequestBuilder removeLabelsByIdCardByColor(String idCard, String color) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (color == null) throw new IllegalArgumentException("\"color\" is required but got null");
            

        return new RemoveLabelsByIdCardByColorRequestBuilder(idCard, color);
    }
    private okhttp3.Call removeMemberByIdMemberCall(String idCard, String idMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idMembers/{idMember}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMemberByIdMemberValidateBeforeCall(String idCard, String idMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling removeMemberByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling removeMemberByIdMember(Async)");
        }

        return removeMemberByIdMemberCall(idCard, idMember, _callback);

    }


    private ApiResponse<Void> removeMemberByIdMemberWithHttpInfo(String idCard, String idMember) throws ApiException {
        okhttp3.Call localVarCall = removeMemberByIdMemberValidateBeforeCall(idCard, idMember, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMemberByIdMemberAsync(String idCard, String idMember, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMemberByIdMemberValidateBeforeCall(idCard, idMember, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMemberByIdMemberRequestBuilder {
        private final String idCard;
        private final String idMember;

        private RemoveMemberByIdMemberRequestBuilder(String idCard, String idMember) {
            this.idCard = idCard;
            this.idMember = idMember;
        }

        /**
         * Build call for removeMemberByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMemberByIdMemberCall(idCard, idMember, _callback);
        }


        /**
         * Execute removeMemberByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeMemberByIdMemberWithHttpInfo(idCard, idMember);
        }

        /**
         * Execute removeMemberByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeMemberByIdMemberWithHttpInfo(idCard, idMember);
        }

        /**
         * Execute removeMemberByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeMemberByIdMemberAsync(idCard, idMember, _callback);
        }
    }

    /**
     * deleteCardsIdMembersByIdCardByIdMember()
     * 
     * @param idCard card id or shortlink (required)
     * @param idMember idMember (required)
     * @return RemoveMemberByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMemberByIdMemberRequestBuilder removeMemberByIdMember(String idCard, String idMember) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new RemoveMemberByIdMemberRequestBuilder(idCard, idMember);
    }
    private okhttp3.Call removeMembersVotedByIdCardByIdMemberCall(String idCard, String idMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/membersVoted/{idMember}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMembersVotedByIdCardByIdMemberValidateBeforeCall(String idCard, String idMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling removeMembersVotedByIdCardByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling removeMembersVotedByIdCardByIdMember(Async)");
        }

        return removeMembersVotedByIdCardByIdMemberCall(idCard, idMember, _callback);

    }


    private ApiResponse<Void> removeMembersVotedByIdCardByIdMemberWithHttpInfo(String idCard, String idMember) throws ApiException {
        okhttp3.Call localVarCall = removeMembersVotedByIdCardByIdMemberValidateBeforeCall(idCard, idMember, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMembersVotedByIdCardByIdMemberAsync(String idCard, String idMember, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMembersVotedByIdCardByIdMemberValidateBeforeCall(idCard, idMember, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMembersVotedByIdCardByIdMemberRequestBuilder {
        private final String idCard;
        private final String idMember;

        private RemoveMembersVotedByIdCardByIdMemberRequestBuilder(String idCard, String idMember) {
            this.idCard = idCard;
            this.idMember = idMember;
        }

        /**
         * Build call for removeMembersVotedByIdCardByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMembersVotedByIdCardByIdMemberCall(idCard, idMember, _callback);
        }


        /**
         * Execute removeMembersVotedByIdCardByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeMembersVotedByIdCardByIdMemberWithHttpInfo(idCard, idMember);
        }

        /**
         * Execute removeMembersVotedByIdCardByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeMembersVotedByIdCardByIdMemberWithHttpInfo(idCard, idMember);
        }

        /**
         * Execute removeMembersVotedByIdCardByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeMembersVotedByIdCardByIdMemberAsync(idCard, idMember, _callback);
        }
    }

    /**
     * deleteCardsMembersVotedByIdCardByIdMember()
     * 
     * @param idCard card id or shortlink (required)
     * @param idMember idMember (required)
     * @return RemoveMembersVotedByIdCardByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMembersVotedByIdCardByIdMemberRequestBuilder removeMembersVotedByIdCardByIdMember(String idCard, String idMember) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new RemoveMembersVotedByIdCardByIdMemberRequestBuilder(idCard, idMember);
    }
    private okhttp3.Call removeStickerByIdsCall(String idCard, String idSticker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/stickers/{idSticker}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idSticker" + "}", localVarApiClient.escapeString(idSticker.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeStickerByIdsValidateBeforeCall(String idCard, String idSticker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling removeStickerByIds(Async)");
        }

        // verify the required parameter 'idSticker' is set
        if (idSticker == null) {
            throw new ApiException("Missing the required parameter 'idSticker' when calling removeStickerByIds(Async)");
        }

        return removeStickerByIdsCall(idCard, idSticker, _callback);

    }


    private ApiResponse<Void> removeStickerByIdsWithHttpInfo(String idCard, String idSticker) throws ApiException {
        okhttp3.Call localVarCall = removeStickerByIdsValidateBeforeCall(idCard, idSticker, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeStickerByIdsAsync(String idCard, String idSticker, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeStickerByIdsValidateBeforeCall(idCard, idSticker, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveStickerByIdsRequestBuilder {
        private final String idCard;
        private final String idSticker;

        private RemoveStickerByIdsRequestBuilder(String idCard, String idSticker) {
            this.idCard = idCard;
            this.idSticker = idSticker;
        }

        /**
         * Build call for removeStickerByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeStickerByIdsCall(idCard, idSticker, _callback);
        }


        /**
         * Execute removeStickerByIds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeStickerByIdsWithHttpInfo(idCard, idSticker);
        }

        /**
         * Execute removeStickerByIds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeStickerByIdsWithHttpInfo(idCard, idSticker);
        }

        /**
         * Execute removeStickerByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeStickerByIdsAsync(idCard, idSticker, _callback);
        }
    }

    /**
     * deleteCardsStickersByIdCardByIdSticker()
     * 
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @return RemoveStickerByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveStickerByIdsRequestBuilder removeStickerByIds(String idCard, String idSticker) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idSticker == null) throw new IllegalArgumentException("\"idSticker\" is required but got null");
            

        return new RemoveStickerByIdsRequestBuilder(idCard, idSticker);
    }
    private okhttp3.Call updateActionCommentByIdCardByIdActionCall(String idCard, String idAction, CardsActionsComments cardsActionsComments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsActionsComments;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/actions/{idAction}/comments"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateActionCommentByIdCardByIdActionValidateBeforeCall(String idCard, String idAction, CardsActionsComments cardsActionsComments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateActionCommentByIdCardByIdAction(Async)");
        }

        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling updateActionCommentByIdCardByIdAction(Async)");
        }

        // verify the required parameter 'cardsActionsComments' is set
        if (cardsActionsComments == null) {
            throw new ApiException("Missing the required parameter 'cardsActionsComments' when calling updateActionCommentByIdCardByIdAction(Async)");
        }

        return updateActionCommentByIdCardByIdActionCall(idCard, idAction, cardsActionsComments, _callback);

    }


    private ApiResponse<Void> updateActionCommentByIdCardByIdActionWithHttpInfo(String idCard, String idAction, CardsActionsComments cardsActionsComments) throws ApiException {
        okhttp3.Call localVarCall = updateActionCommentByIdCardByIdActionValidateBeforeCall(idCard, idAction, cardsActionsComments, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateActionCommentByIdCardByIdActionAsync(String idCard, String idAction, CardsActionsComments cardsActionsComments, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateActionCommentByIdCardByIdActionValidateBeforeCall(idCard, idAction, cardsActionsComments, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateActionCommentByIdCardByIdActionRequestBuilder {
        private final String idCard;
        private final String idAction;
        private String text;

        private UpdateActionCommentByIdCardByIdActionRequestBuilder(String idCard, String idAction) {
            this.idCard = idCard;
            this.idAction = idAction;
        }

        /**
         * Set text
         * @param text a string with a length from 1 to 16384 (optional)
         * @return UpdateActionCommentByIdCardByIdActionRequestBuilder
         */
        public UpdateActionCommentByIdCardByIdActionRequestBuilder text(String text) {
            this.text = text;
            return this;
        }
        
        /**
         * Build call for updateActionCommentByIdCardByIdAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsActionsComments cardsActionsComments = buildBodyParams();
            return updateActionCommentByIdCardByIdActionCall(idCard, idAction, cardsActionsComments, _callback);
        }

        private CardsActionsComments buildBodyParams() {
            CardsActionsComments cardsActionsComments = new CardsActionsComments();
            cardsActionsComments.text(this.text);
            return cardsActionsComments;
        }

        /**
         * Execute updateActionCommentByIdCardByIdAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsActionsComments cardsActionsComments = buildBodyParams();
            updateActionCommentByIdCardByIdActionWithHttpInfo(idCard, idAction, cardsActionsComments);
        }

        /**
         * Execute updateActionCommentByIdCardByIdAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsActionsComments cardsActionsComments = buildBodyParams();
            return updateActionCommentByIdCardByIdActionWithHttpInfo(idCard, idAction, cardsActionsComments);
        }

        /**
         * Execute updateActionCommentByIdCardByIdAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsActionsComments cardsActionsComments = buildBodyParams();
            return updateActionCommentByIdCardByIdActionAsync(idCard, idAction, cardsActionsComments, _callback);
        }
    }

    /**
     * updateCardsActionsCommentsByIdCardByIdAction()
     * This can only be done by the original author of the comment.
     * @param idCard card id or shortlink (required)
     * @param idAction idAction (required)
     * @param cardsActionsComments Attributes of \&quot;Cards Actions Comments\&quot; to be updated. (required)
     * @return UpdateActionCommentByIdCardByIdActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateActionCommentByIdCardByIdActionRequestBuilder updateActionCommentByIdCardByIdAction(String idCard, String idAction) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idAction == null) throw new IllegalArgumentException("\"idAction\" is required but got null");
            

        return new UpdateActionCommentByIdCardByIdActionRequestBuilder(idCard, idAction);
    }
    private okhttp3.Call updateAttachmentCoverByIdCardCall(String idCard, CardsIdAttachmentCover cardsIdAttachmentCover, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsIdAttachmentCover;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idAttachmentCover"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttachmentCoverByIdCardValidateBeforeCall(String idCard, CardsIdAttachmentCover cardsIdAttachmentCover, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateAttachmentCoverByIdCard(Async)");
        }

        // verify the required parameter 'cardsIdAttachmentCover' is set
        if (cardsIdAttachmentCover == null) {
            throw new ApiException("Missing the required parameter 'cardsIdAttachmentCover' when calling updateAttachmentCoverByIdCard(Async)");
        }

        return updateAttachmentCoverByIdCardCall(idCard, cardsIdAttachmentCover, _callback);

    }


    private ApiResponse<Void> updateAttachmentCoverByIdCardWithHttpInfo(String idCard, CardsIdAttachmentCover cardsIdAttachmentCover) throws ApiException {
        okhttp3.Call localVarCall = updateAttachmentCoverByIdCardValidateBeforeCall(idCard, cardsIdAttachmentCover, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateAttachmentCoverByIdCardAsync(String idCard, CardsIdAttachmentCover cardsIdAttachmentCover, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttachmentCoverByIdCardValidateBeforeCall(idCard, cardsIdAttachmentCover, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateAttachmentCoverByIdCardRequestBuilder {
        private final String idCard;
        private String value;

        private UpdateAttachmentCoverByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set value
         * @param value Id of the image attachment of this card to use as its cover, or null for no cover (optional)
         * @return UpdateAttachmentCoverByIdCardRequestBuilder
         */
        public UpdateAttachmentCoverByIdCardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateAttachmentCoverByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsIdAttachmentCover cardsIdAttachmentCover = buildBodyParams();
            return updateAttachmentCoverByIdCardCall(idCard, cardsIdAttachmentCover, _callback);
        }

        private CardsIdAttachmentCover buildBodyParams() {
            CardsIdAttachmentCover cardsIdAttachmentCover = new CardsIdAttachmentCover();
            cardsIdAttachmentCover.value(this.value);
            return cardsIdAttachmentCover;
        }

        /**
         * Execute updateAttachmentCoverByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsIdAttachmentCover cardsIdAttachmentCover = buildBodyParams();
            updateAttachmentCoverByIdCardWithHttpInfo(idCard, cardsIdAttachmentCover);
        }

        /**
         * Execute updateAttachmentCoverByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsIdAttachmentCover cardsIdAttachmentCover = buildBodyParams();
            return updateAttachmentCoverByIdCardWithHttpInfo(idCard, cardsIdAttachmentCover);
        }

        /**
         * Execute updateAttachmentCoverByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsIdAttachmentCover cardsIdAttachmentCover = buildBodyParams();
            return updateAttachmentCoverByIdCardAsync(idCard, cardsIdAttachmentCover, _callback);
        }
    }

    /**
     * updateCardsIdAttachmentCoverByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsIdAttachmentCover Attributes of \&quot;Cards Id Attachment Cover\&quot; to be updated. (required)
     * @return UpdateAttachmentCoverByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAttachmentCoverByIdCardRequestBuilder updateAttachmentCoverByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new UpdateAttachmentCoverByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call updateBoardByIdCardCall(String idCard, CardsIdBoard cardsIdBoard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsIdBoard;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idBoard"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardByIdCardValidateBeforeCall(String idCard, CardsIdBoard cardsIdBoard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateBoardByIdCard(Async)");
        }

        // verify the required parameter 'cardsIdBoard' is set
        if (cardsIdBoard == null) {
            throw new ApiException("Missing the required parameter 'cardsIdBoard' when calling updateBoardByIdCard(Async)");
        }

        return updateBoardByIdCardCall(idCard, cardsIdBoard, _callback);

    }


    private ApiResponse<Void> updateBoardByIdCardWithHttpInfo(String idCard, CardsIdBoard cardsIdBoard) throws ApiException {
        okhttp3.Call localVarCall = updateBoardByIdCardValidateBeforeCall(idCard, cardsIdBoard, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateBoardByIdCardAsync(String idCard, CardsIdBoard cardsIdBoard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardByIdCardValidateBeforeCall(idCard, cardsIdBoard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateBoardByIdCardRequestBuilder {
        private final String idCard;
        private String idList;
        private String value;

        private UpdateBoardByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set idList
         * @param idList id of the list that the card should be moved to on the new board (optional)
         * @return UpdateBoardByIdCardRequestBuilder
         */
        public UpdateBoardByIdCardRequestBuilder idList(String idList) {
            this.idList = idList;
            return this;
        }
        
        /**
         * Set value
         * @param value id of the board the card should be moved to (optional)
         * @return UpdateBoardByIdCardRequestBuilder
         */
        public UpdateBoardByIdCardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateBoardByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsIdBoard cardsIdBoard = buildBodyParams();
            return updateBoardByIdCardCall(idCard, cardsIdBoard, _callback);
        }

        private CardsIdBoard buildBodyParams() {
            CardsIdBoard cardsIdBoard = new CardsIdBoard();
            cardsIdBoard.idList(this.idList);
            cardsIdBoard.value(this.value);
            return cardsIdBoard;
        }

        /**
         * Execute updateBoardByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsIdBoard cardsIdBoard = buildBodyParams();
            updateBoardByIdCardWithHttpInfo(idCard, cardsIdBoard);
        }

        /**
         * Execute updateBoardByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsIdBoard cardsIdBoard = buildBodyParams();
            return updateBoardByIdCardWithHttpInfo(idCard, cardsIdBoard);
        }

        /**
         * Execute updateBoardByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsIdBoard cardsIdBoard = buildBodyParams();
            return updateBoardByIdCardAsync(idCard, cardsIdBoard, _callback);
        }
    }

    /**
     * updateCardsIdBoardByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsIdBoard Attributes of \&quot;Cards Id Board\&quot; to be updated. (required)
     * @return UpdateBoardByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBoardByIdCardRequestBuilder updateBoardByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new UpdateBoardByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call updateByIdCardCall(String idCard, Cards cards, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cards;

        // create path and map variables
        String localVarPath = "/cards/{idCard}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdCardValidateBeforeCall(String idCard, Cards cards, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateByIdCard(Async)");
        }

        // verify the required parameter 'cards' is set
        if (cards == null) {
            throw new ApiException("Missing the required parameter 'cards' when calling updateByIdCard(Async)");
        }

        return updateByIdCardCall(idCard, cards, _callback);

    }


    private ApiResponse<Void> updateByIdCardWithHttpInfo(String idCard, Cards cards) throws ApiException {
        okhttp3.Call localVarCall = updateByIdCardValidateBeforeCall(idCard, cards, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdCardAsync(String idCard, Cards cards, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdCardValidateBeforeCall(idCard, cards, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdCardRequestBuilder {
        private final String idCard;
        private String closed;
        private String desc;
        private String due;
        private String fileSource;
        private String idAttachmentCover;
        private String idBoard;
        private String idCardSource;
        private String idLabels;
        private String idList;
        private String idMembers;
        private String keepFromSource;
        private String labels;
        private String name;
        private String pos;
        private String subscribed;
        private String urlSource;

        private UpdateByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set closed
         * @param closed  true or false (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder closed(String closed) {
            this.closed = closed;
            return this;
        }
        
        /**
         * Set desc
         * @param desc a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder desc(String desc) {
            this.desc = desc;
            return this;
        }
        
        /**
         * Set due
         * @param due A date, or null (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder due(String due) {
            this.due = due;
            return this;
        }
        
        /**
         * Set fileSource
         * @param fileSource A file (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder fileSource(String fileSource) {
            this.fileSource = fileSource;
            return this;
        }
        
        /**
         * Set idAttachmentCover
         * @param idAttachmentCover Id of the image attachment of this card to use as its cover, or null for no cover (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder idAttachmentCover(String idAttachmentCover) {
            this.idAttachmentCover = idAttachmentCover;
            return this;
        }
        
        /**
         * Set idBoard
         * @param idBoard id of the board the card should be moved to (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Set idCardSource
         * @param idCardSource The id of the card to copy into a new card. (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder idCardSource(String idCardSource) {
            this.idCardSource = idCardSource;
            return this;
        }
        
        /**
         * Set idLabels
         * @param idLabels A comma-separated list of objectIds, 24-character hex strings (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder idLabels(String idLabels) {
            this.idLabels = idLabels;
            return this;
        }
        
        /**
         * Set idList
         * @param idList id of the list that the card should be added to (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder idList(String idList) {
            this.idList = idList;
            return this;
        }
        
        /**
         * Set idMembers
         * @param idMembers A comma-separated list of objectIds, 24-character hex strings (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder idMembers(String idMembers) {
            this.idMembers = idMembers;
            return this;
        }
        
        /**
         * Set keepFromSource
         * @param keepFromSource Properties of the card to copy over from the source. (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder keepFromSource(String keepFromSource) {
            this.keepFromSource = keepFromSource;
            return this;
        }
        
        /**
         * Set labels
         * @param labels all or a comma-separated list of: blue, green, orange, purple, red or yellow (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder labels(String labels) {
            this.labels = labels;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the new card.  It isn&amp;#39;t required if the name is being copied from provided by a URL, file or card that is being copied. (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Set subscribed
         * @param subscribed  true or false (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder subscribed(String subscribed) {
            this.subscribed = subscribed;
            return this;
        }
        
        /**
         * Set urlSource
         * @param urlSource A URL starting with http:// or https:// or null (optional)
         * @return UpdateByIdCardRequestBuilder
         */
        public UpdateByIdCardRequestBuilder urlSource(String urlSource) {
            this.urlSource = urlSource;
            return this;
        }
        
        /**
         * Build call for updateByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Cards cards = buildBodyParams();
            return updateByIdCardCall(idCard, cards, _callback);
        }

        private Cards buildBodyParams() {
            Cards cards = new Cards();
            cards.closed(this.closed);
            cards.desc(this.desc);
            cards.due(this.due);
            cards.fileSource(this.fileSource);
            cards.idAttachmentCover(this.idAttachmentCover);
            cards.idBoard(this.idBoard);
            cards.idCardSource(this.idCardSource);
            cards.idLabels(this.idLabels);
            cards.idList(this.idList);
            cards.idMembers(this.idMembers);
            cards.keepFromSource(this.keepFromSource);
            cards.labels(this.labels);
            cards.name(this.name);
            cards.pos(this.pos);
            cards.subscribed(this.subscribed);
            cards.urlSource(this.urlSource);
            return cards;
        }

        /**
         * Execute updateByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Cards cards = buildBodyParams();
            updateByIdCardWithHttpInfo(idCard, cards);
        }

        /**
         * Execute updateByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Cards cards = buildBodyParams();
            return updateByIdCardWithHttpInfo(idCard, cards);
        }

        /**
         * Execute updateByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Cards cards = buildBodyParams();
            return updateByIdCardAsync(idCard, cards, _callback);
        }
    }

    /**
     * updateCardsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cards Attributes of \&quot;Cards\&quot; to be updated. (required)
     * @return UpdateByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdCardRequestBuilder updateByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new UpdateByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call updateCheckItemPosByIdCall(String idCard, String idChecklist, String idCheckItem, CardsChecklistCheckItemPos cardsChecklistCheckItemPos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsChecklistCheckItemPos;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/pos"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCheckItemPosByIdValidateBeforeCall(String idCard, String idChecklist, String idCheckItem, CardsChecklistCheckItemPos cardsChecklistCheckItemPos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCheckItemPosById(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling updateCheckItemPosById(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling updateCheckItemPosById(Async)");
        }

        // verify the required parameter 'cardsChecklistCheckItemPos' is set
        if (cardsChecklistCheckItemPos == null) {
            throw new ApiException("Missing the required parameter 'cardsChecklistCheckItemPos' when calling updateCheckItemPosById(Async)");
        }

        return updateCheckItemPosByIdCall(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemPos, _callback);

    }


    private ApiResponse<Void> updateCheckItemPosByIdWithHttpInfo(String idCard, String idChecklist, String idCheckItem, CardsChecklistCheckItemPos cardsChecklistCheckItemPos) throws ApiException {
        okhttp3.Call localVarCall = updateCheckItemPosByIdValidateBeforeCall(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemPos, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateCheckItemPosByIdAsync(String idCard, String idChecklist, String idCheckItem, CardsChecklistCheckItemPos cardsChecklistCheckItemPos, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCheckItemPosByIdValidateBeforeCall(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemPos, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateCheckItemPosByIdRequestBuilder {
        private final String idCard;
        private final String idChecklist;
        private final String idCheckItem;
        private String value;

        private UpdateCheckItemPosByIdRequestBuilder(String idCard, String idChecklist, String idCheckItem) {
            this.idCard = idCard;
            this.idChecklist = idChecklist;
            this.idCheckItem = idCheckItem;
        }

        /**
         * Set value
         * @param value A position. top , bottom , or a positive number. (optional)
         * @return UpdateCheckItemPosByIdRequestBuilder
         */
        public UpdateCheckItemPosByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateCheckItemPosById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsChecklistCheckItemPos cardsChecklistCheckItemPos = buildBodyParams();
            return updateCheckItemPosByIdCall(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemPos, _callback);
        }

        private CardsChecklistCheckItemPos buildBodyParams() {
            CardsChecklistCheckItemPos cardsChecklistCheckItemPos = new CardsChecklistCheckItemPos();
            cardsChecklistCheckItemPos.value(this.value);
            return cardsChecklistCheckItemPos;
        }

        /**
         * Execute updateCheckItemPosById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsChecklistCheckItemPos cardsChecklistCheckItemPos = buildBodyParams();
            updateCheckItemPosByIdWithHttpInfo(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemPos);
        }

        /**
         * Execute updateCheckItemPosById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsChecklistCheckItemPos cardsChecklistCheckItemPos = buildBodyParams();
            return updateCheckItemPosByIdWithHttpInfo(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemPos);
        }

        /**
         * Execute updateCheckItemPosById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsChecklistCheckItemPos cardsChecklistCheckItemPos = buildBodyParams();
            return updateCheckItemPosByIdAsync(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemPos, _callback);
        }
    }

    /**
     * updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param cardsChecklistCheckItemPos Attributes of \&quot;Cards Checklist Check Item Pos\&quot; to be updated. (required)
     * @return UpdateCheckItemPosByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCheckItemPosByIdRequestBuilder updateCheckItemPosById(String idCard, String idChecklist, String idCheckItem) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        if (idCheckItem == null) throw new IllegalArgumentException("\"idCheckItem\" is required but got null");
            

        return new UpdateCheckItemPosByIdRequestBuilder(idCard, idChecklist, idCheckItem);
    }
    private okhttp3.Call updateChecklistCheckItemCall(String idCard, String idChecklistCurrent, String idCheckItem, CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsChecklistIdChecklistCurrentCheckItem;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklistCurrent}/checkItem/{idCheckItem}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklistCurrent" + "}", localVarApiClient.escapeString(idChecklistCurrent.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChecklistCheckItemValidateBeforeCall(String idCard, String idChecklistCurrent, String idCheckItem, CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateChecklistCheckItem(Async)");
        }

        // verify the required parameter 'idChecklistCurrent' is set
        if (idChecklistCurrent == null) {
            throw new ApiException("Missing the required parameter 'idChecklistCurrent' when calling updateChecklistCheckItem(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling updateChecklistCheckItem(Async)");
        }

        // verify the required parameter 'cardsChecklistIdChecklistCurrentCheckItem' is set
        if (cardsChecklistIdChecklistCurrentCheckItem == null) {
            throw new ApiException("Missing the required parameter 'cardsChecklistIdChecklistCurrentCheckItem' when calling updateChecklistCheckItem(Async)");
        }

        return updateChecklistCheckItemCall(idCard, idChecklistCurrent, idCheckItem, cardsChecklistIdChecklistCurrentCheckItem, _callback);

    }


    private ApiResponse<Void> updateChecklistCheckItemWithHttpInfo(String idCard, String idChecklistCurrent, String idCheckItem, CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem) throws ApiException {
        okhttp3.Call localVarCall = updateChecklistCheckItemValidateBeforeCall(idCard, idChecklistCurrent, idCheckItem, cardsChecklistIdChecklistCurrentCheckItem, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateChecklistCheckItemAsync(String idCard, String idChecklistCurrent, String idCheckItem, CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChecklistCheckItemValidateBeforeCall(idCard, idChecklistCurrent, idCheckItem, cardsChecklistIdChecklistCurrentCheckItem, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateChecklistCheckItemRequestBuilder {
        private final String idCard;
        private final String idChecklistCurrent;
        private final String idCheckItem;
        private String idChecklist;
        private String name;
        private String pos;
        private String state;

        private UpdateChecklistCheckItemRequestBuilder(String idCard, String idChecklistCurrent, String idCheckItem) {
            this.idCard = idCard;
            this.idChecklistCurrent = idChecklistCurrent;
            this.idCheckItem = idCheckItem;
        }

        /**
         * Set idChecklist
         * @param idChecklist An id, or null (optional)
         * @return UpdateChecklistCheckItemRequestBuilder
         */
        public UpdateChecklistCheckItemRequestBuilder idChecklist(String idChecklist) {
            this.idChecklist = idChecklist;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 1 to 16384 (optional)
         * @return UpdateChecklistCheckItemRequestBuilder
         */
        public UpdateChecklistCheckItemRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return UpdateChecklistCheckItemRequestBuilder
         */
        public UpdateChecklistCheckItemRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Set state
         * @param state One of: complete, false, incomplete or true (optional)
         * @return UpdateChecklistCheckItemRequestBuilder
         */
        public UpdateChecklistCheckItemRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Build call for updateChecklistCheckItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem = buildBodyParams();
            return updateChecklistCheckItemCall(idCard, idChecklistCurrent, idCheckItem, cardsChecklistIdChecklistCurrentCheckItem, _callback);
        }

        private CardsChecklistIdChecklistCurrentCheckItem buildBodyParams() {
            CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem = new CardsChecklistIdChecklistCurrentCheckItem();
            cardsChecklistIdChecklistCurrentCheckItem.idChecklist(this.idChecklist);
            cardsChecklistIdChecklistCurrentCheckItem.name(this.name);
            cardsChecklistIdChecklistCurrentCheckItem.pos(this.pos);
            cardsChecklistIdChecklistCurrentCheckItem.state(this.state);
            return cardsChecklistIdChecklistCurrentCheckItem;
        }

        /**
         * Execute updateChecklistCheckItem request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem = buildBodyParams();
            updateChecklistCheckItemWithHttpInfo(idCard, idChecklistCurrent, idCheckItem, cardsChecklistIdChecklistCurrentCheckItem);
        }

        /**
         * Execute updateChecklistCheckItem request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem = buildBodyParams();
            return updateChecklistCheckItemWithHttpInfo(idCard, idChecklistCurrent, idCheckItem, cardsChecklistIdChecklistCurrentCheckItem);
        }

        /**
         * Execute updateChecklistCheckItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem = buildBodyParams();
            return updateChecklistCheckItemAsync(idCard, idChecklistCurrent, idCheckItem, cardsChecklistIdChecklistCurrentCheckItem, _callback);
        }
    }

    /**
     * updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklistCurrent idChecklistCurrent (required)
     * @param idCheckItem idCheckItem (required)
     * @param cardsChecklistIdChecklistCurrentCheckItem Attributes of \&quot;Cards Checklist Id Checklist Current Check Item\&quot; to be updated. (required)
     * @return UpdateChecklistCheckItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChecklistCheckItemRequestBuilder updateChecklistCheckItem(String idCard, String idChecklistCurrent, String idCheckItem) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idChecklistCurrent == null) throw new IllegalArgumentException("\"idChecklistCurrent\" is required but got null");
            

        if (idCheckItem == null) throw new IllegalArgumentException("\"idCheckItem\" is required but got null");
            

        return new UpdateChecklistCheckItemRequestBuilder(idCard, idChecklistCurrent, idCheckItem);
    }
    private okhttp3.Call updateChecklistCheckItemNameByIdCall(String idCard, String idChecklist, String idCheckItem, CardsChecklistCheckItemName cardsChecklistCheckItemName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsChecklistCheckItemName;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/name"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChecklistCheckItemNameByIdValidateBeforeCall(String idCard, String idChecklist, String idCheckItem, CardsChecklistCheckItemName cardsChecklistCheckItemName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateChecklistCheckItemNameById(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling updateChecklistCheckItemNameById(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling updateChecklistCheckItemNameById(Async)");
        }

        // verify the required parameter 'cardsChecklistCheckItemName' is set
        if (cardsChecklistCheckItemName == null) {
            throw new ApiException("Missing the required parameter 'cardsChecklistCheckItemName' when calling updateChecklistCheckItemNameById(Async)");
        }

        return updateChecklistCheckItemNameByIdCall(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemName, _callback);

    }


    private ApiResponse<Void> updateChecklistCheckItemNameByIdWithHttpInfo(String idCard, String idChecklist, String idCheckItem, CardsChecklistCheckItemName cardsChecklistCheckItemName) throws ApiException {
        okhttp3.Call localVarCall = updateChecklistCheckItemNameByIdValidateBeforeCall(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateChecklistCheckItemNameByIdAsync(String idCard, String idChecklist, String idCheckItem, CardsChecklistCheckItemName cardsChecklistCheckItemName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChecklistCheckItemNameByIdValidateBeforeCall(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateChecklistCheckItemNameByIdRequestBuilder {
        private final String idCard;
        private final String idChecklist;
        private final String idCheckItem;
        private String value;

        private UpdateChecklistCheckItemNameByIdRequestBuilder(String idCard, String idChecklist, String idCheckItem) {
            this.idCard = idCard;
            this.idChecklist = idChecklist;
            this.idCheckItem = idCheckItem;
        }

        /**
         * Set value
         * @param value a string with a length from 1 to 16384 (optional)
         * @return UpdateChecklistCheckItemNameByIdRequestBuilder
         */
        public UpdateChecklistCheckItemNameByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateChecklistCheckItemNameById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsChecklistCheckItemName cardsChecklistCheckItemName = buildBodyParams();
            return updateChecklistCheckItemNameByIdCall(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemName, _callback);
        }

        private CardsChecklistCheckItemName buildBodyParams() {
            CardsChecklistCheckItemName cardsChecklistCheckItemName = new CardsChecklistCheckItemName();
            cardsChecklistCheckItemName.value(this.value);
            return cardsChecklistCheckItemName;
        }

        /**
         * Execute updateChecklistCheckItemNameById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsChecklistCheckItemName cardsChecklistCheckItemName = buildBodyParams();
            updateChecklistCheckItemNameByIdWithHttpInfo(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemName);
        }

        /**
         * Execute updateChecklistCheckItemNameById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsChecklistCheckItemName cardsChecklistCheckItemName = buildBodyParams();
            return updateChecklistCheckItemNameByIdWithHttpInfo(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemName);
        }

        /**
         * Execute updateChecklistCheckItemNameById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsChecklistCheckItemName cardsChecklistCheckItemName = buildBodyParams();
            return updateChecklistCheckItemNameByIdAsync(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemName, _callback);
        }
    }

    /**
     * updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param cardsChecklistCheckItemName Attributes of \&quot;Cards Checklist Check Item Name\&quot; to be updated. (required)
     * @return UpdateChecklistCheckItemNameByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChecklistCheckItemNameByIdRequestBuilder updateChecklistCheckItemNameById(String idCard, String idChecklist, String idCheckItem) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        if (idCheckItem == null) throw new IllegalArgumentException("\"idCheckItem\" is required but got null");
            

        return new UpdateChecklistCheckItemNameByIdRequestBuilder(idCard, idChecklist, idCheckItem);
    }
    private okhttp3.Call updateChecklistCheckItemStateCall(String idCard, String idChecklist, String idCheckItem, CardsChecklistCheckItemState cardsChecklistCheckItemState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsChecklistCheckItemState;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/state"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChecklistCheckItemStateValidateBeforeCall(String idCard, String idChecklist, String idCheckItem, CardsChecklistCheckItemState cardsChecklistCheckItemState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateChecklistCheckItemState(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling updateChecklistCheckItemState(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling updateChecklistCheckItemState(Async)");
        }

        // verify the required parameter 'cardsChecklistCheckItemState' is set
        if (cardsChecklistCheckItemState == null) {
            throw new ApiException("Missing the required parameter 'cardsChecklistCheckItemState' when calling updateChecklistCheckItemState(Async)");
        }

        return updateChecklistCheckItemStateCall(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemState, _callback);

    }


    private ApiResponse<Void> updateChecklistCheckItemStateWithHttpInfo(String idCard, String idChecklist, String idCheckItem, CardsChecklistCheckItemState cardsChecklistCheckItemState) throws ApiException {
        okhttp3.Call localVarCall = updateChecklistCheckItemStateValidateBeforeCall(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemState, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateChecklistCheckItemStateAsync(String idCard, String idChecklist, String idCheckItem, CardsChecklistCheckItemState cardsChecklistCheckItemState, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChecklistCheckItemStateValidateBeforeCall(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemState, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateChecklistCheckItemStateRequestBuilder {
        private final String idCard;
        private final String idChecklist;
        private final String idCheckItem;
        private String value;

        private UpdateChecklistCheckItemStateRequestBuilder(String idCard, String idChecklist, String idCheckItem) {
            this.idCard = idCard;
            this.idChecklist = idChecklist;
            this.idCheckItem = idCheckItem;
        }

        /**
         * Set value
         * @param value One of: complete, false, incomplete or true (optional)
         * @return UpdateChecklistCheckItemStateRequestBuilder
         */
        public UpdateChecklistCheckItemStateRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateChecklistCheckItemState
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsChecklistCheckItemState cardsChecklistCheckItemState = buildBodyParams();
            return updateChecklistCheckItemStateCall(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemState, _callback);
        }

        private CardsChecklistCheckItemState buildBodyParams() {
            CardsChecklistCheckItemState cardsChecklistCheckItemState = new CardsChecklistCheckItemState();
            cardsChecklistCheckItemState.value(this.value);
            return cardsChecklistCheckItemState;
        }

        /**
         * Execute updateChecklistCheckItemState request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsChecklistCheckItemState cardsChecklistCheckItemState = buildBodyParams();
            updateChecklistCheckItemStateWithHttpInfo(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemState);
        }

        /**
         * Execute updateChecklistCheckItemState request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsChecklistCheckItemState cardsChecklistCheckItemState = buildBodyParams();
            return updateChecklistCheckItemStateWithHttpInfo(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemState);
        }

        /**
         * Execute updateChecklistCheckItemState request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsChecklistCheckItemState cardsChecklistCheckItemState = buildBodyParams();
            return updateChecklistCheckItemStateAsync(idCard, idChecklist, idCheckItem, cardsChecklistCheckItemState, _callback);
        }
    }

    /**
     * updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param cardsChecklistCheckItemState Attributes of \&quot;Cards Checklist Check Item State\&quot; to be updated. (required)
     * @return UpdateChecklistCheckItemStateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChecklistCheckItemStateRequestBuilder updateChecklistCheckItemState(String idCard, String idChecklist, String idCheckItem) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idChecklist == null) throw new IllegalArgumentException("\"idChecklist\" is required but got null");
            

        if (idCheckItem == null) throw new IllegalArgumentException("\"idCheckItem\" is required but got null");
            

        return new UpdateChecklistCheckItemStateRequestBuilder(idCard, idChecklist, idCheckItem);
    }
    private okhttp3.Call updateClosedByIdCall(String idCard, CardsClosed cardsClosed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsClosed;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/closed"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClosedByIdValidateBeforeCall(String idCard, CardsClosed cardsClosed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateClosedById(Async)");
        }

        // verify the required parameter 'cardsClosed' is set
        if (cardsClosed == null) {
            throw new ApiException("Missing the required parameter 'cardsClosed' when calling updateClosedById(Async)");
        }

        return updateClosedByIdCall(idCard, cardsClosed, _callback);

    }


    private ApiResponse<Void> updateClosedByIdWithHttpInfo(String idCard, CardsClosed cardsClosed) throws ApiException {
        okhttp3.Call localVarCall = updateClosedByIdValidateBeforeCall(idCard, cardsClosed, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateClosedByIdAsync(String idCard, CardsClosed cardsClosed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClosedByIdValidateBeforeCall(idCard, cardsClosed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateClosedByIdRequestBuilder {
        private final String idCard;
        private String value;

        private UpdateClosedByIdRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateClosedByIdRequestBuilder
         */
        public UpdateClosedByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateClosedById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsClosed cardsClosed = buildBodyParams();
            return updateClosedByIdCall(idCard, cardsClosed, _callback);
        }

        private CardsClosed buildBodyParams() {
            CardsClosed cardsClosed = new CardsClosed();
            cardsClosed.value(this.value);
            return cardsClosed;
        }

        /**
         * Execute updateClosedById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsClosed cardsClosed = buildBodyParams();
            updateClosedByIdWithHttpInfo(idCard, cardsClosed);
        }

        /**
         * Execute updateClosedById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsClosed cardsClosed = buildBodyParams();
            return updateClosedByIdWithHttpInfo(idCard, cardsClosed);
        }

        /**
         * Execute updateClosedById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsClosed cardsClosed = buildBodyParams();
            return updateClosedByIdAsync(idCard, cardsClosed, _callback);
        }
    }

    /**
     * updateCardsClosedByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsClosed Attributes of \&quot;Cards Closed\&quot; to be updated. (required)
     * @return UpdateClosedByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateClosedByIdRequestBuilder updateClosedById(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new UpdateClosedByIdRequestBuilder(idCard);
    }
    private okhttp3.Call updateDescriptionByIdCardCall(String idCard, CardsDesc cardsDesc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsDesc;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/desc"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDescriptionByIdCardValidateBeforeCall(String idCard, CardsDesc cardsDesc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateDescriptionByIdCard(Async)");
        }

        // verify the required parameter 'cardsDesc' is set
        if (cardsDesc == null) {
            throw new ApiException("Missing the required parameter 'cardsDesc' when calling updateDescriptionByIdCard(Async)");
        }

        return updateDescriptionByIdCardCall(idCard, cardsDesc, _callback);

    }


    private ApiResponse<Void> updateDescriptionByIdCardWithHttpInfo(String idCard, CardsDesc cardsDesc) throws ApiException {
        okhttp3.Call localVarCall = updateDescriptionByIdCardValidateBeforeCall(idCard, cardsDesc, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDescriptionByIdCardAsync(String idCard, CardsDesc cardsDesc, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDescriptionByIdCardValidateBeforeCall(idCard, cardsDesc, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDescriptionByIdCardRequestBuilder {
        private final String idCard;
        private String value;

        private UpdateDescriptionByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateDescriptionByIdCardRequestBuilder
         */
        public UpdateDescriptionByIdCardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateDescriptionByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsDesc cardsDesc = buildBodyParams();
            return updateDescriptionByIdCardCall(idCard, cardsDesc, _callback);
        }

        private CardsDesc buildBodyParams() {
            CardsDesc cardsDesc = new CardsDesc();
            cardsDesc.value(this.value);
            return cardsDesc;
        }

        /**
         * Execute updateDescriptionByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsDesc cardsDesc = buildBodyParams();
            updateDescriptionByIdCardWithHttpInfo(idCard, cardsDesc);
        }

        /**
         * Execute updateDescriptionByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsDesc cardsDesc = buildBodyParams();
            return updateDescriptionByIdCardWithHttpInfo(idCard, cardsDesc);
        }

        /**
         * Execute updateDescriptionByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsDesc cardsDesc = buildBodyParams();
            return updateDescriptionByIdCardAsync(idCard, cardsDesc, _callback);
        }
    }

    /**
     * updateCardsDescByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsDesc Attributes of \&quot;Cards Desc\&quot; to be updated. (required)
     * @return UpdateDescriptionByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDescriptionByIdCardRequestBuilder updateDescriptionByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new UpdateDescriptionByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call updateDueByIdCall(String idCard, CardsDue cardsDue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsDue;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/due"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDueByIdValidateBeforeCall(String idCard, CardsDue cardsDue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateDueById(Async)");
        }

        // verify the required parameter 'cardsDue' is set
        if (cardsDue == null) {
            throw new ApiException("Missing the required parameter 'cardsDue' when calling updateDueById(Async)");
        }

        return updateDueByIdCall(idCard, cardsDue, _callback);

    }


    private ApiResponse<Void> updateDueByIdWithHttpInfo(String idCard, CardsDue cardsDue) throws ApiException {
        okhttp3.Call localVarCall = updateDueByIdValidateBeforeCall(idCard, cardsDue, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDueByIdAsync(String idCard, CardsDue cardsDue, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDueByIdValidateBeforeCall(idCard, cardsDue, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDueByIdRequestBuilder {
        private final String idCard;
        private String value;

        private UpdateDueByIdRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set value
         * @param value A date, or null (optional)
         * @return UpdateDueByIdRequestBuilder
         */
        public UpdateDueByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateDueById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsDue cardsDue = buildBodyParams();
            return updateDueByIdCall(idCard, cardsDue, _callback);
        }

        private CardsDue buildBodyParams() {
            CardsDue cardsDue = new CardsDue();
            cardsDue.value(this.value);
            return cardsDue;
        }

        /**
         * Execute updateDueById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsDue cardsDue = buildBodyParams();
            updateDueByIdWithHttpInfo(idCard, cardsDue);
        }

        /**
         * Execute updateDueById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsDue cardsDue = buildBodyParams();
            return updateDueByIdWithHttpInfo(idCard, cardsDue);
        }

        /**
         * Execute updateDueById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsDue cardsDue = buildBodyParams();
            return updateDueByIdAsync(idCard, cardsDue, _callback);
        }
    }

    /**
     * updateCardsDueByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsDue Attributes of \&quot;Cards Due\&quot; to be updated. (required)
     * @return UpdateDueByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDueByIdRequestBuilder updateDueById(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new UpdateDueByIdRequestBuilder(idCard);
    }
    private okhttp3.Call updateIdListByIdCardCall(String idCard, CardsIdList cardsIdList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsIdList;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idList"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIdListByIdCardValidateBeforeCall(String idCard, CardsIdList cardsIdList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateIdListByIdCard(Async)");
        }

        // verify the required parameter 'cardsIdList' is set
        if (cardsIdList == null) {
            throw new ApiException("Missing the required parameter 'cardsIdList' when calling updateIdListByIdCard(Async)");
        }

        return updateIdListByIdCardCall(idCard, cardsIdList, _callback);

    }


    private ApiResponse<Void> updateIdListByIdCardWithHttpInfo(String idCard, CardsIdList cardsIdList) throws ApiException {
        okhttp3.Call localVarCall = updateIdListByIdCardValidateBeforeCall(idCard, cardsIdList, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateIdListByIdCardAsync(String idCard, CardsIdList cardsIdList, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIdListByIdCardValidateBeforeCall(idCard, cardsIdList, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateIdListByIdCardRequestBuilder {
        private final String idCard;
        private String value;

        private UpdateIdListByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set value
         * @param value id of the list the card should be moved to (optional)
         * @return UpdateIdListByIdCardRequestBuilder
         */
        public UpdateIdListByIdCardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateIdListByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsIdList cardsIdList = buildBodyParams();
            return updateIdListByIdCardCall(idCard, cardsIdList, _callback);
        }

        private CardsIdList buildBodyParams() {
            CardsIdList cardsIdList = new CardsIdList();
            cardsIdList.value(this.value);
            return cardsIdList;
        }

        /**
         * Execute updateIdListByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsIdList cardsIdList = buildBodyParams();
            updateIdListByIdCardWithHttpInfo(idCard, cardsIdList);
        }

        /**
         * Execute updateIdListByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsIdList cardsIdList = buildBodyParams();
            return updateIdListByIdCardWithHttpInfo(idCard, cardsIdList);
        }

        /**
         * Execute updateIdListByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsIdList cardsIdList = buildBodyParams();
            return updateIdListByIdCardAsync(idCard, cardsIdList, _callback);
        }
    }

    /**
     * updateCardsIdListByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsIdList Attributes of \&quot;Cards Id List\&quot; to be updated. (required)
     * @return UpdateIdListByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateIdListByIdCardRequestBuilder updateIdListByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new UpdateIdListByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call updateIdMembersCall(String idCard, CardsIdMembers cardsIdMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsIdMembers;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idMembers"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIdMembersValidateBeforeCall(String idCard, CardsIdMembers cardsIdMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateIdMembers(Async)");
        }

        // verify the required parameter 'cardsIdMembers' is set
        if (cardsIdMembers == null) {
            throw new ApiException("Missing the required parameter 'cardsIdMembers' when calling updateIdMembers(Async)");
        }

        return updateIdMembersCall(idCard, cardsIdMembers, _callback);

    }


    private ApiResponse<Void> updateIdMembersWithHttpInfo(String idCard, CardsIdMembers cardsIdMembers) throws ApiException {
        okhttp3.Call localVarCall = updateIdMembersValidateBeforeCall(idCard, cardsIdMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateIdMembersAsync(String idCard, CardsIdMembers cardsIdMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIdMembersValidateBeforeCall(idCard, cardsIdMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateIdMembersRequestBuilder {
        private final String idCard;
        private String value;

        private UpdateIdMembersRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set value
         * @param value The id of the member to add to the card (optional)
         * @return UpdateIdMembersRequestBuilder
         */
        public UpdateIdMembersRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateIdMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsIdMembers cardsIdMembers = buildBodyParams();
            return updateIdMembersCall(idCard, cardsIdMembers, _callback);
        }

        private CardsIdMembers buildBodyParams() {
            CardsIdMembers cardsIdMembers = new CardsIdMembers();
            cardsIdMembers.value(this.value);
            return cardsIdMembers;
        }

        /**
         * Execute updateIdMembers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsIdMembers cardsIdMembers = buildBodyParams();
            updateIdMembersWithHttpInfo(idCard, cardsIdMembers);
        }

        /**
         * Execute updateIdMembers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsIdMembers cardsIdMembers = buildBodyParams();
            return updateIdMembersWithHttpInfo(idCard, cardsIdMembers);
        }

        /**
         * Execute updateIdMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsIdMembers cardsIdMembers = buildBodyParams();
            return updateIdMembersAsync(idCard, cardsIdMembers, _callback);
        }
    }

    /**
     * updateCardsIdMembersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsIdMembers Attributes of \&quot;Cards Id Members\&quot; to be updated. (required)
     * @return UpdateIdMembersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateIdMembersRequestBuilder updateIdMembers(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new UpdateIdMembersRequestBuilder(idCard);
    }
    private okhttp3.Call updateLabelsCall(String idCard, CardsLabels cardsLabels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsLabels;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/labels"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLabelsValidateBeforeCall(String idCard, CardsLabels cardsLabels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateLabels(Async)");
        }

        // verify the required parameter 'cardsLabels' is set
        if (cardsLabels == null) {
            throw new ApiException("Missing the required parameter 'cardsLabels' when calling updateLabels(Async)");
        }

        return updateLabelsCall(idCard, cardsLabels, _callback);

    }


    private ApiResponse<Void> updateLabelsWithHttpInfo(String idCard, CardsLabels cardsLabels) throws ApiException {
        okhttp3.Call localVarCall = updateLabelsValidateBeforeCall(idCard, cardsLabels, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLabelsAsync(String idCard, CardsLabels cardsLabels, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLabelsValidateBeforeCall(idCard, cardsLabels, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLabelsRequestBuilder {
        private final String idCard;
        private String color;
        private String name;
        private String value;

        private UpdateLabelsRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set color
         * @param color A valid label color or null (optional)
         * @return UpdateLabelsRequestBuilder
         */
        public UpdateLabelsRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 0 to 16384 (optional)
         * @return UpdateLabelsRequestBuilder
         */
        public UpdateLabelsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set value
         * @param value all or a comma-separated list of: blue, green, orange, purple, red or yellow (optional)
         * @return UpdateLabelsRequestBuilder
         */
        public UpdateLabelsRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateLabels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsLabels cardsLabels = buildBodyParams();
            return updateLabelsCall(idCard, cardsLabels, _callback);
        }

        private CardsLabels buildBodyParams() {
            CardsLabels cardsLabels = new CardsLabels();
            cardsLabels.color(this.color);
            cardsLabels.name(this.name);
            cardsLabels.value(this.value);
            return cardsLabels;
        }

        /**
         * Execute updateLabels request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsLabels cardsLabels = buildBodyParams();
            updateLabelsWithHttpInfo(idCard, cardsLabels);
        }

        /**
         * Execute updateLabels request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsLabels cardsLabels = buildBodyParams();
            return updateLabelsWithHttpInfo(idCard, cardsLabels);
        }

        /**
         * Execute updateLabels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsLabels cardsLabels = buildBodyParams();
            return updateLabelsAsync(idCard, cardsLabels, _callback);
        }
    }

    /**
     * updateCardsLabelsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsLabels Attributes of \&quot;Cards Labels\&quot; to be updated. (required)
     * @return UpdateLabelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLabelsRequestBuilder updateLabels(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new UpdateLabelsRequestBuilder(idCard);
    }
    private okhttp3.Call updateNameByIdCall(String idCard, CardsName cardsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsName;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/name"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNameByIdValidateBeforeCall(String idCard, CardsName cardsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateNameById(Async)");
        }

        // verify the required parameter 'cardsName' is set
        if (cardsName == null) {
            throw new ApiException("Missing the required parameter 'cardsName' when calling updateNameById(Async)");
        }

        return updateNameByIdCall(idCard, cardsName, _callback);

    }


    private ApiResponse<Void> updateNameByIdWithHttpInfo(String idCard, CardsName cardsName) throws ApiException {
        okhttp3.Call localVarCall = updateNameByIdValidateBeforeCall(idCard, cardsName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateNameByIdAsync(String idCard, CardsName cardsName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNameByIdValidateBeforeCall(idCard, cardsName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateNameByIdRequestBuilder {
        private final String idCard;
        private String value;

        private UpdateNameByIdRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set value
         * @param value a string with a length from 1 to 16384 (optional)
         * @return UpdateNameByIdRequestBuilder
         */
        public UpdateNameByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateNameById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsName cardsName = buildBodyParams();
            return updateNameByIdCall(idCard, cardsName, _callback);
        }

        private CardsName buildBodyParams() {
            CardsName cardsName = new CardsName();
            cardsName.value(this.value);
            return cardsName;
        }

        /**
         * Execute updateNameById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsName cardsName = buildBodyParams();
            updateNameByIdWithHttpInfo(idCard, cardsName);
        }

        /**
         * Execute updateNameById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsName cardsName = buildBodyParams();
            return updateNameByIdWithHttpInfo(idCard, cardsName);
        }

        /**
         * Execute updateNameById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsName cardsName = buildBodyParams();
            return updateNameByIdAsync(idCard, cardsName, _callback);
        }
    }

    /**
     * updateCardsNameByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsName Attributes of \&quot;Cards Name\&quot; to be updated. (required)
     * @return UpdateNameByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateNameByIdRequestBuilder updateNameById(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new UpdateNameByIdRequestBuilder(idCard);
    }
    private okhttp3.Call updatePosByIdCardCall(String idCard, CardsPos cardsPos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsPos;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/pos"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePosByIdCardValidateBeforeCall(String idCard, CardsPos cardsPos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updatePosByIdCard(Async)");
        }

        // verify the required parameter 'cardsPos' is set
        if (cardsPos == null) {
            throw new ApiException("Missing the required parameter 'cardsPos' when calling updatePosByIdCard(Async)");
        }

        return updatePosByIdCardCall(idCard, cardsPos, _callback);

    }


    private ApiResponse<Void> updatePosByIdCardWithHttpInfo(String idCard, CardsPos cardsPos) throws ApiException {
        okhttp3.Call localVarCall = updatePosByIdCardValidateBeforeCall(idCard, cardsPos, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePosByIdCardAsync(String idCard, CardsPos cardsPos, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePosByIdCardValidateBeforeCall(idCard, cardsPos, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePosByIdCardRequestBuilder {
        private final String idCard;
        private String value;

        private UpdatePosByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set value
         * @param value A position. top , bottom , or a positive number. (optional)
         * @return UpdatePosByIdCardRequestBuilder
         */
        public UpdatePosByIdCardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePosByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsPos cardsPos = buildBodyParams();
            return updatePosByIdCardCall(idCard, cardsPos, _callback);
        }

        private CardsPos buildBodyParams() {
            CardsPos cardsPos = new CardsPos();
            cardsPos.value(this.value);
            return cardsPos;
        }

        /**
         * Execute updatePosByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsPos cardsPos = buildBodyParams();
            updatePosByIdCardWithHttpInfo(idCard, cardsPos);
        }

        /**
         * Execute updatePosByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsPos cardsPos = buildBodyParams();
            return updatePosByIdCardWithHttpInfo(idCard, cardsPos);
        }

        /**
         * Execute updatePosByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsPos cardsPos = buildBodyParams();
            return updatePosByIdCardAsync(idCard, cardsPos, _callback);
        }
    }

    /**
     * updateCardsPosByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsPos Attributes of \&quot;Cards Pos\&quot; to be updated. (required)
     * @return UpdatePosByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePosByIdCardRequestBuilder updatePosByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new UpdatePosByIdCardRequestBuilder(idCard);
    }
    private okhttp3.Call updateStickersByIdCardByIdStickerCall(String idCard, String idSticker, CardsStickers cardsStickers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsStickers;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/stickers/{idSticker}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idSticker" + "}", localVarApiClient.escapeString(idSticker.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStickersByIdCardByIdStickerValidateBeforeCall(String idCard, String idSticker, CardsStickers cardsStickers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateStickersByIdCardByIdSticker(Async)");
        }

        // verify the required parameter 'idSticker' is set
        if (idSticker == null) {
            throw new ApiException("Missing the required parameter 'idSticker' when calling updateStickersByIdCardByIdSticker(Async)");
        }

        // verify the required parameter 'cardsStickers' is set
        if (cardsStickers == null) {
            throw new ApiException("Missing the required parameter 'cardsStickers' when calling updateStickersByIdCardByIdSticker(Async)");
        }

        return updateStickersByIdCardByIdStickerCall(idCard, idSticker, cardsStickers, _callback);

    }


    private ApiResponse<Void> updateStickersByIdCardByIdStickerWithHttpInfo(String idCard, String idSticker, CardsStickers cardsStickers) throws ApiException {
        okhttp3.Call localVarCall = updateStickersByIdCardByIdStickerValidateBeforeCall(idCard, idSticker, cardsStickers, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateStickersByIdCardByIdStickerAsync(String idCard, String idSticker, CardsStickers cardsStickers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStickersByIdCardByIdStickerValidateBeforeCall(idCard, idSticker, cardsStickers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateStickersByIdCardByIdStickerRequestBuilder {
        private final String idCard;
        private final String idSticker;
        private String image;
        private String left;
        private String rotate;
        private String top;
        private String zIndex;

        private UpdateStickersByIdCardByIdStickerRequestBuilder(String idCard, String idSticker) {
            this.idCard = idCard;
            this.idSticker = idSticker;
        }

        /**
         * Set image
         * @param image a string with a length from 0 to 16384 (optional)
         * @return UpdateStickersByIdCardByIdStickerRequestBuilder
         */
        public UpdateStickersByIdCardByIdStickerRequestBuilder image(String image) {
            this.image = image;
            return this;
        }
        
        /**
         * Set left
         * @param left undefined (optional)
         * @return UpdateStickersByIdCardByIdStickerRequestBuilder
         */
        public UpdateStickersByIdCardByIdStickerRequestBuilder left(String left) {
            this.left = left;
            return this;
        }
        
        /**
         * Set rotate
         * @param rotate undefined (optional)
         * @return UpdateStickersByIdCardByIdStickerRequestBuilder
         */
        public UpdateStickersByIdCardByIdStickerRequestBuilder rotate(String rotate) {
            this.rotate = rotate;
            return this;
        }
        
        /**
         * Set top
         * @param top undefined (optional)
         * @return UpdateStickersByIdCardByIdStickerRequestBuilder
         */
        public UpdateStickersByIdCardByIdStickerRequestBuilder top(String top) {
            this.top = top;
            return this;
        }
        
        /**
         * Set zIndex
         * @param zIndex Valid Z values for stickers, must be an integer (optional)
         * @return UpdateStickersByIdCardByIdStickerRequestBuilder
         */
        public UpdateStickersByIdCardByIdStickerRequestBuilder zIndex(String zIndex) {
            this.zIndex = zIndex;
            return this;
        }
        
        /**
         * Build call for updateStickersByIdCardByIdSticker
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsStickers cardsStickers = buildBodyParams();
            return updateStickersByIdCardByIdStickerCall(idCard, idSticker, cardsStickers, _callback);
        }

        private CardsStickers buildBodyParams() {
            CardsStickers cardsStickers = new CardsStickers();
            cardsStickers.image(this.image);
            cardsStickers.left(this.left);
            cardsStickers.rotate(this.rotate);
            cardsStickers.top(this.top);
            cardsStickers.zIndex(this.zIndex);
            return cardsStickers;
        }

        /**
         * Execute updateStickersByIdCardByIdSticker request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsStickers cardsStickers = buildBodyParams();
            updateStickersByIdCardByIdStickerWithHttpInfo(idCard, idSticker, cardsStickers);
        }

        /**
         * Execute updateStickersByIdCardByIdSticker request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsStickers cardsStickers = buildBodyParams();
            return updateStickersByIdCardByIdStickerWithHttpInfo(idCard, idSticker, cardsStickers);
        }

        /**
         * Execute updateStickersByIdCardByIdSticker request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsStickers cardsStickers = buildBodyParams();
            return updateStickersByIdCardByIdStickerAsync(idCard, idSticker, cardsStickers, _callback);
        }
    }

    /**
     * updateCardsStickersByIdCardByIdSticker()
     * 
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param cardsStickers Attributes of \&quot;Cards Stickers\&quot; to be updated. (required)
     * @return UpdateStickersByIdCardByIdStickerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStickersByIdCardByIdStickerRequestBuilder updateStickersByIdCardByIdSticker(String idCard, String idSticker) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        if (idSticker == null) throw new IllegalArgumentException("\"idSticker\" is required but got null");
            

        return new UpdateStickersByIdCardByIdStickerRequestBuilder(idCard, idSticker);
    }
    private okhttp3.Call updateSubscribedByIdCardCall(String idCard, CardsSubscribed cardsSubscribed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsSubscribed;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/subscribed"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscribedByIdCardValidateBeforeCall(String idCard, CardsSubscribed cardsSubscribed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateSubscribedByIdCard(Async)");
        }

        // verify the required parameter 'cardsSubscribed' is set
        if (cardsSubscribed == null) {
            throw new ApiException("Missing the required parameter 'cardsSubscribed' when calling updateSubscribedByIdCard(Async)");
        }

        return updateSubscribedByIdCardCall(idCard, cardsSubscribed, _callback);

    }


    private ApiResponse<Void> updateSubscribedByIdCardWithHttpInfo(String idCard, CardsSubscribed cardsSubscribed) throws ApiException {
        okhttp3.Call localVarCall = updateSubscribedByIdCardValidateBeforeCall(idCard, cardsSubscribed, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSubscribedByIdCardAsync(String idCard, CardsSubscribed cardsSubscribed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscribedByIdCardValidateBeforeCall(idCard, cardsSubscribed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSubscribedByIdCardRequestBuilder {
        private final String idCard;
        private String value;

        private UpdateSubscribedByIdCardRequestBuilder(String idCard) {
            this.idCard = idCard;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateSubscribedByIdCardRequestBuilder
         */
        public UpdateSubscribedByIdCardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateSubscribedByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardsSubscribed cardsSubscribed = buildBodyParams();
            return updateSubscribedByIdCardCall(idCard, cardsSubscribed, _callback);
        }

        private CardsSubscribed buildBodyParams() {
            CardsSubscribed cardsSubscribed = new CardsSubscribed();
            cardsSubscribed.value(this.value);
            return cardsSubscribed;
        }

        /**
         * Execute updateSubscribedByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CardsSubscribed cardsSubscribed = buildBodyParams();
            updateSubscribedByIdCardWithHttpInfo(idCard, cardsSubscribed);
        }

        /**
         * Execute updateSubscribedByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CardsSubscribed cardsSubscribed = buildBodyParams();
            return updateSubscribedByIdCardWithHttpInfo(idCard, cardsSubscribed);
        }

        /**
         * Execute updateSubscribedByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CardsSubscribed cardsSubscribed = buildBodyParams();
            return updateSubscribedByIdCardAsync(idCard, cardsSubscribed, _callback);
        }
    }

    /**
     * updateCardsSubscribedByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param cardsSubscribed Attributes of \&quot;Cards Subscribed\&quot; to be updated. (required)
     * @return UpdateSubscribedByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSubscribedByIdCardRequestBuilder updateSubscribedByIdCard(String idCard) throws IllegalArgumentException {
        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new UpdateSubscribedByIdCardRequestBuilder(idCard);
    }
}
