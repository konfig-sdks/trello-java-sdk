/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Boards;
import com.konfigthis.client.model.BoardsChecklists;
import com.konfigthis.client.model.BoardsClosed;
import com.konfigthis.client.model.BoardsDesc;
import com.konfigthis.client.model.BoardsIdOrganization;
import com.konfigthis.client.model.BoardsLabels;
import com.konfigthis.client.model.BoardsLists;
import com.konfigthis.client.model.BoardsMembers;
import com.konfigthis.client.model.BoardsMemberships;
import com.konfigthis.client.model.BoardsName;
import com.konfigthis.client.model.BoardsPowerUps;
import com.konfigthis.client.model.BoardsSubscribed;
import com.konfigthis.client.model.LabelNamesBlue;
import com.konfigthis.client.model.LabelNamesGreen;
import com.konfigthis.client.model.LabelNamesOrange;
import com.konfigthis.client.model.LabelNamesPurple;
import com.konfigthis.client.model.LabelNamesRed;
import com.konfigthis.client.model.LabelNamesYellow;
import com.konfigthis.client.model.MyPrefsEmailPosition;
import com.konfigthis.client.model.MyPrefsIdEmailList;
import com.konfigthis.client.model.MyPrefsShowListGuide;
import com.konfigthis.client.model.MyPrefsShowSidebar;
import com.konfigthis.client.model.MyPrefsShowSidebarActivity;
import com.konfigthis.client.model.MyPrefsShowSidebarBoardActions;
import com.konfigthis.client.model.MyPrefsShowSidebarMembers;
import com.konfigthis.client.model.PrefsBackground;
import com.konfigthis.client.model.PrefsCalendarFeedEnabled;
import com.konfigthis.client.model.PrefsCardAging;
import com.konfigthis.client.model.PrefsCardCovers;
import com.konfigthis.client.model.PrefsComments;
import com.konfigthis.client.model.PrefsInvitations;
import com.konfigthis.client.model.PrefsPermissionLevel;
import com.konfigthis.client.model.PrefsSelfJoin;
import com.konfigthis.client.model.PrefsVoting;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BoardApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BoardApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BoardApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addChecklistsCall(String idBoard, BoardsChecklists boardsChecklists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsChecklists;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/checklists"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChecklistsValidateBeforeCall(String idBoard, BoardsChecklists boardsChecklists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling addChecklists(Async)");
        }

        // verify the required parameter 'boardsChecklists' is set
        if (boardsChecklists == null) {
            throw new ApiException("Missing the required parameter 'boardsChecklists' when calling addChecklists(Async)");
        }

        return addChecklistsCall(idBoard, boardsChecklists, _callback);

    }


    private ApiResponse<Void> addChecklistsWithHttpInfo(String idBoard, BoardsChecklists boardsChecklists) throws ApiException {
        okhttp3.Call localVarCall = addChecklistsValidateBeforeCall(idBoard, boardsChecklists, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addChecklistsAsync(String idBoard, BoardsChecklists boardsChecklists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChecklistsValidateBeforeCall(idBoard, boardsChecklists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddChecklistsRequestBuilder {
        private final String idBoard;
        private String name;

        private AddChecklistsRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set name
         * @param name a string with a length from 1 to 16384 (optional)
         * @return AddChecklistsRequestBuilder
         */
        public AddChecklistsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for addChecklists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BoardsChecklists boardsChecklists = buildBodyParams();
            return addChecklistsCall(idBoard, boardsChecklists, _callback);
        }

        private BoardsChecklists buildBodyParams() {
            BoardsChecklists boardsChecklists = new BoardsChecklists();
            boardsChecklists.name(this.name);
            return boardsChecklists;
        }

        /**
         * Execute addChecklists request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BoardsChecklists boardsChecklists = buildBodyParams();
            addChecklistsWithHttpInfo(idBoard, boardsChecklists);
        }

        /**
         * Execute addChecklists request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BoardsChecklists boardsChecklists = buildBodyParams();
            return addChecklistsWithHttpInfo(idBoard, boardsChecklists);
        }

        /**
         * Execute addChecklists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BoardsChecklists boardsChecklists = buildBodyParams();
            return addChecklistsAsync(idBoard, boardsChecklists, _callback);
        }
    }

    /**
     * addBoardsChecklistsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param boardsChecklists Attributes of \&quot;Boards Checklists\&quot; to be added. (required)
     * @return AddChecklistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddChecklistsRequestBuilder addChecklists(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new AddChecklistsRequestBuilder(idBoard);
    }
    private okhttp3.Call addLabelsByIdBoardCall(String idBoard, BoardsLabels boardsLabels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsLabels;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labels"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLabelsByIdBoardValidateBeforeCall(String idBoard, BoardsLabels boardsLabels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling addLabelsByIdBoard(Async)");
        }

        // verify the required parameter 'boardsLabels' is set
        if (boardsLabels == null) {
            throw new ApiException("Missing the required parameter 'boardsLabels' when calling addLabelsByIdBoard(Async)");
        }

        return addLabelsByIdBoardCall(idBoard, boardsLabels, _callback);

    }


    private ApiResponse<Void> addLabelsByIdBoardWithHttpInfo(String idBoard, BoardsLabels boardsLabels) throws ApiException {
        okhttp3.Call localVarCall = addLabelsByIdBoardValidateBeforeCall(idBoard, boardsLabels, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addLabelsByIdBoardAsync(String idBoard, BoardsLabels boardsLabels, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLabelsByIdBoardValidateBeforeCall(idBoard, boardsLabels, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddLabelsByIdBoardRequestBuilder {
        private final String idBoard;
        private String color;
        private String name;

        private AddLabelsByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set color
         * @param color A valid label color or null (optional)
         * @return AddLabelsByIdBoardRequestBuilder
         */
        public AddLabelsByIdBoardRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 0 to 16384 (optional)
         * @return AddLabelsByIdBoardRequestBuilder
         */
        public AddLabelsByIdBoardRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for addLabelsByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BoardsLabels boardsLabels = buildBodyParams();
            return addLabelsByIdBoardCall(idBoard, boardsLabels, _callback);
        }

        private BoardsLabels buildBodyParams() {
            BoardsLabels boardsLabels = new BoardsLabels();
            boardsLabels.color(this.color);
            boardsLabels.name(this.name);
            return boardsLabels;
        }

        /**
         * Execute addLabelsByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BoardsLabels boardsLabels = buildBodyParams();
            addLabelsByIdBoardWithHttpInfo(idBoard, boardsLabels);
        }

        /**
         * Execute addLabelsByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BoardsLabels boardsLabels = buildBodyParams();
            return addLabelsByIdBoardWithHttpInfo(idBoard, boardsLabels);
        }

        /**
         * Execute addLabelsByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BoardsLabels boardsLabels = buildBodyParams();
            return addLabelsByIdBoardAsync(idBoard, boardsLabels, _callback);
        }
    }

    /**
     * addBoardsLabelsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param boardsLabels Attributes of \&quot;Boards Labels\&quot; to be added. (required)
     * @return AddLabelsByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddLabelsByIdBoardRequestBuilder addLabelsByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new AddLabelsByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call addPowerUpsByIdBoardCall(String idBoard, BoardsPowerUps boardsPowerUps, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsPowerUps;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/powerUps"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPowerUpsByIdBoardValidateBeforeCall(String idBoard, BoardsPowerUps boardsPowerUps, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling addPowerUpsByIdBoard(Async)");
        }

        // verify the required parameter 'boardsPowerUps' is set
        if (boardsPowerUps == null) {
            throw new ApiException("Missing the required parameter 'boardsPowerUps' when calling addPowerUpsByIdBoard(Async)");
        }

        return addPowerUpsByIdBoardCall(idBoard, boardsPowerUps, _callback);

    }


    private ApiResponse<Void> addPowerUpsByIdBoardWithHttpInfo(String idBoard, BoardsPowerUps boardsPowerUps) throws ApiException {
        okhttp3.Call localVarCall = addPowerUpsByIdBoardValidateBeforeCall(idBoard, boardsPowerUps, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addPowerUpsByIdBoardAsync(String idBoard, BoardsPowerUps boardsPowerUps, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPowerUpsByIdBoardValidateBeforeCall(idBoard, boardsPowerUps, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddPowerUpsByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private AddPowerUpsByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value One of: calendar, cardAging, recap or voting (optional)
         * @return AddPowerUpsByIdBoardRequestBuilder
         */
        public AddPowerUpsByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for addPowerUpsByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BoardsPowerUps boardsPowerUps = buildBodyParams();
            return addPowerUpsByIdBoardCall(idBoard, boardsPowerUps, _callback);
        }

        private BoardsPowerUps buildBodyParams() {
            BoardsPowerUps boardsPowerUps = new BoardsPowerUps();
            boardsPowerUps.value(this.value);
            return boardsPowerUps;
        }

        /**
         * Execute addPowerUpsByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BoardsPowerUps boardsPowerUps = buildBodyParams();
            addPowerUpsByIdBoardWithHttpInfo(idBoard, boardsPowerUps);
        }

        /**
         * Execute addPowerUpsByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BoardsPowerUps boardsPowerUps = buildBodyParams();
            return addPowerUpsByIdBoardWithHttpInfo(idBoard, boardsPowerUps);
        }

        /**
         * Execute addPowerUpsByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BoardsPowerUps boardsPowerUps = buildBodyParams();
            return addPowerUpsByIdBoardAsync(idBoard, boardsPowerUps, _callback);
        }
    }

    /**
     * addBoardsPowerUpsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param boardsPowerUps Attributes of \&quot;Boards Power Ups\&quot; to be added. (required)
     * @return AddPowerUpsByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddPowerUpsByIdBoardRequestBuilder addPowerUpsByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new AddPowerUpsByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call createBoardCall(Boards boards, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boards;

        // create path and map variables
        String localVarPath = "/boards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBoardValidateBeforeCall(Boards boards, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boards' is set
        if (boards == null) {
            throw new ApiException("Missing the required parameter 'boards' when calling createBoard(Async)");
        }

        return createBoardCall(boards, _callback);

    }


    private ApiResponse<Void> createBoardWithHttpInfo(Boards boards) throws ApiException {
        okhttp3.Call localVarCall = createBoardValidateBeforeCall(boards, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createBoardAsync(Boards boards, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBoardValidateBeforeCall(boards, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateBoardRequestBuilder {
        private String closed;
        private String desc;
        private String idBoardSource;
        private String idOrganization;
        private String keepFromSource;
        private String labelNamesBlue;
        private String labelNamesGreen;
        private String labelNamesOrange;
        private String labelNamesPurple;
        private String labelNamesRed;
        private String labelNamesYellow;
        private String name;
        private String powerUps;
        private String prefsBackground;
        private String prefsCalendarFeedEnabled;
        private String prefsCardAging;
        private String prefsCardCovers;
        private String prefsComments;
        private String prefsInvitations;
        private String prefsPermissionLevel;
        private String prefsSelfJoin;
        private String prefsVoting;
        private String prefsBackground;
        private String prefsCardAging;
        private String prefsCardCovers;
        private String prefsComments;
        private String prefsInvitations;
        private String prefsPermissionLevel;
        private String prefsSelfJoin;
        private String prefsVoting;
        private String subscribed;

        private CreateBoardRequestBuilder() {
        }

        /**
         * Set closed
         * @param closed  true or false (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder closed(String closed) {
            this.closed = closed;
            return this;
        }
        
        /**
         * Set desc
         * @param desc a string with a length from 0 to 16384 (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder desc(String desc) {
            this.desc = desc;
            return this;
        }
        
        /**
         * Set idBoardSource
         * @param idBoardSource The id of the board to copy into the new board (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder idBoardSource(String idBoardSource) {
            this.idBoardSource = idBoardSource;
            return this;
        }
        
        /**
         * Set idOrganization
         * @param idOrganization The id or name of the organization to add the board to. (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder idOrganization(String idOrganization) {
            this.idOrganization = idOrganization;
            return this;
        }
        
        /**
         * Set keepFromSource
         * @param keepFromSource Components of the source board to copy. (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder keepFromSource(String keepFromSource) {
            this.keepFromSource = keepFromSource;
            return this;
        }
        
        /**
         * Set labelNamesBlue
         * @param labelNamesBlue a string with a length from 0 to 16384 (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder labelNamesBlue(String labelNamesBlue) {
            this.labelNamesBlue = labelNamesBlue;
            return this;
        }
        
        /**
         * Set labelNamesGreen
         * @param labelNamesGreen a string with a length from 0 to 16384 (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder labelNamesGreen(String labelNamesGreen) {
            this.labelNamesGreen = labelNamesGreen;
            return this;
        }
        
        /**
         * Set labelNamesOrange
         * @param labelNamesOrange a string with a length from 0 to 16384 (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder labelNamesOrange(String labelNamesOrange) {
            this.labelNamesOrange = labelNamesOrange;
            return this;
        }
        
        /**
         * Set labelNamesPurple
         * @param labelNamesPurple a string with a length from 0 to 16384 (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder labelNamesPurple(String labelNamesPurple) {
            this.labelNamesPurple = labelNamesPurple;
            return this;
        }
        
        /**
         * Set labelNamesRed
         * @param labelNamesRed a string with a length from 0 to 16384 (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder labelNamesRed(String labelNamesRed) {
            this.labelNamesRed = labelNamesRed;
            return this;
        }
        
        /**
         * Set labelNamesYellow
         * @param labelNamesYellow a string with a length from 0 to 16384 (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder labelNamesYellow(String labelNamesYellow) {
            this.labelNamesYellow = labelNamesYellow;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 1 to 16384 (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set powerUps
         * @param powerUps all or a comma-separated list of: calendar, cardAging, recap or voting (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder powerUps(String powerUps) {
            this.powerUps = powerUps;
            return this;
        }
        
        /**
         * Set prefsBackground
         * @param prefsBackground A standard background name, or the id of a custom background (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsBackground(String prefsBackground) {
            this.prefsBackground = prefsBackground;
            return this;
        }
        
        /**
         * Set prefsCalendarFeedEnabled
         * @param prefsCalendarFeedEnabled  true or false (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsCalendarFeedEnabled(String prefsCalendarFeedEnabled) {
            this.prefsCalendarFeedEnabled = prefsCalendarFeedEnabled;
            return this;
        }
        
        /**
         * Set prefsCardAging
         * @param prefsCardAging One of: pirate or regular (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsCardAging(String prefsCardAging) {
            this.prefsCardAging = prefsCardAging;
            return this;
        }
        
        /**
         * Set prefsCardCovers
         * @param prefsCardCovers  true or false (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsCardCovers(String prefsCardCovers) {
            this.prefsCardCovers = prefsCardCovers;
            return this;
        }
        
        /**
         * Set prefsComments
         * @param prefsComments One of: disabled, members, observers, org or public (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsComments(String prefsComments) {
            this.prefsComments = prefsComments;
            return this;
        }
        
        /**
         * Set prefsInvitations
         * @param prefsInvitations One of: admins or members (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsInvitations(String prefsInvitations) {
            this.prefsInvitations = prefsInvitations;
            return this;
        }
        
        /**
         * Set prefsPermissionLevel
         * @param prefsPermissionLevel One of: org, private or public (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsPermissionLevel(String prefsPermissionLevel) {
            this.prefsPermissionLevel = prefsPermissionLevel;
            return this;
        }
        
        /**
         * Set prefsSelfJoin
         * @param prefsSelfJoin  true or false (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsSelfJoin(String prefsSelfJoin) {
            this.prefsSelfJoin = prefsSelfJoin;
            return this;
        }
        
        /**
         * Set prefsVoting
         * @param prefsVoting One of: disabled, members, observers, org or public (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsVoting(String prefsVoting) {
            this.prefsVoting = prefsVoting;
            return this;
        }
        
        /**
         * Set prefsBackground
         * @param prefsBackground a string with a length from 0 to 16384 (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsBackground(String prefsBackground) {
            this.prefsBackground = prefsBackground;
            return this;
        }
        
        /**
         * Set prefsCardAging
         * @param prefsCardAging One of: pirate or regular (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsCardAging(String prefsCardAging) {
            this.prefsCardAging = prefsCardAging;
            return this;
        }
        
        /**
         * Set prefsCardCovers
         * @param prefsCardCovers  true or false (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsCardCovers(String prefsCardCovers) {
            this.prefsCardCovers = prefsCardCovers;
            return this;
        }
        
        /**
         * Set prefsComments
         * @param prefsComments One of: disabled, members, observers, org or public (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsComments(String prefsComments) {
            this.prefsComments = prefsComments;
            return this;
        }
        
        /**
         * Set prefsInvitations
         * @param prefsInvitations One of: admins or members (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsInvitations(String prefsInvitations) {
            this.prefsInvitations = prefsInvitations;
            return this;
        }
        
        /**
         * Set prefsPermissionLevel
         * @param prefsPermissionLevel One of: org, private or public (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsPermissionLevel(String prefsPermissionLevel) {
            this.prefsPermissionLevel = prefsPermissionLevel;
            return this;
        }
        
        /**
         * Set prefsSelfJoin
         * @param prefsSelfJoin  true or false (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsSelfJoin(String prefsSelfJoin) {
            this.prefsSelfJoin = prefsSelfJoin;
            return this;
        }
        
        /**
         * Set prefsVoting
         * @param prefsVoting One of: disabled, members, observers, org or public (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder prefsVoting(String prefsVoting) {
            this.prefsVoting = prefsVoting;
            return this;
        }
        
        /**
         * Set subscribed
         * @param subscribed  true or false (optional)
         * @return CreateBoardRequestBuilder
         */
        public CreateBoardRequestBuilder subscribed(String subscribed) {
            this.subscribed = subscribed;
            return this;
        }
        
        /**
         * Build call for createBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Boards boards = buildBodyParams();
            return createBoardCall(boards, _callback);
        }

        private Boards buildBodyParams() {
            Boards boards = new Boards();
            boards.closed(this.closed);
            boards.desc(this.desc);
            boards.idBoardSource(this.idBoardSource);
            boards.idOrganization(this.idOrganization);
            boards.keepFromSource(this.keepFromSource);
            boards.labelNamesBlue(this.labelNamesBlue);
            boards.labelNamesGreen(this.labelNamesGreen);
            boards.labelNamesOrange(this.labelNamesOrange);
            boards.labelNamesPurple(this.labelNamesPurple);
            boards.labelNamesRed(this.labelNamesRed);
            boards.labelNamesYellow(this.labelNamesYellow);
            boards.name(this.name);
            boards.powerUps(this.powerUps);
            boards.prefsBackground(this.prefsBackground);
            boards.prefsCalendarFeedEnabled(this.prefsCalendarFeedEnabled);
            boards.prefsCardAging(this.prefsCardAging);
            boards.prefsCardCovers(this.prefsCardCovers);
            boards.prefsComments(this.prefsComments);
            boards.prefsInvitations(this.prefsInvitations);
            boards.prefsPermissionLevel(this.prefsPermissionLevel);
            boards.prefsSelfJoin(this.prefsSelfJoin);
            boards.prefsVoting(this.prefsVoting);
            boards.prefsBackground(this.prefsBackground);
            boards.prefsCardAging(this.prefsCardAging);
            boards.prefsCardCovers(this.prefsCardCovers);
            boards.prefsComments(this.prefsComments);
            boards.prefsInvitations(this.prefsInvitations);
            boards.prefsPermissionLevel(this.prefsPermissionLevel);
            boards.prefsSelfJoin(this.prefsSelfJoin);
            boards.prefsVoting(this.prefsVoting);
            boards.subscribed(this.subscribed);
            return boards;
        }

        /**
         * Execute createBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Boards boards = buildBodyParams();
            createBoardWithHttpInfo(boards);
        }

        /**
         * Execute createBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Boards boards = buildBodyParams();
            return createBoardWithHttpInfo(boards);
        }

        /**
         * Execute createBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Boards boards = buildBodyParams();
            return createBoardAsync(boards, _callback);
        }
    }

    /**
     * addBoards()
     * 
     * @param boards Attributes of \&quot;Boards\&quot; to be added. (required)
     * @return CreateBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public CreateBoardRequestBuilder createBoard() throws IllegalArgumentException {
        return new CreateBoardRequestBuilder();
    }
    private okhttp3.Call createListsByIdBoardCall(String idBoard, BoardsLists boardsLists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsLists;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/lists"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createListsByIdBoardValidateBeforeCall(String idBoard, BoardsLists boardsLists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling createListsByIdBoard(Async)");
        }

        // verify the required parameter 'boardsLists' is set
        if (boardsLists == null) {
            throw new ApiException("Missing the required parameter 'boardsLists' when calling createListsByIdBoard(Async)");
        }

        return createListsByIdBoardCall(idBoard, boardsLists, _callback);

    }


    private ApiResponse<Void> createListsByIdBoardWithHttpInfo(String idBoard, BoardsLists boardsLists) throws ApiException {
        okhttp3.Call localVarCall = createListsByIdBoardValidateBeforeCall(idBoard, boardsLists, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createListsByIdBoardAsync(String idBoard, BoardsLists boardsLists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createListsByIdBoardValidateBeforeCall(idBoard, boardsLists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateListsByIdBoardRequestBuilder {
        private final String idBoard;
        private String name;
        private String pos;

        private CreateListsByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set name
         * @param name a string with a length from 1 to 16384 (optional)
         * @return CreateListsByIdBoardRequestBuilder
         */
        public CreateListsByIdBoardRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return CreateListsByIdBoardRequestBuilder
         */
        public CreateListsByIdBoardRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Build call for createListsByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BoardsLists boardsLists = buildBodyParams();
            return createListsByIdBoardCall(idBoard, boardsLists, _callback);
        }

        private BoardsLists buildBodyParams() {
            BoardsLists boardsLists = new BoardsLists();
            boardsLists.name(this.name);
            boardsLists.pos(this.pos);
            return boardsLists;
        }

        /**
         * Execute createListsByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BoardsLists boardsLists = buildBodyParams();
            createListsByIdBoardWithHttpInfo(idBoard, boardsLists);
        }

        /**
         * Execute createListsByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BoardsLists boardsLists = buildBodyParams();
            return createListsByIdBoardWithHttpInfo(idBoard, boardsLists);
        }

        /**
         * Execute createListsByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BoardsLists boardsLists = buildBodyParams();
            return createListsByIdBoardAsync(idBoard, boardsLists, _callback);
        }
    }

    /**
     * addBoardsListsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param boardsLists Attributes of \&quot;Boards Lists\&quot; to be added. (required)
     * @return CreateListsByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public CreateListsByIdBoardRequestBuilder createListsByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new CreateListsByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call filterCardsByIdBoardCall(String idBoard, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/cards/{filter}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filterCardsByIdBoardValidateBeforeCall(String idBoard, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling filterCardsByIdBoard(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling filterCardsByIdBoard(Async)");
        }

        return filterCardsByIdBoardCall(idBoard, filter, _callback);

    }


    private ApiResponse<Void> filterCardsByIdBoardWithHttpInfo(String idBoard, String filter) throws ApiException {
        okhttp3.Call localVarCall = filterCardsByIdBoardValidateBeforeCall(idBoard, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call filterCardsByIdBoardAsync(String idBoard, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = filterCardsByIdBoardValidateBeforeCall(idBoard, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class FilterCardsByIdBoardRequestBuilder {
        private final String idBoard;
        private final String filter;

        private FilterCardsByIdBoardRequestBuilder(String idBoard, String filter) {
            this.idBoard = idBoard;
            this.filter = filter;
        }

        /**
         * Build call for filterCardsByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return filterCardsByIdBoardCall(idBoard, filter, _callback);
        }


        /**
         * Execute filterCardsByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            filterCardsByIdBoardWithHttpInfo(idBoard, filter);
        }

        /**
         * Execute filterCardsByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return filterCardsByIdBoardWithHttpInfo(idBoard, filter);
        }

        /**
         * Execute filterCardsByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return filterCardsByIdBoardAsync(idBoard, filter, _callback);
        }
    }

    /**
     * getBoardsCardsByIdBoardByFilter()
     * 
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @return FilterCardsByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public FilterCardsByIdBoardRequestBuilder filterCardsByIdBoard(String idBoard, String filter) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new FilterCardsByIdBoardRequestBuilder(idBoard, filter);
    }
    private okhttp3.Call generateCalendarKeyByIdCall(String idBoard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/calendarKey/generate"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateCalendarKeyByIdValidateBeforeCall(String idBoard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling generateCalendarKeyById(Async)");
        }

        return generateCalendarKeyByIdCall(idBoard, _callback);

    }


    private ApiResponse<Void> generateCalendarKeyByIdWithHttpInfo(String idBoard) throws ApiException {
        okhttp3.Call localVarCall = generateCalendarKeyByIdValidateBeforeCall(idBoard, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call generateCalendarKeyByIdAsync(String idBoard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateCalendarKeyByIdValidateBeforeCall(idBoard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GenerateCalendarKeyByIdRequestBuilder {
        private final String idBoard;

        private GenerateCalendarKeyByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Build call for generateCalendarKeyById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateCalendarKeyByIdCall(idBoard, _callback);
        }


        /**
         * Execute generateCalendarKeyById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            generateCalendarKeyByIdWithHttpInfo(idBoard);
        }

        /**
         * Execute generateCalendarKeyById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return generateCalendarKeyByIdWithHttpInfo(idBoard);
        }

        /**
         * Execute generateCalendarKeyById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return generateCalendarKeyByIdAsync(idBoard, _callback);
        }
    }

    /**
     * addBoardsCalendarKeyGenerateByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return GenerateCalendarKeyByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GenerateCalendarKeyByIdRequestBuilder generateCalendarKeyById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new GenerateCalendarKeyByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call generateEmailKeyCall(String idBoard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/emailKey/generate"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateEmailKeyValidateBeforeCall(String idBoard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling generateEmailKey(Async)");
        }

        return generateEmailKeyCall(idBoard, _callback);

    }


    private ApiResponse<Void> generateEmailKeyWithHttpInfo(String idBoard) throws ApiException {
        okhttp3.Call localVarCall = generateEmailKeyValidateBeforeCall(idBoard, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call generateEmailKeyAsync(String idBoard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateEmailKeyValidateBeforeCall(idBoard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GenerateEmailKeyRequestBuilder {
        private final String idBoard;

        private GenerateEmailKeyRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Build call for generateEmailKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateEmailKeyCall(idBoard, _callback);
        }


        /**
         * Execute generateEmailKey request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            generateEmailKeyWithHttpInfo(idBoard);
        }

        /**
         * Execute generateEmailKey request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return generateEmailKeyWithHttpInfo(idBoard);
        }

        /**
         * Execute generateEmailKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return generateEmailKeyAsync(idBoard, _callback);
        }
    }

    /**
     * addBoardsEmailKeyGenerateByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return GenerateEmailKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GenerateEmailKeyRequestBuilder generateEmailKey(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new GenerateEmailKeyRequestBuilder(idBoard);
    }
    private okhttp3.Call getBoardStarsByIdCall(String idBoard, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/boardStars"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardStarsByIdValidateBeforeCall(String idBoard, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getBoardStarsById(Async)");
        }

        return getBoardStarsByIdCall(idBoard, filter, _callback);

    }


    private ApiResponse<Void> getBoardStarsByIdWithHttpInfo(String idBoard, String filter) throws ApiException {
        okhttp3.Call localVarCall = getBoardStarsByIdValidateBeforeCall(idBoard, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardStarsByIdAsync(String idBoard, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardStarsByIdValidateBeforeCall(idBoard, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardStarsByIdRequestBuilder {
        private final String idBoard;
        private String filter;

        private GetBoardStarsByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set filter
         * @param filter One of: mine or none (optional, default to mine)
         * @return GetBoardStarsByIdRequestBuilder
         */
        public GetBoardStarsByIdRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getBoardStarsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardStarsByIdCall(idBoard, filter, _callback);
        }


        /**
         * Execute getBoardStarsById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardStarsByIdWithHttpInfo(idBoard, filter);
        }

        /**
         * Execute getBoardStarsById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardStarsByIdWithHttpInfo(idBoard, filter);
        }

        /**
         * Execute getBoardStarsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardStarsByIdAsync(idBoard, filter, _callback);
        }
    }

    /**
     * getBoardsBoardStarsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return GetBoardStarsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardStarsByIdRequestBuilder getBoardStarsById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new GetBoardStarsByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call getByIdCall(String idBoard, String actions, String actionsEntities, String actionsDisplay, String actionsFormat, String actionsSince, String actionsLimit, String actionFields, String actionMember, String actionMemberFields, String actionMemberCreator, String actionMemberCreatorFields, String cards, String cardFields, String cardAttachments, String cardAttachmentFields, String cardChecklists, String cardStickers, String boardStars, String labels, String labelFields, String labelsLimit, String lists, String listFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String membersInvited, String membersInvitedFields, String checklists, String checklistFields, String organization, String organizationFields, String organizationMemberships, String myPrefs, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (actionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_entities", actionsEntities));
        }

        if (actionsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_display", actionsDisplay));
        }

        if (actionsFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_format", actionsFormat));
        }

        if (actionsSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_since", actionsSince));
        }

        if (actionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_limit", actionsLimit));
        }

        if (actionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_fields", actionFields));
        }

        if (actionMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_member", actionMember));
        }

        if (actionMemberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_member_fields", actionMemberFields));
        }

        if (actionMemberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_memberCreator", actionMemberCreator));
        }

        if (actionMemberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_memberCreator_fields", actionMemberCreatorFields));
        }

        if (cards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards", cards));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (cardAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_attachments", cardAttachments));
        }

        if (cardAttachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_attachment_fields", cardAttachmentFields));
        }

        if (cardChecklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_checklists", cardChecklists));
        }

        if (cardStickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_stickers", cardStickers));
        }

        if (boardStars != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardStars", boardStars));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (labelFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label_fields", labelFields));
        }

        if (labelsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels_limit", labelsLimit));
        }

        if (lists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lists", lists));
        }

        if (listFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_fields", listFields));
        }

        if (memberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships", memberships));
        }

        if (membershipsMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships_member", membershipsMember));
        }

        if (membershipsMemberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships_member_fields", membershipsMemberFields));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (membersInvited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("membersInvited", membersInvited));
        }

        if (membersInvitedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("membersInvited_fields", membersInvitedFields));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (checklistFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklist_fields", checklistFields));
        }

        if (organization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
        }

        if (organizationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_fields", organizationFields));
        }

        if (organizationMemberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_memberships", organizationMemberships));
        }

        if (myPrefs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("myPrefs", myPrefs));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String idBoard, String actions, String actionsEntities, String actionsDisplay, String actionsFormat, String actionsSince, String actionsLimit, String actionFields, String actionMember, String actionMemberFields, String actionMemberCreator, String actionMemberCreatorFields, String cards, String cardFields, String cardAttachments, String cardAttachmentFields, String cardChecklists, String cardStickers, String boardStars, String labels, String labelFields, String labelsLimit, String lists, String listFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String membersInvited, String membersInvitedFields, String checklists, String checklistFields, String organization, String organizationFields, String organizationMemberships, String myPrefs, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getById(Async)");
        }

        return getByIdCall(idBoard, actions, actionsEntities, actionsDisplay, actionsFormat, actionsSince, actionsLimit, actionFields, actionMember, actionMemberFields, actionMemberCreator, actionMemberCreatorFields, cards, cardFields, cardAttachments, cardAttachmentFields, cardChecklists, cardStickers, boardStars, labels, labelFields, labelsLimit, lists, listFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, membersInvited, membersInvitedFields, checklists, checklistFields, organization, organizationFields, organizationMemberships, myPrefs, fields, _callback);

    }


    private ApiResponse<Void> getByIdWithHttpInfo(String idBoard, String actions, String actionsEntities, String actionsDisplay, String actionsFormat, String actionsSince, String actionsLimit, String actionFields, String actionMember, String actionMemberFields, String actionMemberCreator, String actionMemberCreatorFields, String cards, String cardFields, String cardAttachments, String cardAttachmentFields, String cardChecklists, String cardStickers, String boardStars, String labels, String labelFields, String labelsLimit, String lists, String listFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String membersInvited, String membersInvitedFields, String checklists, String checklistFields, String organization, String organizationFields, String organizationMemberships, String myPrefs, String fields) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idBoard, actions, actionsEntities, actionsDisplay, actionsFormat, actionsSince, actionsLimit, actionFields, actionMember, actionMemberFields, actionMemberCreator, actionMemberCreatorFields, cards, cardFields, cardAttachments, cardAttachmentFields, cardChecklists, cardStickers, boardStars, labels, labelFields, labelsLimit, lists, listFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, membersInvited, membersInvitedFields, checklists, checklistFields, organization, organizationFields, organizationMemberships, myPrefs, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdAsync(String idBoard, String actions, String actionsEntities, String actionsDisplay, String actionsFormat, String actionsSince, String actionsLimit, String actionFields, String actionMember, String actionMemberFields, String actionMemberCreator, String actionMemberCreatorFields, String cards, String cardFields, String cardAttachments, String cardAttachmentFields, String cardChecklists, String cardStickers, String boardStars, String labels, String labelFields, String labelsLimit, String lists, String listFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String membersInvited, String membersInvitedFields, String checklists, String checklistFields, String organization, String organizationFields, String organizationMemberships, String myPrefs, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idBoard, actions, actionsEntities, actionsDisplay, actionsFormat, actionsSince, actionsLimit, actionFields, actionMember, actionMemberFields, actionMemberCreator, actionMemberCreatorFields, cards, cardFields, cardAttachments, cardAttachmentFields, cardChecklists, cardStickers, boardStars, labels, labelFields, labelsLimit, lists, listFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, membersInvited, membersInvitedFields, checklists, checklistFields, organization, organizationFields, organizationMemberships, myPrefs, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String idBoard;
        private String actions;
        private String actionsEntities;
        private String actionsDisplay;
        private String actionsFormat;
        private String actionsSince;
        private String actionsLimit;
        private String actionFields;
        private String actionMember;
        private String actionMemberFields;
        private String actionMemberCreator;
        private String actionMemberCreatorFields;
        private String cards;
        private String cardFields;
        private String cardAttachments;
        private String cardAttachmentFields;
        private String cardChecklists;
        private String cardStickers;
        private String boardStars;
        private String labels;
        private String labelFields;
        private String labelsLimit;
        private String lists;
        private String listFields;
        private String memberships;
        private String membershipsMember;
        private String membershipsMemberFields;
        private String members;
        private String memberFields;
        private String membersInvited;
        private String membersInvitedFields;
        private String checklists;
        private String checklistFields;
        private String organization;
        private String organizationFields;
        private String organizationMemberships;
        private String myPrefs;
        private String fields;

        private GetByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set actionsEntities
         * @param actionsEntities  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionsEntities(String actionsEntities) {
            this.actionsEntities = actionsEntities;
            return this;
        }
        
        /**
         * Set actionsDisplay
         * @param actionsDisplay  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionsDisplay(String actionsDisplay) {
            this.actionsDisplay = actionsDisplay;
            return this;
        }
        
        /**
         * Set actionsFormat
         * @param actionsFormat One of: count, list or minimal (optional, default to list)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionsFormat(String actionsFormat) {
            this.actionsFormat = actionsFormat;
            return this;
        }
        
        /**
         * Set actionsSince
         * @param actionsSince A date, null or lastView (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionsSince(String actionsSince) {
            this.actionsSince = actionsSince;
            return this;
        }
        
        /**
         * Set actionsLimit
         * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionsLimit(String actionsLimit) {
            this.actionsLimit = actionsLimit;
            return this;
        }
        
        /**
         * Set actionFields
         * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionFields(String actionFields) {
            this.actionFields = actionFields;
            return this;
        }
        
        /**
         * Set actionMember
         * @param actionMember  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionMember(String actionMember) {
            this.actionMember = actionMember;
            return this;
        }
        
        /**
         * Set actionMemberFields
         * @param actionMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionMemberFields(String actionMemberFields) {
            this.actionMemberFields = actionMemberFields;
            return this;
        }
        
        /**
         * Set actionMemberCreator
         * @param actionMemberCreator  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionMemberCreator(String actionMemberCreator) {
            this.actionMemberCreator = actionMemberCreator;
            return this;
        }
        
        /**
         * Set actionMemberCreatorFields
         * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionMemberCreatorFields(String actionMemberCreatorFields) {
            this.actionMemberCreatorFields = actionMemberCreatorFields;
            return this;
        }
        
        /**
         * Set cards
         * @param cards One of: all, closed, none, open or visible (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cards(String cards) {
            this.cards = cards;
            return this;
        }
        
        /**
         * Set cardFields
         * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardFields(String cardFields) {
            this.cardFields = cardFields;
            return this;
        }
        
        /**
         * Set cardAttachments
         * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardAttachments(String cardAttachments) {
            this.cardAttachments = cardAttachments;
            return this;
        }
        
        /**
         * Set cardAttachmentFields
         * @param cardAttachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardAttachmentFields(String cardAttachmentFields) {
            this.cardAttachmentFields = cardAttachmentFields;
            return this;
        }
        
        /**
         * Set cardChecklists
         * @param cardChecklists One of: all or none (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardChecklists(String cardChecklists) {
            this.cardChecklists = cardChecklists;
            return this;
        }
        
        /**
         * Set cardStickers
         * @param cardStickers  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardStickers(String cardStickers) {
            this.cardStickers = cardStickers;
            return this;
        }
        
        /**
         * Set boardStars
         * @param boardStars One of: mine or none (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardStars(String boardStars) {
            this.boardStars = boardStars;
            return this;
        }
        
        /**
         * Set labels
         * @param labels One of: all or none (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder labels(String labels) {
            this.labels = labels;
            return this;
        }
        
        /**
         * Set labelFields
         * @param labelFields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder labelFields(String labelFields) {
            this.labelFields = labelFields;
            return this;
        }
        
        /**
         * Set labelsLimit
         * @param labelsLimit a number from 0 to 1000 (optional, default to 50)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder labelsLimit(String labelsLimit) {
            this.labelsLimit = labelsLimit;
            return this;
        }
        
        /**
         * Set lists
         * @param lists One of: all, closed, none or open (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder lists(String lists) {
            this.lists = lists;
            return this;
        }
        
        /**
         * Set listFields
         * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder listFields(String listFields) {
            this.listFields = listFields;
            return this;
        }
        
        /**
         * Set memberships
         * @param memberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder memberships(String memberships) {
            this.memberships = memberships;
            return this;
        }
        
        /**
         * Set membershipsMember
         * @param membershipsMember  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder membershipsMember(String membershipsMember) {
            this.membershipsMember = membershipsMember;
            return this;
        }
        
        /**
         * Set membershipsMemberFields
         * @param membershipsMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder membershipsMemberFields(String membershipsMemberFields) {
            this.membershipsMemberFields = membershipsMemberFields;
            return this;
        }
        
        /**
         * Set members
         * @param members One of: admins, all, none, normal or owners (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder members(String members) {
            this.members = members;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName, username and confirmed)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set membersInvited
         * @param membersInvited One of: admins, all, none, normal or owners (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder membersInvited(String membersInvited) {
            this.membersInvited = membersInvited;
            return this;
        }
        
        /**
         * Set membersInvitedFields
         * @param membersInvitedFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder membersInvitedFields(String membersInvitedFields) {
            this.membersInvitedFields = membersInvitedFields;
            return this;
        }
        
        /**
         * Set checklists
         * @param checklists One of: all or none (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder checklists(String checklists) {
            this.checklists = checklists;
            return this;
        }
        
        /**
         * Set checklistFields
         * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder checklistFields(String checklistFields) {
            this.checklistFields = checklistFields;
            return this;
        }
        
        /**
         * Set organization
         * @param organization  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder organization(String organization) {
            this.organization = organization;
            return this;
        }
        
        /**
         * Set organizationFields
         * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder organizationFields(String organizationFields) {
            this.organizationFields = organizationFields;
            return this;
        }
        
        /**
         * Set organizationMemberships
         * @param organizationMemberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder organizationMemberships(String organizationMemberships) {
            this.organizationMemberships = organizationMemberships;
            return this;
        }
        
        /**
         * Set myPrefs
         * @param myPrefs  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder myPrefs(String myPrefs) {
            this.myPrefs = myPrefs;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, descData, closed, idOrganization, pinned, url, shortUrl, prefs and labelNames)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(idBoard, actions, actionsEntities, actionsDisplay, actionsFormat, actionsSince, actionsLimit, actionFields, actionMember, actionMemberFields, actionMemberCreator, actionMemberCreatorFields, cards, cardFields, cardAttachments, cardAttachmentFields, cardChecklists, cardStickers, boardStars, labels, labelFields, labelsLimit, lists, listFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, membersInvited, membersInvitedFields, checklists, checklistFields, organization, organizationFields, organizationMemberships, myPrefs, fields, _callback);
        }


        /**
         * Execute getById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdWithHttpInfo(idBoard, actions, actionsEntities, actionsDisplay, actionsFormat, actionsSince, actionsLimit, actionFields, actionMember, actionMemberFields, actionMemberCreator, actionMemberCreatorFields, cards, cardFields, cardAttachments, cardAttachmentFields, cardChecklists, cardStickers, boardStars, labels, labelFields, labelsLimit, lists, listFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, membersInvited, membersInvitedFields, checklists, checklistFields, organization, organizationFields, organizationMemberships, myPrefs, fields);
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(idBoard, actions, actionsEntities, actionsDisplay, actionsFormat, actionsSince, actionsLimit, actionFields, actionMember, actionMemberFields, actionMemberCreator, actionMemberCreatorFields, cards, cardFields, cardAttachments, cardAttachmentFields, cardChecklists, cardStickers, boardStars, labels, labelFields, labelsLimit, lists, listFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, membersInvited, membersInvitedFields, checklists, checklistFields, organization, organizationFields, organizationMemberships, myPrefs, fields);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdAsync(idBoard, actions, actionsEntities, actionsDisplay, actionsFormat, actionsSince, actionsLimit, actionFields, actionMember, actionMemberFields, actionMemberCreator, actionMemberCreatorFields, cards, cardFields, cardAttachments, cardAttachmentFields, cardChecklists, cardStickers, boardStars, labels, labelFields, labelsLimit, lists, listFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, membersInvited, membersInvitedFields, checklists, checklistFields, organization, organizationFields, organizationMemberships, myPrefs, fields, _callback);
        }
    }

    /**
     * getBoardsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new GetByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call getByIdFieldCall(String idBoard, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/{field}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdFieldValidateBeforeCall(String idBoard, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getByIdField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getByIdField(Async)");
        }

        return getByIdFieldCall(idBoard, field, _callback);

    }


    private ApiResponse<Void> getByIdFieldWithHttpInfo(String idBoard, String field) throws ApiException {
        okhttp3.Call localVarCall = getByIdFieldValidateBeforeCall(idBoard, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdFieldAsync(String idBoard, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdFieldValidateBeforeCall(idBoard, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdFieldRequestBuilder {
        private final String idBoard;
        private final String field;

        private GetByIdFieldRequestBuilder(String idBoard, String field) {
            this.idBoard = idBoard;
            this.field = field;
        }

        /**
         * Build call for getByIdField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdFieldCall(idBoard, field, _callback);
        }


        /**
         * Execute getByIdField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdFieldWithHttpInfo(idBoard, field);
        }

        /**
         * Execute getByIdField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdFieldWithHttpInfo(idBoard, field);
        }

        /**
         * Execute getByIdField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdFieldAsync(idBoard, field, _callback);
        }
    }

    /**
     * getBoardsByIdBoardByField()
     * 
     * @param idBoard board_id (required)
     * @param field field (required)
     * @return GetByIdFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdFieldRequestBuilder getByIdField(String idBoard, String field) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetByIdFieldRequestBuilder(idBoard, field);
    }
    private okhttp3.Call getCardsByIdBoardCall(String idBoard, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/cards"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (stickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stickers", stickers));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsByIdBoardValidateBeforeCall(String idBoard, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getCardsByIdBoard(Async)");
        }

        return getCardsByIdBoardCall(idBoard, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);

    }


    private ApiResponse<Void> getCardsByIdBoardWithHttpInfo(String idBoard, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsByIdBoardValidateBeforeCall(idBoard, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCardsByIdBoardAsync(String idBoard, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsByIdBoardValidateBeforeCall(idBoard, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCardsByIdBoardRequestBuilder {
        private final String idBoard;
        private String actions;
        private String attachments;
        private String attachmentFields;
        private String stickers;
        private String members;
        private String memberFields;
        private String checkItemStates;
        private String checklists;
        private String limit;
        private String since;
        private String before;
        private String filter;
        private String fields;

        private GetCardsByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder attachments(String attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set attachmentFields
         * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder attachmentFields(String attachmentFields) {
            this.attachmentFields = attachmentFields;
            return this;
        }
        
        /**
         * Set stickers
         * @param stickers  true or false (optional)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder stickers(String stickers) {
            this.stickers = stickers;
            return this;
        }
        
        /**
         * Set members
         * @param members  true or false (optional)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder members(String members) {
            this.members = members;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set checkItemStates
         * @param checkItemStates  true or false (optional)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder checkItemStates(String checkItemStates) {
            this.checkItemStates = checkItemStates;
            return this;
        }
        
        /**
         * Set checklists
         * @param checklists One of: all or none (optional, default to none)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder checklists(String checklists) {
            this.checklists = checklists;
            return this;
        }
        
        /**
         * Set limit
         * @param limit a number from 1 to 1000 (optional)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set since
         * @param since A date, or null (optional)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set before
         * @param before A date, or null (optional)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set filter
         * @param filter One of: all, closed, none, open or visible (optional, default to visible)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetCardsByIdBoardRequestBuilder
         */
        public GetCardsByIdBoardRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCardsByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardsByIdBoardCall(idBoard, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        }


        /**
         * Execute getCardsByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCardsByIdBoardWithHttpInfo(idBoard, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields);
        }

        /**
         * Execute getCardsByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCardsByIdBoardWithHttpInfo(idBoard, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields);
        }

        /**
         * Execute getCardsByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCardsByIdBoardAsync(idBoard, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        }
    }

    /**
     * getBoardsCardsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return GetCardsByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCardsByIdBoardRequestBuilder getCardsByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new GetCardsByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call getCardsByIdBoardByIdCardCall(String idBoard, String idCard, String attachments, String attachmentFields, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String members, String memberFields, String checkItemStates, String checkItemStateFields, String labels, String checklists, String checklistFields, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/cards/{idCard}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (actionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_entities", actionsEntities));
        }

        if (actionsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_display", actionsDisplay));
        }

        if (actionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_limit", actionsLimit));
        }

        if (actionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_fields", actionFields));
        }

        if (actionMemberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_memberCreator_fields", actionMemberCreatorFields));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checkItemStateFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemState_fields", checkItemStateFields));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (checklistFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklist_fields", checklistFields));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsByIdBoardByIdCardValidateBeforeCall(String idBoard, String idCard, String attachments, String attachmentFields, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String members, String memberFields, String checkItemStates, String checkItemStateFields, String labels, String checklists, String checklistFields, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getCardsByIdBoardByIdCard(Async)");
        }

        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsByIdBoardByIdCard(Async)");
        }

        return getCardsByIdBoardByIdCardCall(idBoard, idCard, attachments, attachmentFields, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, members, memberFields, checkItemStates, checkItemStateFields, labels, checklists, checklistFields, fields, _callback);

    }


    private ApiResponse<Void> getCardsByIdBoardByIdCardWithHttpInfo(String idBoard, String idCard, String attachments, String attachmentFields, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String members, String memberFields, String checkItemStates, String checkItemStateFields, String labels, String checklists, String checklistFields, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsByIdBoardByIdCardValidateBeforeCall(idBoard, idCard, attachments, attachmentFields, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, members, memberFields, checkItemStates, checkItemStateFields, labels, checklists, checklistFields, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCardsByIdBoardByIdCardAsync(String idBoard, String idCard, String attachments, String attachmentFields, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String members, String memberFields, String checkItemStates, String checkItemStateFields, String labels, String checklists, String checklistFields, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsByIdBoardByIdCardValidateBeforeCall(idBoard, idCard, attachments, attachmentFields, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, members, memberFields, checkItemStates, checkItemStateFields, labels, checklists, checklistFields, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCardsByIdBoardByIdCardRequestBuilder {
        private final String idBoard;
        private final String idCard;
        private String attachments;
        private String attachmentFields;
        private String actions;
        private String actionsEntities;
        private String actionsDisplay;
        private String actionsLimit;
        private String actionFields;
        private String actionMemberCreatorFields;
        private String members;
        private String memberFields;
        private String checkItemStates;
        private String checkItemStateFields;
        private String labels;
        private String checklists;
        private String checklistFields;
        private String fields;

        private GetCardsByIdBoardByIdCardRequestBuilder(String idBoard, String idCard) {
            this.idBoard = idBoard;
            this.idCard = idCard;
        }

        /**
         * Set attachments
         * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder attachments(String attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set attachmentFields
         * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder attachmentFields(String attachmentFields) {
            this.attachmentFields = attachmentFields;
            return this;
        }
        
        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set actionsEntities
         * @param actionsEntities  true or false (optional)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder actionsEntities(String actionsEntities) {
            this.actionsEntities = actionsEntities;
            return this;
        }
        
        /**
         * Set actionsDisplay
         * @param actionsDisplay  true or false (optional)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder actionsDisplay(String actionsDisplay) {
            this.actionsDisplay = actionsDisplay;
            return this;
        }
        
        /**
         * Set actionsLimit
         * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder actionsLimit(String actionsLimit) {
            this.actionsLimit = actionsLimit;
            return this;
        }
        
        /**
         * Set actionFields
         * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder actionFields(String actionFields) {
            this.actionFields = actionFields;
            return this;
        }
        
        /**
         * Set actionMemberCreatorFields
         * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder actionMemberCreatorFields(String actionMemberCreatorFields) {
            this.actionMemberCreatorFields = actionMemberCreatorFields;
            return this;
        }
        
        /**
         * Set members
         * @param members  true or false (optional)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder members(String members) {
            this.members = members;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName and username)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set checkItemStates
         * @param checkItemStates  true or false (optional)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder checkItemStates(String checkItemStates) {
            this.checkItemStates = checkItemStates;
            return this;
        }
        
        /**
         * Set checkItemStateFields
         * @param checkItemStateFields all or a comma-separated list of: idCheckItem or state (optional, default to all)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder checkItemStateFields(String checkItemStateFields) {
            this.checkItemStateFields = checkItemStateFields;
            return this;
        }
        
        /**
         * Set labels
         * @param labels  true or false (optional)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder labels(String labels) {
            this.labels = labels;
            return this;
        }
        
        /**
         * Set checklists
         * @param checklists One of: all or none (optional, default to none)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder checklists(String checklists) {
            this.checklists = checklists;
            return this;
        }
        
        /**
         * Set checklistFields
         * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder checklistFields(String checklistFields) {
            this.checklistFields = checklistFields;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetCardsByIdBoardByIdCardRequestBuilder
         */
        public GetCardsByIdBoardByIdCardRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCardsByIdBoardByIdCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardsByIdBoardByIdCardCall(idBoard, idCard, attachments, attachmentFields, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, members, memberFields, checkItemStates, checkItemStateFields, labels, checklists, checklistFields, fields, _callback);
        }


        /**
         * Execute getCardsByIdBoardByIdCard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCardsByIdBoardByIdCardWithHttpInfo(idBoard, idCard, attachments, attachmentFields, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, members, memberFields, checkItemStates, checkItemStateFields, labels, checklists, checklistFields, fields);
        }

        /**
         * Execute getCardsByIdBoardByIdCard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCardsByIdBoardByIdCardWithHttpInfo(idBoard, idCard, attachments, attachmentFields, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, members, memberFields, checkItemStates, checkItemStateFields, labels, checklists, checklistFields, fields);
        }

        /**
         * Execute getCardsByIdBoardByIdCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCardsByIdBoardByIdCardAsync(idBoard, idCard, attachments, attachmentFields, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, members, memberFields, checkItemStates, checkItemStateFields, labels, checklists, checklistFields, fields, _callback);
        }
    }

    /**
     * getBoardsCardsByIdBoardByIdCard()
     * 
     * @param idBoard board_id (required)
     * @param idCard idCard (required)
     * @return GetCardsByIdBoardByIdCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCardsByIdBoardByIdCardRequestBuilder getCardsByIdBoardByIdCard(String idBoard, String idCard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (idCard == null) throw new IllegalArgumentException("\"idCard\" is required but got null");
            

        return new GetCardsByIdBoardByIdCardRequestBuilder(idBoard, idCard);
    }
    private okhttp3.Call getChecklistsByIdCall(String idBoard, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/checklists"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards", cards));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (checkItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItems", checkItems));
        }

        if (checkItemFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItem_fields", checkItemFields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChecklistsByIdValidateBeforeCall(String idBoard, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getChecklistsById(Async)");
        }

        return getChecklistsByIdCall(idBoard, cards, cardFields, checkItems, checkItemFields, filter, fields, _callback);

    }


    private ApiResponse<Void> getChecklistsByIdWithHttpInfo(String idBoard, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getChecklistsByIdValidateBeforeCall(idBoard, cards, cardFields, checkItems, checkItemFields, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getChecklistsByIdAsync(String idBoard, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChecklistsByIdValidateBeforeCall(idBoard, cards, cardFields, checkItems, checkItemFields, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetChecklistsByIdRequestBuilder {
        private final String idBoard;
        private String cards;
        private String cardFields;
        private String checkItems;
        private String checkItemFields;
        private String filter;
        private String fields;

        private GetChecklistsByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set cards
         * @param cards One of: all, closed, none, open or visible (optional, default to none)
         * @return GetChecklistsByIdRequestBuilder
         */
        public GetChecklistsByIdRequestBuilder cards(String cards) {
            this.cards = cards;
            return this;
        }
        
        /**
         * Set cardFields
         * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetChecklistsByIdRequestBuilder
         */
        public GetChecklistsByIdRequestBuilder cardFields(String cardFields) {
            this.cardFields = cardFields;
            return this;
        }
        
        /**
         * Set checkItems
         * @param checkItems One of: all or none (optional, default to all)
         * @return GetChecklistsByIdRequestBuilder
         */
        public GetChecklistsByIdRequestBuilder checkItems(String checkItems) {
            this.checkItems = checkItems;
            return this;
        }
        
        /**
         * Set checkItemFields
         * @param checkItemFields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
         * @return GetChecklistsByIdRequestBuilder
         */
        public GetChecklistsByIdRequestBuilder checkItemFields(String checkItemFields) {
            this.checkItemFields = checkItemFields;
            return this;
        }
        
        /**
         * Set filter
         * @param filter One of: all or none (optional, default to all)
         * @return GetChecklistsByIdRequestBuilder
         */
        public GetChecklistsByIdRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
         * @return GetChecklistsByIdRequestBuilder
         */
        public GetChecklistsByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getChecklistsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChecklistsByIdCall(idBoard, cards, cardFields, checkItems, checkItemFields, filter, fields, _callback);
        }


        /**
         * Execute getChecklistsById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getChecklistsByIdWithHttpInfo(idBoard, cards, cardFields, checkItems, checkItemFields, filter, fields);
        }

        /**
         * Execute getChecklistsById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getChecklistsByIdWithHttpInfo(idBoard, cards, cardFields, checkItems, checkItemFields, filter, fields);
        }

        /**
         * Execute getChecklistsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getChecklistsByIdAsync(idBoard, cards, cardFields, checkItems, checkItemFields, filter, fields, _callback);
        }
    }

    /**
     * getBoardsChecklistsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return GetChecklistsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetChecklistsByIdRequestBuilder getChecklistsById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new GetChecklistsByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call getDeltasByIdBoardCall(String idBoard, String tags, String ixLastUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/deltas"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (ixLastUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ixLastUpdate", ixLastUpdate));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeltasByIdBoardValidateBeforeCall(String idBoard, String tags, String ixLastUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getDeltasByIdBoard(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling getDeltasByIdBoard(Async)");
        }

        // verify the required parameter 'ixLastUpdate' is set
        if (ixLastUpdate == null) {
            throw new ApiException("Missing the required parameter 'ixLastUpdate' when calling getDeltasByIdBoard(Async)");
        }

        return getDeltasByIdBoardCall(idBoard, tags, ixLastUpdate, _callback);

    }


    private ApiResponse<Void> getDeltasByIdBoardWithHttpInfo(String idBoard, String tags, String ixLastUpdate) throws ApiException {
        okhttp3.Call localVarCall = getDeltasByIdBoardValidateBeforeCall(idBoard, tags, ixLastUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDeltasByIdBoardAsync(String idBoard, String tags, String ixLastUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeltasByIdBoardValidateBeforeCall(idBoard, tags, ixLastUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDeltasByIdBoardRequestBuilder {
        private final String idBoard;
        private final String tags;
        private final String ixLastUpdate;

        private GetDeltasByIdBoardRequestBuilder(String idBoard, String tags, String ixLastUpdate) {
            this.idBoard = idBoard;
            this.tags = tags;
            this.ixLastUpdate = ixLastUpdate;
        }

        /**
         * Build call for getDeltasByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDeltasByIdBoardCall(idBoard, tags, ixLastUpdate, _callback);
        }


        /**
         * Execute getDeltasByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDeltasByIdBoardWithHttpInfo(idBoard, tags, ixLastUpdate);
        }

        /**
         * Execute getDeltasByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDeltasByIdBoardWithHttpInfo(idBoard, tags, ixLastUpdate);
        }

        /**
         * Execute getDeltasByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDeltasByIdBoardAsync(idBoard, tags, ixLastUpdate, _callback);
        }
    }

    /**
     * getBoardsDeltasByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param tags A valid tag for subscribing (required)
     * @param ixLastUpdate a number from -1 to Infinity (required)
     * @return GetDeltasByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetDeltasByIdBoardRequestBuilder getDeltasByIdBoard(String idBoard, String tags, String ixLastUpdate) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (tags == null) throw new IllegalArgumentException("\"tags\" is required but got null");
            

        if (ixLastUpdate == null) throw new IllegalArgumentException("\"ixLastUpdate\" is required but got null");
            

        return new GetDeltasByIdBoardRequestBuilder(idBoard, tags, ixLastUpdate);
    }
    private okhttp3.Call getLabelsByIdBoardByIdLabelCall(String idBoard, String idLabel, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labels/{idLabel}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idLabel" + "}", localVarApiClient.escapeString(idLabel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLabelsByIdBoardByIdLabelValidateBeforeCall(String idBoard, String idLabel, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getLabelsByIdBoardByIdLabel(Async)");
        }

        // verify the required parameter 'idLabel' is set
        if (idLabel == null) {
            throw new ApiException("Missing the required parameter 'idLabel' when calling getLabelsByIdBoardByIdLabel(Async)");
        }

        return getLabelsByIdBoardByIdLabelCall(idBoard, idLabel, fields, _callback);

    }


    private ApiResponse<Void> getLabelsByIdBoardByIdLabelWithHttpInfo(String idBoard, String idLabel, String fields) throws ApiException {
        okhttp3.Call localVarCall = getLabelsByIdBoardByIdLabelValidateBeforeCall(idBoard, idLabel, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getLabelsByIdBoardByIdLabelAsync(String idBoard, String idLabel, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLabelsByIdBoardByIdLabelValidateBeforeCall(idBoard, idLabel, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetLabelsByIdBoardByIdLabelRequestBuilder {
        private final String idBoard;
        private final String idLabel;
        private String fields;

        private GetLabelsByIdBoardByIdLabelRequestBuilder(String idBoard, String idLabel) {
            this.idBoard = idBoard;
            this.idLabel = idLabel;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
         * @return GetLabelsByIdBoardByIdLabelRequestBuilder
         */
        public GetLabelsByIdBoardByIdLabelRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getLabelsByIdBoardByIdLabel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLabelsByIdBoardByIdLabelCall(idBoard, idLabel, fields, _callback);
        }


        /**
         * Execute getLabelsByIdBoardByIdLabel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getLabelsByIdBoardByIdLabelWithHttpInfo(idBoard, idLabel, fields);
        }

        /**
         * Execute getLabelsByIdBoardByIdLabel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getLabelsByIdBoardByIdLabelWithHttpInfo(idBoard, idLabel, fields);
        }

        /**
         * Execute getLabelsByIdBoardByIdLabel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getLabelsByIdBoardByIdLabelAsync(idBoard, idLabel, fields, _callback);
        }
    }

    /**
     * getBoardsLabelsByIdBoardByIdLabel()
     * 
     * @param idBoard board_id (required)
     * @param idLabel idLabel (required)
     * @return GetLabelsByIdBoardByIdLabelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetLabelsByIdBoardByIdLabelRequestBuilder getLabelsByIdBoardByIdLabel(String idBoard, String idLabel) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (idLabel == null) throw new IllegalArgumentException("\"idLabel\" is required but got null");
            

        return new GetLabelsByIdBoardByIdLabelRequestBuilder(idBoard, idLabel);
    }
    private okhttp3.Call getListsByFilterCall(String idBoard, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/lists/{filter}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListsByFilterValidateBeforeCall(String idBoard, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getListsByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getListsByFilter(Async)");
        }

        return getListsByFilterCall(idBoard, filter, _callback);

    }


    private ApiResponse<Void> getListsByFilterWithHttpInfo(String idBoard, String filter) throws ApiException {
        okhttp3.Call localVarCall = getListsByFilterValidateBeforeCall(idBoard, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getListsByFilterAsync(String idBoard, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListsByFilterValidateBeforeCall(idBoard, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetListsByFilterRequestBuilder {
        private final String idBoard;
        private final String filter;

        private GetListsByFilterRequestBuilder(String idBoard, String filter) {
            this.idBoard = idBoard;
            this.filter = filter;
        }

        /**
         * Build call for getListsByFilter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListsByFilterCall(idBoard, filter, _callback);
        }


        /**
         * Execute getListsByFilter request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getListsByFilterWithHttpInfo(idBoard, filter);
        }

        /**
         * Execute getListsByFilter request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getListsByFilterWithHttpInfo(idBoard, filter);
        }

        /**
         * Execute getListsByFilter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getListsByFilterAsync(idBoard, filter, _callback);
        }
    }

    /**
     * getBoardsListsByIdBoardByFilter()
     * 
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @return GetListsByFilterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetListsByFilterRequestBuilder getListsByFilter(String idBoard, String filter) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new GetListsByFilterRequestBuilder(idBoard, filter);
    }
    private okhttp3.Call getListsByIdBoardCall(String idBoard, String cards, String cardFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/lists"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards", cards));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListsByIdBoardValidateBeforeCall(String idBoard, String cards, String cardFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getListsByIdBoard(Async)");
        }

        return getListsByIdBoardCall(idBoard, cards, cardFields, filter, fields, _callback);

    }


    private ApiResponse<Void> getListsByIdBoardWithHttpInfo(String idBoard, String cards, String cardFields, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getListsByIdBoardValidateBeforeCall(idBoard, cards, cardFields, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getListsByIdBoardAsync(String idBoard, String cards, String cardFields, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListsByIdBoardValidateBeforeCall(idBoard, cards, cardFields, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetListsByIdBoardRequestBuilder {
        private final String idBoard;
        private String cards;
        private String cardFields;
        private String filter;
        private String fields;

        private GetListsByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set cards
         * @param cards One of: all, closed, none, open or visible (optional, default to none)
         * @return GetListsByIdBoardRequestBuilder
         */
        public GetListsByIdBoardRequestBuilder cards(String cards) {
            this.cards = cards;
            return this;
        }
        
        /**
         * Set cardFields
         * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetListsByIdBoardRequestBuilder
         */
        public GetListsByIdBoardRequestBuilder cardFields(String cardFields) {
            this.cardFields = cardFields;
            return this;
        }
        
        /**
         * Set filter
         * @param filter One of: all, closed, none or open (optional, default to open)
         * @return GetListsByIdBoardRequestBuilder
         */
        public GetListsByIdBoardRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
         * @return GetListsByIdBoardRequestBuilder
         */
        public GetListsByIdBoardRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getListsByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListsByIdBoardCall(idBoard, cards, cardFields, filter, fields, _callback);
        }


        /**
         * Execute getListsByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getListsByIdBoardWithHttpInfo(idBoard, cards, cardFields, filter, fields);
        }

        /**
         * Execute getListsByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getListsByIdBoardWithHttpInfo(idBoard, cards, cardFields, filter, fields);
        }

        /**
         * Execute getListsByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getListsByIdBoardAsync(idBoard, cards, cardFields, filter, fields, _callback);
        }
    }

    /**
     * getBoardsListsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return GetListsByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetListsByIdBoardRequestBuilder getListsByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new GetListsByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call getMembersByFilterCall(String idBoard, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/members/{filter}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersByFilterValidateBeforeCall(String idBoard, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getMembersByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getMembersByFilter(Async)");
        }

        return getMembersByFilterCall(idBoard, filter, _callback);

    }


    private ApiResponse<Void> getMembersByFilterWithHttpInfo(String idBoard, String filter) throws ApiException {
        okhttp3.Call localVarCall = getMembersByFilterValidateBeforeCall(idBoard, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMembersByFilterAsync(String idBoard, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersByFilterValidateBeforeCall(idBoard, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMembersByFilterRequestBuilder {
        private final String idBoard;
        private final String filter;

        private GetMembersByFilterRequestBuilder(String idBoard, String filter) {
            this.idBoard = idBoard;
            this.filter = filter;
        }

        /**
         * Build call for getMembersByFilter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersByFilterCall(idBoard, filter, _callback);
        }


        /**
         * Execute getMembersByFilter request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMembersByFilterWithHttpInfo(idBoard, filter);
        }

        /**
         * Execute getMembersByFilter request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMembersByFilterWithHttpInfo(idBoard, filter);
        }

        /**
         * Execute getMembersByFilter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMembersByFilterAsync(idBoard, filter, _callback);
        }
    }

    /**
     * getBoardsMembersByIdBoardByFilter()
     * 
     * @param idBoard board_id (required)
     * @param filter filter (required)
     * @return GetMembersByFilterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMembersByFilterRequestBuilder getMembersByFilter(String idBoard, String filter) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new GetMembersByFilterRequestBuilder(idBoard, filter);
    }
    private okhttp3.Call getMembersByIdBoardCall(String idBoard, String filter, String fields, String activity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/members"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (activity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity", activity));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersByIdBoardValidateBeforeCall(String idBoard, String filter, String fields, String activity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getMembersByIdBoard(Async)");
        }

        return getMembersByIdBoardCall(idBoard, filter, fields, activity, _callback);

    }


    private ApiResponse<Void> getMembersByIdBoardWithHttpInfo(String idBoard, String filter, String fields, String activity) throws ApiException {
        okhttp3.Call localVarCall = getMembersByIdBoardValidateBeforeCall(idBoard, filter, fields, activity, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMembersByIdBoardAsync(String idBoard, String filter, String fields, String activity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersByIdBoardValidateBeforeCall(idBoard, filter, fields, activity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMembersByIdBoardRequestBuilder {
        private final String idBoard;
        private String filter;
        private String fields;
        private String activity;

        private GetMembersByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set filter
         * @param filter One of: admins, all, none, normal or owners (optional, default to all)
         * @return GetMembersByIdBoardRequestBuilder
         */
        public GetMembersByIdBoardRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
         * @return GetMembersByIdBoardRequestBuilder
         */
        public GetMembersByIdBoardRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set activity
         * @param activity true or false ; works for premium organizations only. (optional)
         * @return GetMembersByIdBoardRequestBuilder
         */
        public GetMembersByIdBoardRequestBuilder activity(String activity) {
            this.activity = activity;
            return this;
        }
        
        /**
         * Build call for getMembersByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersByIdBoardCall(idBoard, filter, fields, activity, _callback);
        }


        /**
         * Execute getMembersByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMembersByIdBoardWithHttpInfo(idBoard, filter, fields, activity);
        }

        /**
         * Execute getMembersByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMembersByIdBoardWithHttpInfo(idBoard, filter, fields, activity);
        }

        /**
         * Execute getMembersByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMembersByIdBoardAsync(idBoard, filter, fields, activity, _callback);
        }
    }

    /**
     * getBoardsMembersByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return GetMembersByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMembersByIdBoardRequestBuilder getMembersByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new GetMembersByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call getMembersCardsByIdBoardByIdMemberCall(String idBoard, String idMember, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String list, String listFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/members/{idMember}/cards"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (board != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board", board));
        }

        if (boardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_fields", boardFields));
        }

        if (list != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list", list));
        }

        if (listFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_fields", listFields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersCardsByIdBoardByIdMemberValidateBeforeCall(String idBoard, String idMember, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String list, String listFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getMembersCardsByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersCardsByIdBoardByIdMember(Async)");
        }

        return getMembersCardsByIdBoardByIdMemberCall(idBoard, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields, _callback);

    }


    private ApiResponse<Void> getMembersCardsByIdBoardByIdMemberWithHttpInfo(String idBoard, String idMember, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String list, String listFields, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMembersCardsByIdBoardByIdMemberValidateBeforeCall(idBoard, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMembersCardsByIdBoardByIdMemberAsync(String idBoard, String idMember, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String list, String listFields, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersCardsByIdBoardByIdMemberValidateBeforeCall(idBoard, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMembersCardsByIdBoardByIdMemberRequestBuilder {
        private final String idBoard;
        private final String idMember;
        private String actions;
        private String attachments;
        private String attachmentFields;
        private String members;
        private String memberFields;
        private String checkItemStates;
        private String checklists;
        private String board;
        private String boardFields;
        private String list;
        private String listFields;
        private String filter;
        private String fields;

        private GetMembersCardsByIdBoardByIdMemberRequestBuilder(String idBoard, String idMember) {
            this.idBoard = idBoard;
            this.idMember = idMember;
        }

        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder attachments(String attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set attachmentFields
         * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder attachmentFields(String attachmentFields) {
            this.attachmentFields = attachmentFields;
            return this;
        }
        
        /**
         * Set members
         * @param members  true or false (optional)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder members(String members) {
            this.members = members;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set checkItemStates
         * @param checkItemStates  true or false (optional)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder checkItemStates(String checkItemStates) {
            this.checkItemStates = checkItemStates;
            return this;
        }
        
        /**
         * Set checklists
         * @param checklists One of: all or none (optional, default to none)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder checklists(String checklists) {
            this.checklists = checklists;
            return this;
        }
        
        /**
         * Set board
         * @param board  true or false (optional)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder board(String board) {
            this.board = board;
            return this;
        }
        
        /**
         * Set boardFields
         * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, closed, idOrganization, pinned, url and prefs)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder boardFields(String boardFields) {
            this.boardFields = boardFields;
            return this;
        }
        
        /**
         * Set list
         * @param list  true or false (optional)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder list(String list) {
            this.list = list;
            return this;
        }
        
        /**
         * Set listFields
         * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder listFields(String listFields) {
            this.listFields = listFields;
            return this;
        }
        
        /**
         * Set filter
         * @param filter One of: all, closed, none, open or visible (optional, default to visible)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
         */
        public GetMembersCardsByIdBoardByIdMemberRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getMembersCardsByIdBoardByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersCardsByIdBoardByIdMemberCall(idBoard, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields, _callback);
        }


        /**
         * Execute getMembersCardsByIdBoardByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMembersCardsByIdBoardByIdMemberWithHttpInfo(idBoard, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields);
        }

        /**
         * Execute getMembersCardsByIdBoardByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMembersCardsByIdBoardByIdMemberWithHttpInfo(idBoard, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields);
        }

        /**
         * Execute getMembersCardsByIdBoardByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMembersCardsByIdBoardByIdMemberAsync(idBoard, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields, _callback);
        }
    }

    /**
     * getBoardsMembersCardsByIdBoardByIdMember()
     * 
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @return GetMembersCardsByIdBoardByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMembersCardsByIdBoardByIdMemberRequestBuilder getMembersCardsByIdBoardByIdMember(String idBoard, String idMember) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new GetMembersCardsByIdBoardByIdMemberRequestBuilder(idBoard, idMember);
    }
    private okhttp3.Call getMembersInvitedByFieldCall(String idBoard, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/membersInvited/{field}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersInvitedByFieldValidateBeforeCall(String idBoard, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getMembersInvitedByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getMembersInvitedByField(Async)");
        }

        return getMembersInvitedByFieldCall(idBoard, field, _callback);

    }


    private ApiResponse<Void> getMembersInvitedByFieldWithHttpInfo(String idBoard, String field) throws ApiException {
        okhttp3.Call localVarCall = getMembersInvitedByFieldValidateBeforeCall(idBoard, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMembersInvitedByFieldAsync(String idBoard, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersInvitedByFieldValidateBeforeCall(idBoard, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMembersInvitedByFieldRequestBuilder {
        private final String idBoard;
        private final String field;

        private GetMembersInvitedByFieldRequestBuilder(String idBoard, String field) {
            this.idBoard = idBoard;
            this.field = field;
        }

        /**
         * Build call for getMembersInvitedByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersInvitedByFieldCall(idBoard, field, _callback);
        }


        /**
         * Execute getMembersInvitedByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMembersInvitedByFieldWithHttpInfo(idBoard, field);
        }

        /**
         * Execute getMembersInvitedByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMembersInvitedByFieldWithHttpInfo(idBoard, field);
        }

        /**
         * Execute getMembersInvitedByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMembersInvitedByFieldAsync(idBoard, field, _callback);
        }
    }

    /**
     * getBoardsMembersInvitedByIdBoardByField()
     * 
     * @param idBoard board_id (required)
     * @param field field (required)
     * @return GetMembersInvitedByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMembersInvitedByFieldRequestBuilder getMembersInvitedByField(String idBoard, String field) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetMembersInvitedByFieldRequestBuilder(idBoard, field);
    }
    private okhttp3.Call getMembersInvitedByIdBoardCall(String idBoard, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/membersInvited"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersInvitedByIdBoardValidateBeforeCall(String idBoard, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getMembersInvitedByIdBoard(Async)");
        }

        return getMembersInvitedByIdBoardCall(idBoard, fields, _callback);

    }


    private ApiResponse<Void> getMembersInvitedByIdBoardWithHttpInfo(String idBoard, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMembersInvitedByIdBoardValidateBeforeCall(idBoard, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMembersInvitedByIdBoardAsync(String idBoard, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersInvitedByIdBoardValidateBeforeCall(idBoard, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMembersInvitedByIdBoardRequestBuilder {
        private final String idBoard;
        private String fields;

        private GetMembersInvitedByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
         * @return GetMembersInvitedByIdBoardRequestBuilder
         */
        public GetMembersInvitedByIdBoardRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getMembersInvitedByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersInvitedByIdBoardCall(idBoard, fields, _callback);
        }


        /**
         * Execute getMembersInvitedByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMembersInvitedByIdBoardWithHttpInfo(idBoard, fields);
        }

        /**
         * Execute getMembersInvitedByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMembersInvitedByIdBoardWithHttpInfo(idBoard, fields);
        }

        /**
         * Execute getMembersInvitedByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMembersInvitedByIdBoardAsync(idBoard, fields, _callback);
        }
    }

    /**
     * getBoardsMembersInvitedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return GetMembersInvitedByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMembersInvitedByIdBoardRequestBuilder getMembersInvitedByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new GetMembersInvitedByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call getMembershipsByIdBoardCall(String idBoard, String filter, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/memberships"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembershipsByIdBoardValidateBeforeCall(String idBoard, String filter, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getMembershipsByIdBoard(Async)");
        }

        return getMembershipsByIdBoardCall(idBoard, filter, member, memberFields, _callback);

    }


    private ApiResponse<Void> getMembershipsByIdBoardWithHttpInfo(String idBoard, String filter, String member, String memberFields) throws ApiException {
        okhttp3.Call localVarCall = getMembershipsByIdBoardValidateBeforeCall(idBoard, filter, member, memberFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMembershipsByIdBoardAsync(String idBoard, String filter, String member, String memberFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembershipsByIdBoardValidateBeforeCall(idBoard, filter, member, memberFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMembershipsByIdBoardRequestBuilder {
        private final String idBoard;
        private String filter;
        private String member;
        private String memberFields;

        private GetMembershipsByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set filter
         * @param filter all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to all)
         * @return GetMembershipsByIdBoardRequestBuilder
         */
        public GetMembershipsByIdBoardRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set member
         * @param member  true or false (optional)
         * @return GetMembershipsByIdBoardRequestBuilder
         */
        public GetMembershipsByIdBoardRequestBuilder member(String member) {
            this.member = member;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
         * @return GetMembershipsByIdBoardRequestBuilder
         */
        public GetMembershipsByIdBoardRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Build call for getMembershipsByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembershipsByIdBoardCall(idBoard, filter, member, memberFields, _callback);
        }


        /**
         * Execute getMembershipsByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMembershipsByIdBoardWithHttpInfo(idBoard, filter, member, memberFields);
        }

        /**
         * Execute getMembershipsByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMembershipsByIdBoardWithHttpInfo(idBoard, filter, member, memberFields);
        }

        /**
         * Execute getMembershipsByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMembershipsByIdBoardAsync(idBoard, filter, member, memberFields, _callback);
        }
    }

    /**
     * getBoardsMembershipsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return GetMembershipsByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMembershipsByIdBoardRequestBuilder getMembershipsByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new GetMembershipsByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call getMembershipsByIdBoardByIdMembershipCall(String idBoard, String idMembership, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/memberships/{idMembership}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idMembership" + "}", localVarApiClient.escapeString(idMembership.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembershipsByIdBoardByIdMembershipValidateBeforeCall(String idBoard, String idMembership, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getMembershipsByIdBoardByIdMembership(Async)");
        }

        // verify the required parameter 'idMembership' is set
        if (idMembership == null) {
            throw new ApiException("Missing the required parameter 'idMembership' when calling getMembershipsByIdBoardByIdMembership(Async)");
        }

        return getMembershipsByIdBoardByIdMembershipCall(idBoard, idMembership, member, memberFields, _callback);

    }


    private ApiResponse<Void> getMembershipsByIdBoardByIdMembershipWithHttpInfo(String idBoard, String idMembership, String member, String memberFields) throws ApiException {
        okhttp3.Call localVarCall = getMembershipsByIdBoardByIdMembershipValidateBeforeCall(idBoard, idMembership, member, memberFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMembershipsByIdBoardByIdMembershipAsync(String idBoard, String idMembership, String member, String memberFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembershipsByIdBoardByIdMembershipValidateBeforeCall(idBoard, idMembership, member, memberFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMembershipsByIdBoardByIdMembershipRequestBuilder {
        private final String idBoard;
        private final String idMembership;
        private String member;
        private String memberFields;

        private GetMembershipsByIdBoardByIdMembershipRequestBuilder(String idBoard, String idMembership) {
            this.idBoard = idBoard;
            this.idMembership = idMembership;
        }

        /**
         * Set member
         * @param member  true or false (optional)
         * @return GetMembershipsByIdBoardByIdMembershipRequestBuilder
         */
        public GetMembershipsByIdBoardByIdMembershipRequestBuilder member(String member) {
            this.member = member;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
         * @return GetMembershipsByIdBoardByIdMembershipRequestBuilder
         */
        public GetMembershipsByIdBoardByIdMembershipRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Build call for getMembershipsByIdBoardByIdMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembershipsByIdBoardByIdMembershipCall(idBoard, idMembership, member, memberFields, _callback);
        }


        /**
         * Execute getMembershipsByIdBoardByIdMembership request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMembershipsByIdBoardByIdMembershipWithHttpInfo(idBoard, idMembership, member, memberFields);
        }

        /**
         * Execute getMembershipsByIdBoardByIdMembership request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMembershipsByIdBoardByIdMembershipWithHttpInfo(idBoard, idMembership, member, memberFields);
        }

        /**
         * Execute getMembershipsByIdBoardByIdMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMembershipsByIdBoardByIdMembershipAsync(idBoard, idMembership, member, memberFields, _callback);
        }
    }

    /**
     * getBoardsMembershipsByIdBoardByIdMembership()
     * 
     * @param idBoard board_id (required)
     * @param idMembership idMembership (required)
     * @return GetMembershipsByIdBoardByIdMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMembershipsByIdBoardByIdMembershipRequestBuilder getMembershipsByIdBoardByIdMembership(String idBoard, String idMembership) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (idMembership == null) throw new IllegalArgumentException("\"idMembership\" is required but got null");
            

        return new GetMembershipsByIdBoardByIdMembershipRequestBuilder(idBoard, idMembership);
    }
    private okhttp3.Call getMyPrefsByIdCall(String idBoard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMyPrefsByIdValidateBeforeCall(String idBoard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getMyPrefsById(Async)");
        }

        return getMyPrefsByIdCall(idBoard, _callback);

    }


    private ApiResponse<Void> getMyPrefsByIdWithHttpInfo(String idBoard) throws ApiException {
        okhttp3.Call localVarCall = getMyPrefsByIdValidateBeforeCall(idBoard, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMyPrefsByIdAsync(String idBoard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMyPrefsByIdValidateBeforeCall(idBoard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMyPrefsByIdRequestBuilder {
        private final String idBoard;

        private GetMyPrefsByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Build call for getMyPrefsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMyPrefsByIdCall(idBoard, _callback);
        }


        /**
         * Execute getMyPrefsById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMyPrefsByIdWithHttpInfo(idBoard);
        }

        /**
         * Execute getMyPrefsById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMyPrefsByIdWithHttpInfo(idBoard);
        }

        /**
         * Execute getMyPrefsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMyPrefsByIdAsync(idBoard, _callback);
        }
    }

    /**
     * getBoardsMyPrefsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return GetMyPrefsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMyPrefsByIdRequestBuilder getMyPrefsById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new GetMyPrefsByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call getOrganizationByIdCall(String idBoard, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/organization"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationByIdValidateBeforeCall(String idBoard, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getOrganizationById(Async)");
        }

        return getOrganizationByIdCall(idBoard, fields, _callback);

    }


    private ApiResponse<Void> getOrganizationByIdWithHttpInfo(String idBoard, String fields) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationByIdValidateBeforeCall(idBoard, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getOrganizationByIdAsync(String idBoard, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationByIdValidateBeforeCall(idBoard, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetOrganizationByIdRequestBuilder {
        private final String idBoard;
        private String fields;

        private GetOrganizationByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
         * @return GetOrganizationByIdRequestBuilder
         */
        public GetOrganizationByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getOrganizationById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationByIdCall(idBoard, fields, _callback);
        }


        /**
         * Execute getOrganizationById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getOrganizationByIdWithHttpInfo(idBoard, fields);
        }

        /**
         * Execute getOrganizationById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getOrganizationByIdWithHttpInfo(idBoard, fields);
        }

        /**
         * Execute getOrganizationById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getOrganizationByIdAsync(idBoard, fields, _callback);
        }
    }

    /**
     * getBoardsOrganizationByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return GetOrganizationByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationByIdRequestBuilder getOrganizationById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new GetOrganizationByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call getOrganizationByIdBoardByFieldCall(String idBoard, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/organization/{field}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationByIdBoardByFieldValidateBeforeCall(String idBoard, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling getOrganizationByIdBoardByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getOrganizationByIdBoardByField(Async)");
        }

        return getOrganizationByIdBoardByFieldCall(idBoard, field, _callback);

    }


    private ApiResponse<Void> getOrganizationByIdBoardByFieldWithHttpInfo(String idBoard, String field) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationByIdBoardByFieldValidateBeforeCall(idBoard, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getOrganizationByIdBoardByFieldAsync(String idBoard, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationByIdBoardByFieldValidateBeforeCall(idBoard, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetOrganizationByIdBoardByFieldRequestBuilder {
        private final String idBoard;
        private final String field;

        private GetOrganizationByIdBoardByFieldRequestBuilder(String idBoard, String field) {
            this.idBoard = idBoard;
            this.field = field;
        }

        /**
         * Build call for getOrganizationByIdBoardByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationByIdBoardByFieldCall(idBoard, field, _callback);
        }


        /**
         * Execute getOrganizationByIdBoardByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getOrganizationByIdBoardByFieldWithHttpInfo(idBoard, field);
        }

        /**
         * Execute getOrganizationByIdBoardByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getOrganizationByIdBoardByFieldWithHttpInfo(idBoard, field);
        }

        /**
         * Execute getOrganizationByIdBoardByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getOrganizationByIdBoardByFieldAsync(idBoard, field, _callback);
        }
    }

    /**
     * getBoardsOrganizationByIdBoardByField()
     * 
     * @param idBoard board_id (required)
     * @param field field (required)
     * @return GetOrganizationByIdBoardByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationByIdBoardByFieldRequestBuilder getOrganizationByIdBoardByField(String idBoard, String field) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetOrganizationByIdBoardByFieldRequestBuilder(idBoard, field);
    }
    private okhttp3.Call listActionsByIdBoardCall(String idBoard, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/actions"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (idModels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idModels", idModels));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (memberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator", memberCreator));
        }

        if (memberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator_fields", memberCreatorFields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActionsByIdBoardValidateBeforeCall(String idBoard, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling listActionsByIdBoard(Async)");
        }

        return listActionsByIdBoardCall(idBoard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);

    }


    private ApiResponse<Void> listActionsByIdBoardWithHttpInfo(String idBoard, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields) throws ApiException {
        okhttp3.Call localVarCall = listActionsByIdBoardValidateBeforeCall(idBoard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listActionsByIdBoardAsync(String idBoard, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActionsByIdBoardValidateBeforeCall(idBoard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListActionsByIdBoardRequestBuilder {
        private final String idBoard;
        private String entities;
        private String display;
        private String filter;
        private String fields;
        private String limit;
        private String format;
        private String since;
        private String before;
        private String page;
        private String idModels;
        private String member;
        private String memberFields;
        private String memberCreator;
        private String memberCreatorFields;

        private ListActionsByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set entities
         * @param entities  true or false (optional)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder entities(String entities) {
            this.entities = entities;
            return this;
        }
        
        /**
         * Set display
         * @param display  true or false (optional)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder display(String display) {
            this.display = display;
            return this;
        }
        
        /**
         * Set filter
         * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to all)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set limit
         * @param limit a number from 0 to 1000 (optional, default to 50)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set format
         * @param format One of: count, list or minimal (optional, default to list)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set since
         * @param since A date, null or lastView (optional)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set before
         * @param before A date, or null (optional)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set page
         * @param page Page * limit must be less than 1000 (optional, default to 0)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set idModels
         * @param idModels Only return actions related to these model ids (optional)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder idModels(String idModels) {
            this.idModels = idModels;
            return this;
        }
        
        /**
         * Set member
         * @param member  true or false (optional)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder member(String member) {
            this.member = member;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set memberCreator
         * @param memberCreator  true or false (optional)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder memberCreator(String memberCreator) {
            this.memberCreator = memberCreator;
            return this;
        }
        
        /**
         * Set memberCreatorFields
         * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return ListActionsByIdBoardRequestBuilder
         */
        public ListActionsByIdBoardRequestBuilder memberCreatorFields(String memberCreatorFields) {
            this.memberCreatorFields = memberCreatorFields;
            return this;
        }
        
        /**
         * Build call for listActionsByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listActionsByIdBoardCall(idBoard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        }


        /**
         * Execute listActionsByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listActionsByIdBoardWithHttpInfo(idBoard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
        }

        /**
         * Execute listActionsByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listActionsByIdBoardWithHttpInfo(idBoard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
        }

        /**
         * Execute listActionsByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listActionsByIdBoardAsync(idBoard, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        }
    }

    /**
     * getBoardsActionsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return ListActionsByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListActionsByIdBoardRequestBuilder listActionsByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new ListActionsByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call listLabelsByIdBoardCall(String idBoard, String fields, String limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labels"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLabelsByIdBoardValidateBeforeCall(String idBoard, String fields, String limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling listLabelsByIdBoard(Async)");
        }

        return listLabelsByIdBoardCall(idBoard, fields, limit, _callback);

    }


    private ApiResponse<Void> listLabelsByIdBoardWithHttpInfo(String idBoard, String fields, String limit) throws ApiException {
        okhttp3.Call localVarCall = listLabelsByIdBoardValidateBeforeCall(idBoard, fields, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listLabelsByIdBoardAsync(String idBoard, String fields, String limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLabelsByIdBoardValidateBeforeCall(idBoard, fields, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListLabelsByIdBoardRequestBuilder {
        private final String idBoard;
        private String fields;
        private String limit;

        private ListLabelsByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: color, idBoard, name or uses (optional, default to all)
         * @return ListLabelsByIdBoardRequestBuilder
         */
        public ListLabelsByIdBoardRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set limit
         * @param limit a number from 0 to 1000 (optional, default to 50)
         * @return ListLabelsByIdBoardRequestBuilder
         */
        public ListLabelsByIdBoardRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listLabelsByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLabelsByIdBoardCall(idBoard, fields, limit, _callback);
        }


        /**
         * Execute listLabelsByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listLabelsByIdBoardWithHttpInfo(idBoard, fields, limit);
        }

        /**
         * Execute listLabelsByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listLabelsByIdBoardWithHttpInfo(idBoard, fields, limit);
        }

        /**
         * Execute listLabelsByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listLabelsByIdBoardAsync(idBoard, fields, limit, _callback);
        }
    }

    /**
     * getBoardsLabelsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return ListLabelsByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListLabelsByIdBoardRequestBuilder listLabelsByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new ListLabelsByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call markAsViewedByIdBoardCall(String idBoard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/markAsViewed"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markAsViewedByIdBoardValidateBeforeCall(String idBoard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling markAsViewedByIdBoard(Async)");
        }

        return markAsViewedByIdBoardCall(idBoard, _callback);

    }


    private ApiResponse<Void> markAsViewedByIdBoardWithHttpInfo(String idBoard) throws ApiException {
        okhttp3.Call localVarCall = markAsViewedByIdBoardValidateBeforeCall(idBoard, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call markAsViewedByIdBoardAsync(String idBoard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markAsViewedByIdBoardValidateBeforeCall(idBoard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class MarkAsViewedByIdBoardRequestBuilder {
        private final String idBoard;

        private MarkAsViewedByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Build call for markAsViewedByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return markAsViewedByIdBoardCall(idBoard, _callback);
        }


        /**
         * Execute markAsViewedByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            markAsViewedByIdBoardWithHttpInfo(idBoard);
        }

        /**
         * Execute markAsViewedByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return markAsViewedByIdBoardWithHttpInfo(idBoard);
        }

        /**
         * Execute markAsViewedByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return markAsViewedByIdBoardAsync(idBoard, _callback);
        }
    }

    /**
     * addBoardsMarkAsViewedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @return MarkAsViewedByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public MarkAsViewedByIdBoardRequestBuilder markAsViewedByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new MarkAsViewedByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call removeMemberCall(String idBoard, String idMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/members/{idMember}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMemberValidateBeforeCall(String idBoard, String idMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling removeMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling removeMember(Async)");
        }

        return removeMemberCall(idBoard, idMember, _callback);

    }


    private ApiResponse<Void> removeMemberWithHttpInfo(String idBoard, String idMember) throws ApiException {
        okhttp3.Call localVarCall = removeMemberValidateBeforeCall(idBoard, idMember, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMemberAsync(String idBoard, String idMember, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMemberValidateBeforeCall(idBoard, idMember, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMemberRequestBuilder {
        private final String idBoard;
        private final String idMember;

        private RemoveMemberRequestBuilder(String idBoard, String idMember) {
            this.idBoard = idBoard;
            this.idMember = idMember;
        }

        /**
         * Build call for removeMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMemberCall(idBoard, idMember, _callback);
        }


        /**
         * Execute removeMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeMemberWithHttpInfo(idBoard, idMember);
        }

        /**
         * Execute removeMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeMemberWithHttpInfo(idBoard, idMember);
        }

        /**
         * Execute removeMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeMemberAsync(idBoard, idMember, _callback);
        }
    }

    /**
     * deleteBoardsMembersByIdBoardByIdMember()
     * 
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @return RemoveMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMemberRequestBuilder removeMember(String idBoard, String idMember) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new RemoveMemberRequestBuilder(idBoard, idMember);
    }
    private okhttp3.Call removePowerUpCall(String idBoard, String powerUp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/powerUps/{powerUp}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "powerUp" + "}", localVarApiClient.escapeString(powerUp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePowerUpValidateBeforeCall(String idBoard, String powerUp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling removePowerUp(Async)");
        }

        // verify the required parameter 'powerUp' is set
        if (powerUp == null) {
            throw new ApiException("Missing the required parameter 'powerUp' when calling removePowerUp(Async)");
        }

        return removePowerUpCall(idBoard, powerUp, _callback);

    }


    private ApiResponse<Void> removePowerUpWithHttpInfo(String idBoard, String powerUp) throws ApiException {
        okhttp3.Call localVarCall = removePowerUpValidateBeforeCall(idBoard, powerUp, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePowerUpAsync(String idBoard, String powerUp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePowerUpValidateBeforeCall(idBoard, powerUp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePowerUpRequestBuilder {
        private final String idBoard;
        private final String powerUp;

        private RemovePowerUpRequestBuilder(String idBoard, String powerUp) {
            this.idBoard = idBoard;
            this.powerUp = powerUp;
        }

        /**
         * Build call for removePowerUp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePowerUpCall(idBoard, powerUp, _callback);
        }


        /**
         * Execute removePowerUp request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePowerUpWithHttpInfo(idBoard, powerUp);
        }

        /**
         * Execute removePowerUp request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePowerUpWithHttpInfo(idBoard, powerUp);
        }

        /**
         * Execute removePowerUp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePowerUpAsync(idBoard, powerUp, _callback);
        }
    }

    /**
     * deleteBoardsPowerUpsByIdBoardByPowerUp()
     * 
     * @param idBoard board_id (required)
     * @param powerUp powerUp (required)
     * @return RemovePowerUpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemovePowerUpRequestBuilder removePowerUp(String idBoard, String powerUp) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (powerUp == null) throw new IllegalArgumentException("\"powerUp\" is required but got null");
            

        return new RemovePowerUpRequestBuilder(idBoard, powerUp);
    }
    private okhttp3.Call updateByIdCall(String idBoard, Boards boards, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boards;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String idBoard, Boards boards, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateById(Async)");
        }

        // verify the required parameter 'boards' is set
        if (boards == null) {
            throw new ApiException("Missing the required parameter 'boards' when calling updateById(Async)");
        }

        return updateByIdCall(idBoard, boards, _callback);

    }


    private ApiResponse<Void> updateByIdWithHttpInfo(String idBoard, Boards boards) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(idBoard, boards, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdAsync(String idBoard, Boards boards, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(idBoard, boards, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String idBoard;
        private String closed;
        private String desc;
        private String idBoardSource;
        private String idOrganization;
        private String keepFromSource;
        private String labelNamesBlue;
        private String labelNamesGreen;
        private String labelNamesOrange;
        private String labelNamesPurple;
        private String labelNamesRed;
        private String labelNamesYellow;
        private String name;
        private String powerUps;
        private String prefsBackground;
        private String prefsCalendarFeedEnabled;
        private String prefsCardAging;
        private String prefsCardCovers;
        private String prefsComments;
        private String prefsInvitations;
        private String prefsPermissionLevel;
        private String prefsSelfJoin;
        private String prefsVoting;
        private String prefsBackground;
        private String prefsCardAging;
        private String prefsCardCovers;
        private String prefsComments;
        private String prefsInvitations;
        private String prefsPermissionLevel;
        private String prefsSelfJoin;
        private String prefsVoting;
        private String subscribed;

        private UpdateByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set closed
         * @param closed  true or false (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder closed(String closed) {
            this.closed = closed;
            return this;
        }
        
        /**
         * Set desc
         * @param desc a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder desc(String desc) {
            this.desc = desc;
            return this;
        }
        
        /**
         * Set idBoardSource
         * @param idBoardSource The id of the board to copy into the new board (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder idBoardSource(String idBoardSource) {
            this.idBoardSource = idBoardSource;
            return this;
        }
        
        /**
         * Set idOrganization
         * @param idOrganization The id or name of the organization to add the board to. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder idOrganization(String idOrganization) {
            this.idOrganization = idOrganization;
            return this;
        }
        
        /**
         * Set keepFromSource
         * @param keepFromSource Components of the source board to copy. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder keepFromSource(String keepFromSource) {
            this.keepFromSource = keepFromSource;
            return this;
        }
        
        /**
         * Set labelNamesBlue
         * @param labelNamesBlue a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder labelNamesBlue(String labelNamesBlue) {
            this.labelNamesBlue = labelNamesBlue;
            return this;
        }
        
        /**
         * Set labelNamesGreen
         * @param labelNamesGreen a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder labelNamesGreen(String labelNamesGreen) {
            this.labelNamesGreen = labelNamesGreen;
            return this;
        }
        
        /**
         * Set labelNamesOrange
         * @param labelNamesOrange a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder labelNamesOrange(String labelNamesOrange) {
            this.labelNamesOrange = labelNamesOrange;
            return this;
        }
        
        /**
         * Set labelNamesPurple
         * @param labelNamesPurple a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder labelNamesPurple(String labelNamesPurple) {
            this.labelNamesPurple = labelNamesPurple;
            return this;
        }
        
        /**
         * Set labelNamesRed
         * @param labelNamesRed a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder labelNamesRed(String labelNamesRed) {
            this.labelNamesRed = labelNamesRed;
            return this;
        }
        
        /**
         * Set labelNamesYellow
         * @param labelNamesYellow a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder labelNamesYellow(String labelNamesYellow) {
            this.labelNamesYellow = labelNamesYellow;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 1 to 16384 (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set powerUps
         * @param powerUps all or a comma-separated list of: calendar, cardAging, recap or voting (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder powerUps(String powerUps) {
            this.powerUps = powerUps;
            return this;
        }
        
        /**
         * Set prefsBackground
         * @param prefsBackground A standard background name, or the id of a custom background (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsBackground(String prefsBackground) {
            this.prefsBackground = prefsBackground;
            return this;
        }
        
        /**
         * Set prefsCalendarFeedEnabled
         * @param prefsCalendarFeedEnabled  true or false (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsCalendarFeedEnabled(String prefsCalendarFeedEnabled) {
            this.prefsCalendarFeedEnabled = prefsCalendarFeedEnabled;
            return this;
        }
        
        /**
         * Set prefsCardAging
         * @param prefsCardAging One of: pirate or regular (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsCardAging(String prefsCardAging) {
            this.prefsCardAging = prefsCardAging;
            return this;
        }
        
        /**
         * Set prefsCardCovers
         * @param prefsCardCovers  true or false (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsCardCovers(String prefsCardCovers) {
            this.prefsCardCovers = prefsCardCovers;
            return this;
        }
        
        /**
         * Set prefsComments
         * @param prefsComments One of: disabled, members, observers, org or public (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsComments(String prefsComments) {
            this.prefsComments = prefsComments;
            return this;
        }
        
        /**
         * Set prefsInvitations
         * @param prefsInvitations One of: admins or members (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsInvitations(String prefsInvitations) {
            this.prefsInvitations = prefsInvitations;
            return this;
        }
        
        /**
         * Set prefsPermissionLevel
         * @param prefsPermissionLevel One of: org, private or public (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsPermissionLevel(String prefsPermissionLevel) {
            this.prefsPermissionLevel = prefsPermissionLevel;
            return this;
        }
        
        /**
         * Set prefsSelfJoin
         * @param prefsSelfJoin  true or false (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsSelfJoin(String prefsSelfJoin) {
            this.prefsSelfJoin = prefsSelfJoin;
            return this;
        }
        
        /**
         * Set prefsVoting
         * @param prefsVoting One of: disabled, members, observers, org or public (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsVoting(String prefsVoting) {
            this.prefsVoting = prefsVoting;
            return this;
        }
        
        /**
         * Set prefsBackground
         * @param prefsBackground a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsBackground(String prefsBackground) {
            this.prefsBackground = prefsBackground;
            return this;
        }
        
        /**
         * Set prefsCardAging
         * @param prefsCardAging One of: pirate or regular (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsCardAging(String prefsCardAging) {
            this.prefsCardAging = prefsCardAging;
            return this;
        }
        
        /**
         * Set prefsCardCovers
         * @param prefsCardCovers  true or false (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsCardCovers(String prefsCardCovers) {
            this.prefsCardCovers = prefsCardCovers;
            return this;
        }
        
        /**
         * Set prefsComments
         * @param prefsComments One of: disabled, members, observers, org or public (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsComments(String prefsComments) {
            this.prefsComments = prefsComments;
            return this;
        }
        
        /**
         * Set prefsInvitations
         * @param prefsInvitations One of: admins or members (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsInvitations(String prefsInvitations) {
            this.prefsInvitations = prefsInvitations;
            return this;
        }
        
        /**
         * Set prefsPermissionLevel
         * @param prefsPermissionLevel One of: org, private or public (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsPermissionLevel(String prefsPermissionLevel) {
            this.prefsPermissionLevel = prefsPermissionLevel;
            return this;
        }
        
        /**
         * Set prefsSelfJoin
         * @param prefsSelfJoin  true or false (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsSelfJoin(String prefsSelfJoin) {
            this.prefsSelfJoin = prefsSelfJoin;
            return this;
        }
        
        /**
         * Set prefsVoting
         * @param prefsVoting One of: disabled, members, observers, org or public (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder prefsVoting(String prefsVoting) {
            this.prefsVoting = prefsVoting;
            return this;
        }
        
        /**
         * Set subscribed
         * @param subscribed  true or false (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder subscribed(String subscribed) {
            this.subscribed = subscribed;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Boards boards = buildBodyParams();
            return updateByIdCall(idBoard, boards, _callback);
        }

        private Boards buildBodyParams() {
            Boards boards = new Boards();
            boards.closed(this.closed);
            boards.desc(this.desc);
            boards.idBoardSource(this.idBoardSource);
            boards.idOrganization(this.idOrganization);
            boards.keepFromSource(this.keepFromSource);
            boards.labelNamesBlue(this.labelNamesBlue);
            boards.labelNamesGreen(this.labelNamesGreen);
            boards.labelNamesOrange(this.labelNamesOrange);
            boards.labelNamesPurple(this.labelNamesPurple);
            boards.labelNamesRed(this.labelNamesRed);
            boards.labelNamesYellow(this.labelNamesYellow);
            boards.name(this.name);
            boards.powerUps(this.powerUps);
            boards.prefsBackground(this.prefsBackground);
            boards.prefsCalendarFeedEnabled(this.prefsCalendarFeedEnabled);
            boards.prefsCardAging(this.prefsCardAging);
            boards.prefsCardCovers(this.prefsCardCovers);
            boards.prefsComments(this.prefsComments);
            boards.prefsInvitations(this.prefsInvitations);
            boards.prefsPermissionLevel(this.prefsPermissionLevel);
            boards.prefsSelfJoin(this.prefsSelfJoin);
            boards.prefsVoting(this.prefsVoting);
            boards.prefsBackground(this.prefsBackground);
            boards.prefsCardAging(this.prefsCardAging);
            boards.prefsCardCovers(this.prefsCardCovers);
            boards.prefsComments(this.prefsComments);
            boards.prefsInvitations(this.prefsInvitations);
            boards.prefsPermissionLevel(this.prefsPermissionLevel);
            boards.prefsSelfJoin(this.prefsSelfJoin);
            boards.prefsVoting(this.prefsVoting);
            boards.subscribed(this.subscribed);
            return boards;
        }

        /**
         * Execute updateById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Boards boards = buildBodyParams();
            updateByIdWithHttpInfo(idBoard, boards);
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Boards boards = buildBodyParams();
            return updateByIdWithHttpInfo(idBoard, boards);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Boards boards = buildBodyParams();
            return updateByIdAsync(idBoard, boards, _callback);
        }
    }

    /**
     * updateBoardsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param boards Attributes of \&quot;Boards\&quot; to be updated. (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call updateClosedByIdCall(String idBoard, BoardsClosed boardsClosed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsClosed;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/closed"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClosedByIdValidateBeforeCall(String idBoard, BoardsClosed boardsClosed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateClosedById(Async)");
        }

        // verify the required parameter 'boardsClosed' is set
        if (boardsClosed == null) {
            throw new ApiException("Missing the required parameter 'boardsClosed' when calling updateClosedById(Async)");
        }

        return updateClosedByIdCall(idBoard, boardsClosed, _callback);

    }


    private ApiResponse<Void> updateClosedByIdWithHttpInfo(String idBoard, BoardsClosed boardsClosed) throws ApiException {
        okhttp3.Call localVarCall = updateClosedByIdValidateBeforeCall(idBoard, boardsClosed, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateClosedByIdAsync(String idBoard, BoardsClosed boardsClosed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClosedByIdValidateBeforeCall(idBoard, boardsClosed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateClosedByIdRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateClosedByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateClosedByIdRequestBuilder
         */
        public UpdateClosedByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateClosedById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BoardsClosed boardsClosed = buildBodyParams();
            return updateClosedByIdCall(idBoard, boardsClosed, _callback);
        }

        private BoardsClosed buildBodyParams() {
            BoardsClosed boardsClosed = new BoardsClosed();
            boardsClosed.value(this.value);
            return boardsClosed;
        }

        /**
         * Execute updateClosedById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BoardsClosed boardsClosed = buildBodyParams();
            updateClosedByIdWithHttpInfo(idBoard, boardsClosed);
        }

        /**
         * Execute updateClosedById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BoardsClosed boardsClosed = buildBodyParams();
            return updateClosedByIdWithHttpInfo(idBoard, boardsClosed);
        }

        /**
         * Execute updateClosedById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BoardsClosed boardsClosed = buildBodyParams();
            return updateClosedByIdAsync(idBoard, boardsClosed, _callback);
        }
    }

    /**
     * updateBoardsClosedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param boardsClosed Attributes of \&quot;Boards Closed\&quot; to be updated. (required)
     * @return UpdateClosedByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateClosedByIdRequestBuilder updateClosedById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateClosedByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call updateDescriptionByIdBoardCall(String idBoard, BoardsDesc boardsDesc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsDesc;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/desc"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDescriptionByIdBoardValidateBeforeCall(String idBoard, BoardsDesc boardsDesc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateDescriptionByIdBoard(Async)");
        }

        // verify the required parameter 'boardsDesc' is set
        if (boardsDesc == null) {
            throw new ApiException("Missing the required parameter 'boardsDesc' when calling updateDescriptionByIdBoard(Async)");
        }

        return updateDescriptionByIdBoardCall(idBoard, boardsDesc, _callback);

    }


    private ApiResponse<Void> updateDescriptionByIdBoardWithHttpInfo(String idBoard, BoardsDesc boardsDesc) throws ApiException {
        okhttp3.Call localVarCall = updateDescriptionByIdBoardValidateBeforeCall(idBoard, boardsDesc, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDescriptionByIdBoardAsync(String idBoard, BoardsDesc boardsDesc, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDescriptionByIdBoardValidateBeforeCall(idBoard, boardsDesc, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDescriptionByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateDescriptionByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateDescriptionByIdBoardRequestBuilder
         */
        public UpdateDescriptionByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateDescriptionByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BoardsDesc boardsDesc = buildBodyParams();
            return updateDescriptionByIdBoardCall(idBoard, boardsDesc, _callback);
        }

        private BoardsDesc buildBodyParams() {
            BoardsDesc boardsDesc = new BoardsDesc();
            boardsDesc.value(this.value);
            return boardsDesc;
        }

        /**
         * Execute updateDescriptionByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BoardsDesc boardsDesc = buildBodyParams();
            updateDescriptionByIdBoardWithHttpInfo(idBoard, boardsDesc);
        }

        /**
         * Execute updateDescriptionByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BoardsDesc boardsDesc = buildBodyParams();
            return updateDescriptionByIdBoardWithHttpInfo(idBoard, boardsDesc);
        }

        /**
         * Execute updateDescriptionByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BoardsDesc boardsDesc = buildBodyParams();
            return updateDescriptionByIdBoardAsync(idBoard, boardsDesc, _callback);
        }
    }

    /**
     * updateBoardsDescByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param boardsDesc Attributes of \&quot;Boards Desc\&quot; to be updated. (required)
     * @return UpdateDescriptionByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDescriptionByIdBoardRequestBuilder updateDescriptionByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateDescriptionByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updateLabelNamesBlueByIdCall(String idBoard, LabelNamesBlue labelNamesBlue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelNamesBlue;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labelNames/blue"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLabelNamesBlueByIdValidateBeforeCall(String idBoard, LabelNamesBlue labelNamesBlue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateLabelNamesBlueById(Async)");
        }

        // verify the required parameter 'labelNamesBlue' is set
        if (labelNamesBlue == null) {
            throw new ApiException("Missing the required parameter 'labelNamesBlue' when calling updateLabelNamesBlueById(Async)");
        }

        return updateLabelNamesBlueByIdCall(idBoard, labelNamesBlue, _callback);

    }


    private ApiResponse<Void> updateLabelNamesBlueByIdWithHttpInfo(String idBoard, LabelNamesBlue labelNamesBlue) throws ApiException {
        okhttp3.Call localVarCall = updateLabelNamesBlueByIdValidateBeforeCall(idBoard, labelNamesBlue, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLabelNamesBlueByIdAsync(String idBoard, LabelNamesBlue labelNamesBlue, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLabelNamesBlueByIdValidateBeforeCall(idBoard, labelNamesBlue, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLabelNamesBlueByIdRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateLabelNamesBlueByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateLabelNamesBlueByIdRequestBuilder
         */
        public UpdateLabelNamesBlueByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateLabelNamesBlueById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LabelNamesBlue labelNamesBlue = buildBodyParams();
            return updateLabelNamesBlueByIdCall(idBoard, labelNamesBlue, _callback);
        }

        private LabelNamesBlue buildBodyParams() {
            LabelNamesBlue labelNamesBlue = new LabelNamesBlue();
            labelNamesBlue.value(this.value);
            return labelNamesBlue;
        }

        /**
         * Execute updateLabelNamesBlueById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LabelNamesBlue labelNamesBlue = buildBodyParams();
            updateLabelNamesBlueByIdWithHttpInfo(idBoard, labelNamesBlue);
        }

        /**
         * Execute updateLabelNamesBlueById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LabelNamesBlue labelNamesBlue = buildBodyParams();
            return updateLabelNamesBlueByIdWithHttpInfo(idBoard, labelNamesBlue);
        }

        /**
         * Execute updateLabelNamesBlueById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LabelNamesBlue labelNamesBlue = buildBodyParams();
            return updateLabelNamesBlueByIdAsync(idBoard, labelNamesBlue, _callback);
        }
    }

    /**
     * updateBoardsLabelNamesBlueByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param labelNamesBlue Attributes of \&quot;Label Names Blue\&quot; to be updated. (required)
     * @return UpdateLabelNamesBlueByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLabelNamesBlueByIdRequestBuilder updateLabelNamesBlueById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateLabelNamesBlueByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call updateLabelNamesGreenByIdBoardPutCall(String idBoard, LabelNamesGreen labelNamesGreen, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelNamesGreen;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labelNames/green"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLabelNamesGreenByIdBoardPutValidateBeforeCall(String idBoard, LabelNamesGreen labelNamesGreen, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateLabelNamesGreenByIdBoardPut(Async)");
        }

        // verify the required parameter 'labelNamesGreen' is set
        if (labelNamesGreen == null) {
            throw new ApiException("Missing the required parameter 'labelNamesGreen' when calling updateLabelNamesGreenByIdBoardPut(Async)");
        }

        return updateLabelNamesGreenByIdBoardPutCall(idBoard, labelNamesGreen, _callback);

    }


    private ApiResponse<Void> updateLabelNamesGreenByIdBoardPutWithHttpInfo(String idBoard, LabelNamesGreen labelNamesGreen) throws ApiException {
        okhttp3.Call localVarCall = updateLabelNamesGreenByIdBoardPutValidateBeforeCall(idBoard, labelNamesGreen, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLabelNamesGreenByIdBoardPutAsync(String idBoard, LabelNamesGreen labelNamesGreen, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLabelNamesGreenByIdBoardPutValidateBeforeCall(idBoard, labelNamesGreen, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLabelNamesGreenByIdBoardPutRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateLabelNamesGreenByIdBoardPutRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateLabelNamesGreenByIdBoardPutRequestBuilder
         */
        public UpdateLabelNamesGreenByIdBoardPutRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateLabelNamesGreenByIdBoardPut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LabelNamesGreen labelNamesGreen = buildBodyParams();
            return updateLabelNamesGreenByIdBoardPutCall(idBoard, labelNamesGreen, _callback);
        }

        private LabelNamesGreen buildBodyParams() {
            LabelNamesGreen labelNamesGreen = new LabelNamesGreen();
            labelNamesGreen.value(this.value);
            return labelNamesGreen;
        }

        /**
         * Execute updateLabelNamesGreenByIdBoardPut request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LabelNamesGreen labelNamesGreen = buildBodyParams();
            updateLabelNamesGreenByIdBoardPutWithHttpInfo(idBoard, labelNamesGreen);
        }

        /**
         * Execute updateLabelNamesGreenByIdBoardPut request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LabelNamesGreen labelNamesGreen = buildBodyParams();
            return updateLabelNamesGreenByIdBoardPutWithHttpInfo(idBoard, labelNamesGreen);
        }

        /**
         * Execute updateLabelNamesGreenByIdBoardPut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LabelNamesGreen labelNamesGreen = buildBodyParams();
            return updateLabelNamesGreenByIdBoardPutAsync(idBoard, labelNamesGreen, _callback);
        }
    }

    /**
     * updateBoardsLabelNamesGreenByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param labelNamesGreen Attributes of \&quot;Label Names Green\&quot; to be updated. (required)
     * @return UpdateLabelNamesGreenByIdBoardPutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLabelNamesGreenByIdBoardPutRequestBuilder updateLabelNamesGreenByIdBoardPut(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateLabelNamesGreenByIdBoardPutRequestBuilder(idBoard);
    }
    private okhttp3.Call updateLabelNamesOrangeByIdBoardCall(String idBoard, LabelNamesOrange labelNamesOrange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelNamesOrange;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labelNames/orange"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLabelNamesOrangeByIdBoardValidateBeforeCall(String idBoard, LabelNamesOrange labelNamesOrange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateLabelNamesOrangeByIdBoard(Async)");
        }

        // verify the required parameter 'labelNamesOrange' is set
        if (labelNamesOrange == null) {
            throw new ApiException("Missing the required parameter 'labelNamesOrange' when calling updateLabelNamesOrangeByIdBoard(Async)");
        }

        return updateLabelNamesOrangeByIdBoardCall(idBoard, labelNamesOrange, _callback);

    }


    private ApiResponse<Void> updateLabelNamesOrangeByIdBoardWithHttpInfo(String idBoard, LabelNamesOrange labelNamesOrange) throws ApiException {
        okhttp3.Call localVarCall = updateLabelNamesOrangeByIdBoardValidateBeforeCall(idBoard, labelNamesOrange, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLabelNamesOrangeByIdBoardAsync(String idBoard, LabelNamesOrange labelNamesOrange, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLabelNamesOrangeByIdBoardValidateBeforeCall(idBoard, labelNamesOrange, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLabelNamesOrangeByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateLabelNamesOrangeByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateLabelNamesOrangeByIdBoardRequestBuilder
         */
        public UpdateLabelNamesOrangeByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateLabelNamesOrangeByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LabelNamesOrange labelNamesOrange = buildBodyParams();
            return updateLabelNamesOrangeByIdBoardCall(idBoard, labelNamesOrange, _callback);
        }

        private LabelNamesOrange buildBodyParams() {
            LabelNamesOrange labelNamesOrange = new LabelNamesOrange();
            labelNamesOrange.value(this.value);
            return labelNamesOrange;
        }

        /**
         * Execute updateLabelNamesOrangeByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LabelNamesOrange labelNamesOrange = buildBodyParams();
            updateLabelNamesOrangeByIdBoardWithHttpInfo(idBoard, labelNamesOrange);
        }

        /**
         * Execute updateLabelNamesOrangeByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LabelNamesOrange labelNamesOrange = buildBodyParams();
            return updateLabelNamesOrangeByIdBoardWithHttpInfo(idBoard, labelNamesOrange);
        }

        /**
         * Execute updateLabelNamesOrangeByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LabelNamesOrange labelNamesOrange = buildBodyParams();
            return updateLabelNamesOrangeByIdBoardAsync(idBoard, labelNamesOrange, _callback);
        }
    }

    /**
     * updateBoardsLabelNamesOrangeByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param labelNamesOrange Attributes of \&quot;Label Names Orange\&quot; to be updated. (required)
     * @return UpdateLabelNamesOrangeByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLabelNamesOrangeByIdBoardRequestBuilder updateLabelNamesOrangeByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateLabelNamesOrangeByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updateLabelNamesPurpleByIdBoardCall(String idBoard, LabelNamesPurple labelNamesPurple, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelNamesPurple;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labelNames/purple"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLabelNamesPurpleByIdBoardValidateBeforeCall(String idBoard, LabelNamesPurple labelNamesPurple, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateLabelNamesPurpleByIdBoard(Async)");
        }

        // verify the required parameter 'labelNamesPurple' is set
        if (labelNamesPurple == null) {
            throw new ApiException("Missing the required parameter 'labelNamesPurple' when calling updateLabelNamesPurpleByIdBoard(Async)");
        }

        return updateLabelNamesPurpleByIdBoardCall(idBoard, labelNamesPurple, _callback);

    }


    private ApiResponse<Void> updateLabelNamesPurpleByIdBoardWithHttpInfo(String idBoard, LabelNamesPurple labelNamesPurple) throws ApiException {
        okhttp3.Call localVarCall = updateLabelNamesPurpleByIdBoardValidateBeforeCall(idBoard, labelNamesPurple, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLabelNamesPurpleByIdBoardAsync(String idBoard, LabelNamesPurple labelNamesPurple, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLabelNamesPurpleByIdBoardValidateBeforeCall(idBoard, labelNamesPurple, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLabelNamesPurpleByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateLabelNamesPurpleByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateLabelNamesPurpleByIdBoardRequestBuilder
         */
        public UpdateLabelNamesPurpleByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateLabelNamesPurpleByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LabelNamesPurple labelNamesPurple = buildBodyParams();
            return updateLabelNamesPurpleByIdBoardCall(idBoard, labelNamesPurple, _callback);
        }

        private LabelNamesPurple buildBodyParams() {
            LabelNamesPurple labelNamesPurple = new LabelNamesPurple();
            labelNamesPurple.value(this.value);
            return labelNamesPurple;
        }

        /**
         * Execute updateLabelNamesPurpleByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LabelNamesPurple labelNamesPurple = buildBodyParams();
            updateLabelNamesPurpleByIdBoardWithHttpInfo(idBoard, labelNamesPurple);
        }

        /**
         * Execute updateLabelNamesPurpleByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LabelNamesPurple labelNamesPurple = buildBodyParams();
            return updateLabelNamesPurpleByIdBoardWithHttpInfo(idBoard, labelNamesPurple);
        }

        /**
         * Execute updateLabelNamesPurpleByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LabelNamesPurple labelNamesPurple = buildBodyParams();
            return updateLabelNamesPurpleByIdBoardAsync(idBoard, labelNamesPurple, _callback);
        }
    }

    /**
     * updateBoardsLabelNamesPurpleByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param labelNamesPurple Attributes of \&quot;Label Names Purple\&quot; to be updated. (required)
     * @return UpdateLabelNamesPurpleByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLabelNamesPurpleByIdBoardRequestBuilder updateLabelNamesPurpleByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateLabelNamesPurpleByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updateLabelNamesRedCall(String idBoard, LabelNamesRed labelNamesRed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelNamesRed;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labelNames/red"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLabelNamesRedValidateBeforeCall(String idBoard, LabelNamesRed labelNamesRed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateLabelNamesRed(Async)");
        }

        // verify the required parameter 'labelNamesRed' is set
        if (labelNamesRed == null) {
            throw new ApiException("Missing the required parameter 'labelNamesRed' when calling updateLabelNamesRed(Async)");
        }

        return updateLabelNamesRedCall(idBoard, labelNamesRed, _callback);

    }


    private ApiResponse<Void> updateLabelNamesRedWithHttpInfo(String idBoard, LabelNamesRed labelNamesRed) throws ApiException {
        okhttp3.Call localVarCall = updateLabelNamesRedValidateBeforeCall(idBoard, labelNamesRed, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLabelNamesRedAsync(String idBoard, LabelNamesRed labelNamesRed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLabelNamesRedValidateBeforeCall(idBoard, labelNamesRed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLabelNamesRedRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateLabelNamesRedRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateLabelNamesRedRequestBuilder
         */
        public UpdateLabelNamesRedRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateLabelNamesRed
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LabelNamesRed labelNamesRed = buildBodyParams();
            return updateLabelNamesRedCall(idBoard, labelNamesRed, _callback);
        }

        private LabelNamesRed buildBodyParams() {
            LabelNamesRed labelNamesRed = new LabelNamesRed();
            labelNamesRed.value(this.value);
            return labelNamesRed;
        }

        /**
         * Execute updateLabelNamesRed request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LabelNamesRed labelNamesRed = buildBodyParams();
            updateLabelNamesRedWithHttpInfo(idBoard, labelNamesRed);
        }

        /**
         * Execute updateLabelNamesRed request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LabelNamesRed labelNamesRed = buildBodyParams();
            return updateLabelNamesRedWithHttpInfo(idBoard, labelNamesRed);
        }

        /**
         * Execute updateLabelNamesRed request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LabelNamesRed labelNamesRed = buildBodyParams();
            return updateLabelNamesRedAsync(idBoard, labelNamesRed, _callback);
        }
    }

    /**
     * updateBoardsLabelNamesRedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param labelNamesRed Attributes of \&quot;Label Names Red\&quot; to be updated. (required)
     * @return UpdateLabelNamesRedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLabelNamesRedRequestBuilder updateLabelNamesRed(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateLabelNamesRedRequestBuilder(idBoard);
    }
    private okhttp3.Call updateLabelNamesYellowByIdBoardCall(String idBoard, LabelNamesYellow labelNamesYellow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelNamesYellow;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/labelNames/yellow"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLabelNamesYellowByIdBoardValidateBeforeCall(String idBoard, LabelNamesYellow labelNamesYellow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateLabelNamesYellowByIdBoard(Async)");
        }

        // verify the required parameter 'labelNamesYellow' is set
        if (labelNamesYellow == null) {
            throw new ApiException("Missing the required parameter 'labelNamesYellow' when calling updateLabelNamesYellowByIdBoard(Async)");
        }

        return updateLabelNamesYellowByIdBoardCall(idBoard, labelNamesYellow, _callback);

    }


    private ApiResponse<Void> updateLabelNamesYellowByIdBoardWithHttpInfo(String idBoard, LabelNamesYellow labelNamesYellow) throws ApiException {
        okhttp3.Call localVarCall = updateLabelNamesYellowByIdBoardValidateBeforeCall(idBoard, labelNamesYellow, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLabelNamesYellowByIdBoardAsync(String idBoard, LabelNamesYellow labelNamesYellow, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLabelNamesYellowByIdBoardValidateBeforeCall(idBoard, labelNamesYellow, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLabelNamesYellowByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateLabelNamesYellowByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateLabelNamesYellowByIdBoardRequestBuilder
         */
        public UpdateLabelNamesYellowByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateLabelNamesYellowByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LabelNamesYellow labelNamesYellow = buildBodyParams();
            return updateLabelNamesYellowByIdBoardCall(idBoard, labelNamesYellow, _callback);
        }

        private LabelNamesYellow buildBodyParams() {
            LabelNamesYellow labelNamesYellow = new LabelNamesYellow();
            labelNamesYellow.value(this.value);
            return labelNamesYellow;
        }

        /**
         * Execute updateLabelNamesYellowByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LabelNamesYellow labelNamesYellow = buildBodyParams();
            updateLabelNamesYellowByIdBoardWithHttpInfo(idBoard, labelNamesYellow);
        }

        /**
         * Execute updateLabelNamesYellowByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LabelNamesYellow labelNamesYellow = buildBodyParams();
            return updateLabelNamesYellowByIdBoardWithHttpInfo(idBoard, labelNamesYellow);
        }

        /**
         * Execute updateLabelNamesYellowByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LabelNamesYellow labelNamesYellow = buildBodyParams();
            return updateLabelNamesYellowByIdBoardAsync(idBoard, labelNamesYellow, _callback);
        }
    }

    /**
     * updateBoardsLabelNamesYellowByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param labelNamesYellow Attributes of \&quot;Label Names Yellow\&quot; to be updated. (required)
     * @return UpdateLabelNamesYellowByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLabelNamesYellowByIdBoardRequestBuilder updateLabelNamesYellowByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateLabelNamesYellowByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updateMembersByIdBoardCall(String idBoard, BoardsMembers boardsMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsMembers;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/members"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersByIdBoardValidateBeforeCall(String idBoard, BoardsMembers boardsMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateMembersByIdBoard(Async)");
        }

        // verify the required parameter 'boardsMembers' is set
        if (boardsMembers == null) {
            throw new ApiException("Missing the required parameter 'boardsMembers' when calling updateMembersByIdBoard(Async)");
        }

        return updateMembersByIdBoardCall(idBoard, boardsMembers, _callback);

    }


    private ApiResponse<Void> updateMembersByIdBoardWithHttpInfo(String idBoard, BoardsMembers boardsMembers) throws ApiException {
        okhttp3.Call localVarCall = updateMembersByIdBoardValidateBeforeCall(idBoard, boardsMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMembersByIdBoardAsync(String idBoard, BoardsMembers boardsMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersByIdBoardValidateBeforeCall(idBoard, boardsMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMembersByIdBoardRequestBuilder {
        private final String idBoard;
        private String email;
        private String fullName;
        private String type;

        private UpdateMembersByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set email
         * @param email An email address (optional)
         * @return UpdateMembersByIdBoardRequestBuilder
         */
        public UpdateMembersByIdBoardRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set fullName
         * @param fullName A string with a length of at least 1.  Cannot begin or end with a space. (optional)
         * @return UpdateMembersByIdBoardRequestBuilder
         */
        public UpdateMembersByIdBoardRequestBuilder fullName(String fullName) {
            this.fullName = fullName;
            return this;
        }
        
        /**
         * Set type
         * @param type One of: admin, normal or observer (optional)
         * @return UpdateMembersByIdBoardRequestBuilder
         */
        public UpdateMembersByIdBoardRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateMembersByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BoardsMembers boardsMembers = buildBodyParams();
            return updateMembersByIdBoardCall(idBoard, boardsMembers, _callback);
        }

        private BoardsMembers buildBodyParams() {
            BoardsMembers boardsMembers = new BoardsMembers();
            boardsMembers.email(this.email);
            boardsMembers.fullName(this.fullName);
            boardsMembers.type(this.type);
            return boardsMembers;
        }

        /**
         * Execute updateMembersByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BoardsMembers boardsMembers = buildBodyParams();
            updateMembersByIdBoardWithHttpInfo(idBoard, boardsMembers);
        }

        /**
         * Execute updateMembersByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BoardsMembers boardsMembers = buildBodyParams();
            return updateMembersByIdBoardWithHttpInfo(idBoard, boardsMembers);
        }

        /**
         * Execute updateMembersByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BoardsMembers boardsMembers = buildBodyParams();
            return updateMembersByIdBoardAsync(idBoard, boardsMembers, _callback);
        }
    }

    /**
     * updateBoardsMembersByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param boardsMembers Attributes of \&quot;Boards Members\&quot; to be updated. (required)
     * @return UpdateMembersByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMembersByIdBoardRequestBuilder updateMembersByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateMembersByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updateMembersByIdBoardByIdMemberCall(String idBoard, String idMember, BoardsMembers boardsMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsMembers;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/members/{idMember}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersByIdBoardByIdMemberValidateBeforeCall(String idBoard, String idMember, BoardsMembers boardsMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateMembersByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersByIdBoardByIdMember(Async)");
        }

        // verify the required parameter 'boardsMembers' is set
        if (boardsMembers == null) {
            throw new ApiException("Missing the required parameter 'boardsMembers' when calling updateMembersByIdBoardByIdMember(Async)");
        }

        return updateMembersByIdBoardByIdMemberCall(idBoard, idMember, boardsMembers, _callback);

    }


    private ApiResponse<Void> updateMembersByIdBoardByIdMemberWithHttpInfo(String idBoard, String idMember, BoardsMembers boardsMembers) throws ApiException {
        okhttp3.Call localVarCall = updateMembersByIdBoardByIdMemberValidateBeforeCall(idBoard, idMember, boardsMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMembersByIdBoardByIdMemberAsync(String idBoard, String idMember, BoardsMembers boardsMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersByIdBoardByIdMemberValidateBeforeCall(idBoard, idMember, boardsMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMembersByIdBoardByIdMemberRequestBuilder {
        private final String idBoard;
        private final String idMember;
        private String email;
        private String fullName;
        private String type;

        private UpdateMembersByIdBoardByIdMemberRequestBuilder(String idBoard, String idMember) {
            this.idBoard = idBoard;
            this.idMember = idMember;
        }

        /**
         * Set email
         * @param email An email address (optional)
         * @return UpdateMembersByIdBoardByIdMemberRequestBuilder
         */
        public UpdateMembersByIdBoardByIdMemberRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set fullName
         * @param fullName A string with a length of at least 1.  Cannot begin or end with a space. (optional)
         * @return UpdateMembersByIdBoardByIdMemberRequestBuilder
         */
        public UpdateMembersByIdBoardByIdMemberRequestBuilder fullName(String fullName) {
            this.fullName = fullName;
            return this;
        }
        
        /**
         * Set type
         * @param type One of: admin, normal or observer (optional)
         * @return UpdateMembersByIdBoardByIdMemberRequestBuilder
         */
        public UpdateMembersByIdBoardByIdMemberRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateMembersByIdBoardByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BoardsMembers boardsMembers = buildBodyParams();
            return updateMembersByIdBoardByIdMemberCall(idBoard, idMember, boardsMembers, _callback);
        }

        private BoardsMembers buildBodyParams() {
            BoardsMembers boardsMembers = new BoardsMembers();
            boardsMembers.email(this.email);
            boardsMembers.fullName(this.fullName);
            boardsMembers.type(this.type);
            return boardsMembers;
        }

        /**
         * Execute updateMembersByIdBoardByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BoardsMembers boardsMembers = buildBodyParams();
            updateMembersByIdBoardByIdMemberWithHttpInfo(idBoard, idMember, boardsMembers);
        }

        /**
         * Execute updateMembersByIdBoardByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BoardsMembers boardsMembers = buildBodyParams();
            return updateMembersByIdBoardByIdMemberWithHttpInfo(idBoard, idMember, boardsMembers);
        }

        /**
         * Execute updateMembersByIdBoardByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BoardsMembers boardsMembers = buildBodyParams();
            return updateMembersByIdBoardByIdMemberAsync(idBoard, idMember, boardsMembers, _callback);
        }
    }

    /**
     * updateBoardsMembersByIdBoardByIdMember()
     * 
     * @param idBoard board_id (required)
     * @param idMember idMember (required)
     * @param boardsMembers Attributes of \&quot;Boards Members\&quot; to be updated. (required)
     * @return UpdateMembersByIdBoardByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMembersByIdBoardByIdMemberRequestBuilder updateMembersByIdBoardByIdMember(String idBoard, String idMember) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UpdateMembersByIdBoardByIdMemberRequestBuilder(idBoard, idMember);
    }
    private okhttp3.Call updateMembershipsByIdBoardByIdMembershipCall(String idBoard, String idMembership, BoardsMemberships boardsMemberships, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsMemberships;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/memberships/{idMembership}"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()))
            .replace("{" + "idMembership" + "}", localVarApiClient.escapeString(idMembership.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembershipsByIdBoardByIdMembershipValidateBeforeCall(String idBoard, String idMembership, BoardsMemberships boardsMemberships, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateMembershipsByIdBoardByIdMembership(Async)");
        }

        // verify the required parameter 'idMembership' is set
        if (idMembership == null) {
            throw new ApiException("Missing the required parameter 'idMembership' when calling updateMembershipsByIdBoardByIdMembership(Async)");
        }

        // verify the required parameter 'boardsMemberships' is set
        if (boardsMemberships == null) {
            throw new ApiException("Missing the required parameter 'boardsMemberships' when calling updateMembershipsByIdBoardByIdMembership(Async)");
        }

        return updateMembershipsByIdBoardByIdMembershipCall(idBoard, idMembership, boardsMemberships, _callback);

    }


    private ApiResponse<Void> updateMembershipsByIdBoardByIdMembershipWithHttpInfo(String idBoard, String idMembership, BoardsMemberships boardsMemberships) throws ApiException {
        okhttp3.Call localVarCall = updateMembershipsByIdBoardByIdMembershipValidateBeforeCall(idBoard, idMembership, boardsMemberships, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMembershipsByIdBoardByIdMembershipAsync(String idBoard, String idMembership, BoardsMemberships boardsMemberships, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembershipsByIdBoardByIdMembershipValidateBeforeCall(idBoard, idMembership, boardsMemberships, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMembershipsByIdBoardByIdMembershipRequestBuilder {
        private final String idBoard;
        private final String idMembership;
        private String memberFields;
        private String type;

        private UpdateMembershipsByIdBoardByIdMembershipRequestBuilder(String idBoard, String idMembership) {
            this.idBoard = idBoard;
            this.idMembership = idMembership;
        }

        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional)
         * @return UpdateMembershipsByIdBoardByIdMembershipRequestBuilder
         */
        public UpdateMembershipsByIdBoardByIdMembershipRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set type
         * @param type One of: admin, normal or observer (optional)
         * @return UpdateMembershipsByIdBoardByIdMembershipRequestBuilder
         */
        public UpdateMembershipsByIdBoardByIdMembershipRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateMembershipsByIdBoardByIdMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BoardsMemberships boardsMemberships = buildBodyParams();
            return updateMembershipsByIdBoardByIdMembershipCall(idBoard, idMembership, boardsMemberships, _callback);
        }

        private BoardsMemberships buildBodyParams() {
            BoardsMemberships boardsMemberships = new BoardsMemberships();
            boardsMemberships.memberFields(this.memberFields);
            boardsMemberships.type(this.type);
            return boardsMemberships;
        }

        /**
         * Execute updateMembershipsByIdBoardByIdMembership request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BoardsMemberships boardsMemberships = buildBodyParams();
            updateMembershipsByIdBoardByIdMembershipWithHttpInfo(idBoard, idMembership, boardsMemberships);
        }

        /**
         * Execute updateMembershipsByIdBoardByIdMembership request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BoardsMemberships boardsMemberships = buildBodyParams();
            return updateMembershipsByIdBoardByIdMembershipWithHttpInfo(idBoard, idMembership, boardsMemberships);
        }

        /**
         * Execute updateMembershipsByIdBoardByIdMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BoardsMemberships boardsMemberships = buildBodyParams();
            return updateMembershipsByIdBoardByIdMembershipAsync(idBoard, idMembership, boardsMemberships, _callback);
        }
    }

    /**
     * updateBoardsMembershipsByIdBoardByIdMembership()
     * 
     * @param idBoard board_id (required)
     * @param idMembership idMembership (required)
     * @param boardsMemberships Attributes of \&quot;Boards Memberships\&quot; to be updated. (required)
     * @return UpdateMembershipsByIdBoardByIdMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMembershipsByIdBoardByIdMembershipRequestBuilder updateMembershipsByIdBoardByIdMembership(String idBoard, String idMembership) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        if (idMembership == null) throw new IllegalArgumentException("\"idMembership\" is required but got null");
            

        return new UpdateMembershipsByIdBoardByIdMembershipRequestBuilder(idBoard, idMembership);
    }
    private okhttp3.Call updateMyPrefsEmailListByIdBoardCall(String idBoard, MyPrefsIdEmailList myPrefsIdEmailList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsIdEmailList;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/idEmailList"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMyPrefsEmailListByIdBoardValidateBeforeCall(String idBoard, MyPrefsIdEmailList myPrefsIdEmailList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateMyPrefsEmailListByIdBoard(Async)");
        }

        // verify the required parameter 'myPrefsIdEmailList' is set
        if (myPrefsIdEmailList == null) {
            throw new ApiException("Missing the required parameter 'myPrefsIdEmailList' when calling updateMyPrefsEmailListByIdBoard(Async)");
        }

        return updateMyPrefsEmailListByIdBoardCall(idBoard, myPrefsIdEmailList, _callback);

    }


    private ApiResponse<Void> updateMyPrefsEmailListByIdBoardWithHttpInfo(String idBoard, MyPrefsIdEmailList myPrefsIdEmailList) throws ApiException {
        okhttp3.Call localVarCall = updateMyPrefsEmailListByIdBoardValidateBeforeCall(idBoard, myPrefsIdEmailList, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMyPrefsEmailListByIdBoardAsync(String idBoard, MyPrefsIdEmailList myPrefsIdEmailList, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMyPrefsEmailListByIdBoardValidateBeforeCall(idBoard, myPrefsIdEmailList, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMyPrefsEmailListByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateMyPrefsEmailListByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value An id (optional)
         * @return UpdateMyPrefsEmailListByIdBoardRequestBuilder
         */
        public UpdateMyPrefsEmailListByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateMyPrefsEmailListByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MyPrefsIdEmailList myPrefsIdEmailList = buildBodyParams();
            return updateMyPrefsEmailListByIdBoardCall(idBoard, myPrefsIdEmailList, _callback);
        }

        private MyPrefsIdEmailList buildBodyParams() {
            MyPrefsIdEmailList myPrefsIdEmailList = new MyPrefsIdEmailList();
            myPrefsIdEmailList.value(this.value);
            return myPrefsIdEmailList;
        }

        /**
         * Execute updateMyPrefsEmailListByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MyPrefsIdEmailList myPrefsIdEmailList = buildBodyParams();
            updateMyPrefsEmailListByIdBoardWithHttpInfo(idBoard, myPrefsIdEmailList);
        }

        /**
         * Execute updateMyPrefsEmailListByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MyPrefsIdEmailList myPrefsIdEmailList = buildBodyParams();
            return updateMyPrefsEmailListByIdBoardWithHttpInfo(idBoard, myPrefsIdEmailList);
        }

        /**
         * Execute updateMyPrefsEmailListByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MyPrefsIdEmailList myPrefsIdEmailList = buildBodyParams();
            return updateMyPrefsEmailListByIdBoardAsync(idBoard, myPrefsIdEmailList, _callback);
        }
    }

    /**
     * updateBoardsMyPrefsIdEmailListByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param myPrefsIdEmailList Attributes of \&quot;My Prefs Id Email List\&quot; to be updated. (required)
     * @return UpdateMyPrefsEmailListByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMyPrefsEmailListByIdBoardRequestBuilder updateMyPrefsEmailListByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateMyPrefsEmailListByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updateMyPrefsEmailPositionByIdBoardCall(String idBoard, MyPrefsEmailPosition myPrefsEmailPosition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsEmailPosition;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/emailPosition"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMyPrefsEmailPositionByIdBoardValidateBeforeCall(String idBoard, MyPrefsEmailPosition myPrefsEmailPosition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateMyPrefsEmailPositionByIdBoard(Async)");
        }

        // verify the required parameter 'myPrefsEmailPosition' is set
        if (myPrefsEmailPosition == null) {
            throw new ApiException("Missing the required parameter 'myPrefsEmailPosition' when calling updateMyPrefsEmailPositionByIdBoard(Async)");
        }

        return updateMyPrefsEmailPositionByIdBoardCall(idBoard, myPrefsEmailPosition, _callback);

    }


    private ApiResponse<Void> updateMyPrefsEmailPositionByIdBoardWithHttpInfo(String idBoard, MyPrefsEmailPosition myPrefsEmailPosition) throws ApiException {
        okhttp3.Call localVarCall = updateMyPrefsEmailPositionByIdBoardValidateBeforeCall(idBoard, myPrefsEmailPosition, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMyPrefsEmailPositionByIdBoardAsync(String idBoard, MyPrefsEmailPosition myPrefsEmailPosition, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMyPrefsEmailPositionByIdBoardValidateBeforeCall(idBoard, myPrefsEmailPosition, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMyPrefsEmailPositionByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateMyPrefsEmailPositionByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value One of: bottom or top (optional)
         * @return UpdateMyPrefsEmailPositionByIdBoardRequestBuilder
         */
        public UpdateMyPrefsEmailPositionByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateMyPrefsEmailPositionByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MyPrefsEmailPosition myPrefsEmailPosition = buildBodyParams();
            return updateMyPrefsEmailPositionByIdBoardCall(idBoard, myPrefsEmailPosition, _callback);
        }

        private MyPrefsEmailPosition buildBodyParams() {
            MyPrefsEmailPosition myPrefsEmailPosition = new MyPrefsEmailPosition();
            myPrefsEmailPosition.value(this.value);
            return myPrefsEmailPosition;
        }

        /**
         * Execute updateMyPrefsEmailPositionByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MyPrefsEmailPosition myPrefsEmailPosition = buildBodyParams();
            updateMyPrefsEmailPositionByIdBoardWithHttpInfo(idBoard, myPrefsEmailPosition);
        }

        /**
         * Execute updateMyPrefsEmailPositionByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MyPrefsEmailPosition myPrefsEmailPosition = buildBodyParams();
            return updateMyPrefsEmailPositionByIdBoardWithHttpInfo(idBoard, myPrefsEmailPosition);
        }

        /**
         * Execute updateMyPrefsEmailPositionByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MyPrefsEmailPosition myPrefsEmailPosition = buildBodyParams();
            return updateMyPrefsEmailPositionByIdBoardAsync(idBoard, myPrefsEmailPosition, _callback);
        }
    }

    /**
     * updateBoardsMyPrefsEmailPositionByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param myPrefsEmailPosition Attributes of \&quot;My Prefs Email Position\&quot; to be updated. (required)
     * @return UpdateMyPrefsEmailPositionByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMyPrefsEmailPositionByIdBoardRequestBuilder updateMyPrefsEmailPositionByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateMyPrefsEmailPositionByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updateMyPrefsShowListGuideByIdBoardCall(String idBoard, MyPrefsShowListGuide myPrefsShowListGuide, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsShowListGuide;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/showListGuide"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMyPrefsShowListGuideByIdBoardValidateBeforeCall(String idBoard, MyPrefsShowListGuide myPrefsShowListGuide, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateMyPrefsShowListGuideByIdBoard(Async)");
        }

        // verify the required parameter 'myPrefsShowListGuide' is set
        if (myPrefsShowListGuide == null) {
            throw new ApiException("Missing the required parameter 'myPrefsShowListGuide' when calling updateMyPrefsShowListGuideByIdBoard(Async)");
        }

        return updateMyPrefsShowListGuideByIdBoardCall(idBoard, myPrefsShowListGuide, _callback);

    }


    private ApiResponse<Void> updateMyPrefsShowListGuideByIdBoardWithHttpInfo(String idBoard, MyPrefsShowListGuide myPrefsShowListGuide) throws ApiException {
        okhttp3.Call localVarCall = updateMyPrefsShowListGuideByIdBoardValidateBeforeCall(idBoard, myPrefsShowListGuide, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMyPrefsShowListGuideByIdBoardAsync(String idBoard, MyPrefsShowListGuide myPrefsShowListGuide, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMyPrefsShowListGuideByIdBoardValidateBeforeCall(idBoard, myPrefsShowListGuide, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMyPrefsShowListGuideByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateMyPrefsShowListGuideByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateMyPrefsShowListGuideByIdBoardRequestBuilder
         */
        public UpdateMyPrefsShowListGuideByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateMyPrefsShowListGuideByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MyPrefsShowListGuide myPrefsShowListGuide = buildBodyParams();
            return updateMyPrefsShowListGuideByIdBoardCall(idBoard, myPrefsShowListGuide, _callback);
        }

        private MyPrefsShowListGuide buildBodyParams() {
            MyPrefsShowListGuide myPrefsShowListGuide = new MyPrefsShowListGuide();
            myPrefsShowListGuide.value(this.value);
            return myPrefsShowListGuide;
        }

        /**
         * Execute updateMyPrefsShowListGuideByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MyPrefsShowListGuide myPrefsShowListGuide = buildBodyParams();
            updateMyPrefsShowListGuideByIdBoardWithHttpInfo(idBoard, myPrefsShowListGuide);
        }

        /**
         * Execute updateMyPrefsShowListGuideByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MyPrefsShowListGuide myPrefsShowListGuide = buildBodyParams();
            return updateMyPrefsShowListGuideByIdBoardWithHttpInfo(idBoard, myPrefsShowListGuide);
        }

        /**
         * Execute updateMyPrefsShowListGuideByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MyPrefsShowListGuide myPrefsShowListGuide = buildBodyParams();
            return updateMyPrefsShowListGuideByIdBoardAsync(idBoard, myPrefsShowListGuide, _callback);
        }
    }

    /**
     * updateBoardsMyPrefsShowListGuideByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param myPrefsShowListGuide Attributes of \&quot;My Prefs Show List Guide\&quot; to be updated. (required)
     * @return UpdateMyPrefsShowListGuideByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMyPrefsShowListGuideByIdBoardRequestBuilder updateMyPrefsShowListGuideByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateMyPrefsShowListGuideByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updateMyPrefsShowSidebarCall(String idBoard, MyPrefsShowSidebar myPrefsShowSidebar, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsShowSidebar;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/showSidebar"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMyPrefsShowSidebarValidateBeforeCall(String idBoard, MyPrefsShowSidebar myPrefsShowSidebar, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateMyPrefsShowSidebar(Async)");
        }

        // verify the required parameter 'myPrefsShowSidebar' is set
        if (myPrefsShowSidebar == null) {
            throw new ApiException("Missing the required parameter 'myPrefsShowSidebar' when calling updateMyPrefsShowSidebar(Async)");
        }

        return updateMyPrefsShowSidebarCall(idBoard, myPrefsShowSidebar, _callback);

    }


    private ApiResponse<Void> updateMyPrefsShowSidebarWithHttpInfo(String idBoard, MyPrefsShowSidebar myPrefsShowSidebar) throws ApiException {
        okhttp3.Call localVarCall = updateMyPrefsShowSidebarValidateBeforeCall(idBoard, myPrefsShowSidebar, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMyPrefsShowSidebarAsync(String idBoard, MyPrefsShowSidebar myPrefsShowSidebar, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMyPrefsShowSidebarValidateBeforeCall(idBoard, myPrefsShowSidebar, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMyPrefsShowSidebarRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateMyPrefsShowSidebarRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateMyPrefsShowSidebarRequestBuilder
         */
        public UpdateMyPrefsShowSidebarRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateMyPrefsShowSidebar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MyPrefsShowSidebar myPrefsShowSidebar = buildBodyParams();
            return updateMyPrefsShowSidebarCall(idBoard, myPrefsShowSidebar, _callback);
        }

        private MyPrefsShowSidebar buildBodyParams() {
            MyPrefsShowSidebar myPrefsShowSidebar = new MyPrefsShowSidebar();
            myPrefsShowSidebar.value(this.value);
            return myPrefsShowSidebar;
        }

        /**
         * Execute updateMyPrefsShowSidebar request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MyPrefsShowSidebar myPrefsShowSidebar = buildBodyParams();
            updateMyPrefsShowSidebarWithHttpInfo(idBoard, myPrefsShowSidebar);
        }

        /**
         * Execute updateMyPrefsShowSidebar request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MyPrefsShowSidebar myPrefsShowSidebar = buildBodyParams();
            return updateMyPrefsShowSidebarWithHttpInfo(idBoard, myPrefsShowSidebar);
        }

        /**
         * Execute updateMyPrefsShowSidebar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MyPrefsShowSidebar myPrefsShowSidebar = buildBodyParams();
            return updateMyPrefsShowSidebarAsync(idBoard, myPrefsShowSidebar, _callback);
        }
    }

    /**
     * updateBoardsMyPrefsShowSidebarByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param myPrefsShowSidebar Attributes of \&quot;My Prefs Show Sidebar\&quot; to be updated. (required)
     * @return UpdateMyPrefsShowSidebarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMyPrefsShowSidebarRequestBuilder updateMyPrefsShowSidebar(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateMyPrefsShowSidebarRequestBuilder(idBoard);
    }
    private okhttp3.Call updateMyPrefsShowSidebarActionsByIdBoardCall(String idBoard, MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsShowSidebarBoardActions;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/showSidebarBoardActions"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMyPrefsShowSidebarActionsByIdBoardValidateBeforeCall(String idBoard, MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateMyPrefsShowSidebarActionsByIdBoard(Async)");
        }

        // verify the required parameter 'myPrefsShowSidebarBoardActions' is set
        if (myPrefsShowSidebarBoardActions == null) {
            throw new ApiException("Missing the required parameter 'myPrefsShowSidebarBoardActions' when calling updateMyPrefsShowSidebarActionsByIdBoard(Async)");
        }

        return updateMyPrefsShowSidebarActionsByIdBoardCall(idBoard, myPrefsShowSidebarBoardActions, _callback);

    }


    private ApiResponse<Void> updateMyPrefsShowSidebarActionsByIdBoardWithHttpInfo(String idBoard, MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions) throws ApiException {
        okhttp3.Call localVarCall = updateMyPrefsShowSidebarActionsByIdBoardValidateBeforeCall(idBoard, myPrefsShowSidebarBoardActions, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMyPrefsShowSidebarActionsByIdBoardAsync(String idBoard, MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMyPrefsShowSidebarActionsByIdBoardValidateBeforeCall(idBoard, myPrefsShowSidebarBoardActions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMyPrefsShowSidebarActionsByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateMyPrefsShowSidebarActionsByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateMyPrefsShowSidebarActionsByIdBoardRequestBuilder
         */
        public UpdateMyPrefsShowSidebarActionsByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateMyPrefsShowSidebarActionsByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions = buildBodyParams();
            return updateMyPrefsShowSidebarActionsByIdBoardCall(idBoard, myPrefsShowSidebarBoardActions, _callback);
        }

        private MyPrefsShowSidebarBoardActions buildBodyParams() {
            MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions = new MyPrefsShowSidebarBoardActions();
            myPrefsShowSidebarBoardActions.value(this.value);
            return myPrefsShowSidebarBoardActions;
        }

        /**
         * Execute updateMyPrefsShowSidebarActionsByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions = buildBodyParams();
            updateMyPrefsShowSidebarActionsByIdBoardWithHttpInfo(idBoard, myPrefsShowSidebarBoardActions);
        }

        /**
         * Execute updateMyPrefsShowSidebarActionsByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions = buildBodyParams();
            return updateMyPrefsShowSidebarActionsByIdBoardWithHttpInfo(idBoard, myPrefsShowSidebarBoardActions);
        }

        /**
         * Execute updateMyPrefsShowSidebarActionsByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MyPrefsShowSidebarBoardActions myPrefsShowSidebarBoardActions = buildBodyParams();
            return updateMyPrefsShowSidebarActionsByIdBoardAsync(idBoard, myPrefsShowSidebarBoardActions, _callback);
        }
    }

    /**
     * updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param myPrefsShowSidebarBoardActions Attributes of \&quot;My Prefs Show Sidebar Board Actions\&quot; to be updated. (required)
     * @return UpdateMyPrefsShowSidebarActionsByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMyPrefsShowSidebarActionsByIdBoardRequestBuilder updateMyPrefsShowSidebarActionsByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateMyPrefsShowSidebarActionsByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updateMyPrefsShowSidebarActivityByIdBoardCall(String idBoard, MyPrefsShowSidebarActivity myPrefsShowSidebarActivity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsShowSidebarActivity;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/showSidebarActivity"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMyPrefsShowSidebarActivityByIdBoardValidateBeforeCall(String idBoard, MyPrefsShowSidebarActivity myPrefsShowSidebarActivity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateMyPrefsShowSidebarActivityByIdBoard(Async)");
        }

        // verify the required parameter 'myPrefsShowSidebarActivity' is set
        if (myPrefsShowSidebarActivity == null) {
            throw new ApiException("Missing the required parameter 'myPrefsShowSidebarActivity' when calling updateMyPrefsShowSidebarActivityByIdBoard(Async)");
        }

        return updateMyPrefsShowSidebarActivityByIdBoardCall(idBoard, myPrefsShowSidebarActivity, _callback);

    }


    private ApiResponse<Void> updateMyPrefsShowSidebarActivityByIdBoardWithHttpInfo(String idBoard, MyPrefsShowSidebarActivity myPrefsShowSidebarActivity) throws ApiException {
        okhttp3.Call localVarCall = updateMyPrefsShowSidebarActivityByIdBoardValidateBeforeCall(idBoard, myPrefsShowSidebarActivity, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMyPrefsShowSidebarActivityByIdBoardAsync(String idBoard, MyPrefsShowSidebarActivity myPrefsShowSidebarActivity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMyPrefsShowSidebarActivityByIdBoardValidateBeforeCall(idBoard, myPrefsShowSidebarActivity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMyPrefsShowSidebarActivityByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateMyPrefsShowSidebarActivityByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateMyPrefsShowSidebarActivityByIdBoardRequestBuilder
         */
        public UpdateMyPrefsShowSidebarActivityByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateMyPrefsShowSidebarActivityByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MyPrefsShowSidebarActivity myPrefsShowSidebarActivity = buildBodyParams();
            return updateMyPrefsShowSidebarActivityByIdBoardCall(idBoard, myPrefsShowSidebarActivity, _callback);
        }

        private MyPrefsShowSidebarActivity buildBodyParams() {
            MyPrefsShowSidebarActivity myPrefsShowSidebarActivity = new MyPrefsShowSidebarActivity();
            myPrefsShowSidebarActivity.value(this.value);
            return myPrefsShowSidebarActivity;
        }

        /**
         * Execute updateMyPrefsShowSidebarActivityByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MyPrefsShowSidebarActivity myPrefsShowSidebarActivity = buildBodyParams();
            updateMyPrefsShowSidebarActivityByIdBoardWithHttpInfo(idBoard, myPrefsShowSidebarActivity);
        }

        /**
         * Execute updateMyPrefsShowSidebarActivityByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MyPrefsShowSidebarActivity myPrefsShowSidebarActivity = buildBodyParams();
            return updateMyPrefsShowSidebarActivityByIdBoardWithHttpInfo(idBoard, myPrefsShowSidebarActivity);
        }

        /**
         * Execute updateMyPrefsShowSidebarActivityByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MyPrefsShowSidebarActivity myPrefsShowSidebarActivity = buildBodyParams();
            return updateMyPrefsShowSidebarActivityByIdBoardAsync(idBoard, myPrefsShowSidebarActivity, _callback);
        }
    }

    /**
     * updateBoardsMyPrefsShowSidebarActivityByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param myPrefsShowSidebarActivity Attributes of \&quot;My Prefs Show Sidebar Activity\&quot; to be updated. (required)
     * @return UpdateMyPrefsShowSidebarActivityByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMyPrefsShowSidebarActivityByIdBoardRequestBuilder updateMyPrefsShowSidebarActivityByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateMyPrefsShowSidebarActivityByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updateNameByIdCall(String idBoard, BoardsName boardsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsName;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/name"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNameByIdValidateBeforeCall(String idBoard, BoardsName boardsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateNameById(Async)");
        }

        // verify the required parameter 'boardsName' is set
        if (boardsName == null) {
            throw new ApiException("Missing the required parameter 'boardsName' when calling updateNameById(Async)");
        }

        return updateNameByIdCall(idBoard, boardsName, _callback);

    }


    private ApiResponse<Void> updateNameByIdWithHttpInfo(String idBoard, BoardsName boardsName) throws ApiException {
        okhttp3.Call localVarCall = updateNameByIdValidateBeforeCall(idBoard, boardsName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateNameByIdAsync(String idBoard, BoardsName boardsName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNameByIdValidateBeforeCall(idBoard, boardsName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateNameByIdRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateNameByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value a string with a length from 1 to 16384 (optional)
         * @return UpdateNameByIdRequestBuilder
         */
        public UpdateNameByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateNameById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BoardsName boardsName = buildBodyParams();
            return updateNameByIdCall(idBoard, boardsName, _callback);
        }

        private BoardsName buildBodyParams() {
            BoardsName boardsName = new BoardsName();
            boardsName.value(this.value);
            return boardsName;
        }

        /**
         * Execute updateNameById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BoardsName boardsName = buildBodyParams();
            updateNameByIdWithHttpInfo(idBoard, boardsName);
        }

        /**
         * Execute updateNameById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BoardsName boardsName = buildBodyParams();
            return updateNameByIdWithHttpInfo(idBoard, boardsName);
        }

        /**
         * Execute updateNameById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BoardsName boardsName = buildBodyParams();
            return updateNameByIdAsync(idBoard, boardsName, _callback);
        }
    }

    /**
     * updateBoardsNameByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param boardsName Attributes of \&quot;Boards Name\&quot; to be updated. (required)
     * @return UpdateNameByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateNameByIdRequestBuilder updateNameById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateNameByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call updateOrganizationByIdBoardCall(String idBoard, BoardsIdOrganization boardsIdOrganization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsIdOrganization;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/idOrganization"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationByIdBoardValidateBeforeCall(String idBoard, BoardsIdOrganization boardsIdOrganization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateOrganizationByIdBoard(Async)");
        }

        // verify the required parameter 'boardsIdOrganization' is set
        if (boardsIdOrganization == null) {
            throw new ApiException("Missing the required parameter 'boardsIdOrganization' when calling updateOrganizationByIdBoard(Async)");
        }

        return updateOrganizationByIdBoardCall(idBoard, boardsIdOrganization, _callback);

    }


    private ApiResponse<Void> updateOrganizationByIdBoardWithHttpInfo(String idBoard, BoardsIdOrganization boardsIdOrganization) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationByIdBoardValidateBeforeCall(idBoard, boardsIdOrganization, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateOrganizationByIdBoardAsync(String idBoard, BoardsIdOrganization boardsIdOrganization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationByIdBoardValidateBeforeCall(idBoard, boardsIdOrganization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateOrganizationByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateOrganizationByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateOrganizationByIdBoardRequestBuilder
         */
        public UpdateOrganizationByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateOrganizationByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BoardsIdOrganization boardsIdOrganization = buildBodyParams();
            return updateOrganizationByIdBoardCall(idBoard, boardsIdOrganization, _callback);
        }

        private BoardsIdOrganization buildBodyParams() {
            BoardsIdOrganization boardsIdOrganization = new BoardsIdOrganization();
            boardsIdOrganization.value(this.value);
            return boardsIdOrganization;
        }

        /**
         * Execute updateOrganizationByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BoardsIdOrganization boardsIdOrganization = buildBodyParams();
            updateOrganizationByIdBoardWithHttpInfo(idBoard, boardsIdOrganization);
        }

        /**
         * Execute updateOrganizationByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BoardsIdOrganization boardsIdOrganization = buildBodyParams();
            return updateOrganizationByIdBoardWithHttpInfo(idBoard, boardsIdOrganization);
        }

        /**
         * Execute updateOrganizationByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BoardsIdOrganization boardsIdOrganization = buildBodyParams();
            return updateOrganizationByIdBoardAsync(idBoard, boardsIdOrganization, _callback);
        }
    }

    /**
     * updateBoardsIdOrganizationByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param boardsIdOrganization Attributes of \&quot;Boards Id Organization\&quot; to be updated. (required)
     * @return UpdateOrganizationByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOrganizationByIdBoardRequestBuilder updateOrganizationByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateOrganizationByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updatePrefsBackgroundByIdBoardCall(String idBoard, PrefsBackground prefsBackground, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsBackground;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/background"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsBackgroundByIdBoardValidateBeforeCall(String idBoard, PrefsBackground prefsBackground, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updatePrefsBackgroundByIdBoard(Async)");
        }

        // verify the required parameter 'prefsBackground' is set
        if (prefsBackground == null) {
            throw new ApiException("Missing the required parameter 'prefsBackground' when calling updatePrefsBackgroundByIdBoard(Async)");
        }

        return updatePrefsBackgroundByIdBoardCall(idBoard, prefsBackground, _callback);

    }


    private ApiResponse<Void> updatePrefsBackgroundByIdBoardWithHttpInfo(String idBoard, PrefsBackground prefsBackground) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsBackgroundByIdBoardValidateBeforeCall(idBoard, prefsBackground, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsBackgroundByIdBoardAsync(String idBoard, PrefsBackground prefsBackground, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsBackgroundByIdBoardValidateBeforeCall(idBoard, prefsBackground, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsBackgroundByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdatePrefsBackgroundByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value A standard background name, or the id of a custom background (optional)
         * @return UpdatePrefsBackgroundByIdBoardRequestBuilder
         */
        public UpdatePrefsBackgroundByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsBackgroundByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsBackground prefsBackground = buildBodyParams();
            return updatePrefsBackgroundByIdBoardCall(idBoard, prefsBackground, _callback);
        }

        private PrefsBackground buildBodyParams() {
            PrefsBackground prefsBackground = new PrefsBackground();
            prefsBackground.value(this.value);
            return prefsBackground;
        }

        /**
         * Execute updatePrefsBackgroundByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsBackground prefsBackground = buildBodyParams();
            updatePrefsBackgroundByIdBoardWithHttpInfo(idBoard, prefsBackground);
        }

        /**
         * Execute updatePrefsBackgroundByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsBackground prefsBackground = buildBodyParams();
            return updatePrefsBackgroundByIdBoardWithHttpInfo(idBoard, prefsBackground);
        }

        /**
         * Execute updatePrefsBackgroundByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsBackground prefsBackground = buildBodyParams();
            return updatePrefsBackgroundByIdBoardAsync(idBoard, prefsBackground, _callback);
        }
    }

    /**
     * updateBoardsPrefsBackgroundByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param prefsBackground Attributes of \&quot;Prefs Background\&quot; to be updated. (required)
     * @return UpdatePrefsBackgroundByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsBackgroundByIdBoardRequestBuilder updatePrefsBackgroundByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdatePrefsBackgroundByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updatePrefsCalendarFeedEnabledByIdCall(String idBoard, PrefsCalendarFeedEnabled prefsCalendarFeedEnabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsCalendarFeedEnabled;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/calendarFeedEnabled"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsCalendarFeedEnabledByIdValidateBeforeCall(String idBoard, PrefsCalendarFeedEnabled prefsCalendarFeedEnabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updatePrefsCalendarFeedEnabledById(Async)");
        }

        // verify the required parameter 'prefsCalendarFeedEnabled' is set
        if (prefsCalendarFeedEnabled == null) {
            throw new ApiException("Missing the required parameter 'prefsCalendarFeedEnabled' when calling updatePrefsCalendarFeedEnabledById(Async)");
        }

        return updatePrefsCalendarFeedEnabledByIdCall(idBoard, prefsCalendarFeedEnabled, _callback);

    }


    private ApiResponse<Void> updatePrefsCalendarFeedEnabledByIdWithHttpInfo(String idBoard, PrefsCalendarFeedEnabled prefsCalendarFeedEnabled) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsCalendarFeedEnabledByIdValidateBeforeCall(idBoard, prefsCalendarFeedEnabled, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsCalendarFeedEnabledByIdAsync(String idBoard, PrefsCalendarFeedEnabled prefsCalendarFeedEnabled, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsCalendarFeedEnabledByIdValidateBeforeCall(idBoard, prefsCalendarFeedEnabled, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsCalendarFeedEnabledByIdRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdatePrefsCalendarFeedEnabledByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdatePrefsCalendarFeedEnabledByIdRequestBuilder
         */
        public UpdatePrefsCalendarFeedEnabledByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsCalendarFeedEnabledById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsCalendarFeedEnabled prefsCalendarFeedEnabled = buildBodyParams();
            return updatePrefsCalendarFeedEnabledByIdCall(idBoard, prefsCalendarFeedEnabled, _callback);
        }

        private PrefsCalendarFeedEnabled buildBodyParams() {
            PrefsCalendarFeedEnabled prefsCalendarFeedEnabled = new PrefsCalendarFeedEnabled();
            prefsCalendarFeedEnabled.value(this.value);
            return prefsCalendarFeedEnabled;
        }

        /**
         * Execute updatePrefsCalendarFeedEnabledById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsCalendarFeedEnabled prefsCalendarFeedEnabled = buildBodyParams();
            updatePrefsCalendarFeedEnabledByIdWithHttpInfo(idBoard, prefsCalendarFeedEnabled);
        }

        /**
         * Execute updatePrefsCalendarFeedEnabledById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsCalendarFeedEnabled prefsCalendarFeedEnabled = buildBodyParams();
            return updatePrefsCalendarFeedEnabledByIdWithHttpInfo(idBoard, prefsCalendarFeedEnabled);
        }

        /**
         * Execute updatePrefsCalendarFeedEnabledById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsCalendarFeedEnabled prefsCalendarFeedEnabled = buildBodyParams();
            return updatePrefsCalendarFeedEnabledByIdAsync(idBoard, prefsCalendarFeedEnabled, _callback);
        }
    }

    /**
     * updateBoardsPrefsCalendarFeedEnabledByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param prefsCalendarFeedEnabled Attributes of \&quot;Prefs Calendar Feed Enabled\&quot; to be updated. (required)
     * @return UpdatePrefsCalendarFeedEnabledByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsCalendarFeedEnabledByIdRequestBuilder updatePrefsCalendarFeedEnabledById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdatePrefsCalendarFeedEnabledByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call updatePrefsCardAgingByIdBoardCall(String idBoard, PrefsCardAging prefsCardAging, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsCardAging;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/cardAging"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsCardAgingByIdBoardValidateBeforeCall(String idBoard, PrefsCardAging prefsCardAging, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updatePrefsCardAgingByIdBoard(Async)");
        }

        // verify the required parameter 'prefsCardAging' is set
        if (prefsCardAging == null) {
            throw new ApiException("Missing the required parameter 'prefsCardAging' when calling updatePrefsCardAgingByIdBoard(Async)");
        }

        return updatePrefsCardAgingByIdBoardCall(idBoard, prefsCardAging, _callback);

    }


    private ApiResponse<Void> updatePrefsCardAgingByIdBoardWithHttpInfo(String idBoard, PrefsCardAging prefsCardAging) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsCardAgingByIdBoardValidateBeforeCall(idBoard, prefsCardAging, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsCardAgingByIdBoardAsync(String idBoard, PrefsCardAging prefsCardAging, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsCardAgingByIdBoardValidateBeforeCall(idBoard, prefsCardAging, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsCardAgingByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdatePrefsCardAgingByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value One of: pirate or regular (optional)
         * @return UpdatePrefsCardAgingByIdBoardRequestBuilder
         */
        public UpdatePrefsCardAgingByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsCardAgingByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsCardAging prefsCardAging = buildBodyParams();
            return updatePrefsCardAgingByIdBoardCall(idBoard, prefsCardAging, _callback);
        }

        private PrefsCardAging buildBodyParams() {
            PrefsCardAging prefsCardAging = new PrefsCardAging();
            prefsCardAging.value(this.value);
            return prefsCardAging;
        }

        /**
         * Execute updatePrefsCardAgingByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsCardAging prefsCardAging = buildBodyParams();
            updatePrefsCardAgingByIdBoardWithHttpInfo(idBoard, prefsCardAging);
        }

        /**
         * Execute updatePrefsCardAgingByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsCardAging prefsCardAging = buildBodyParams();
            return updatePrefsCardAgingByIdBoardWithHttpInfo(idBoard, prefsCardAging);
        }

        /**
         * Execute updatePrefsCardAgingByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsCardAging prefsCardAging = buildBodyParams();
            return updatePrefsCardAgingByIdBoardAsync(idBoard, prefsCardAging, _callback);
        }
    }

    /**
     * updateBoardsPrefsCardAgingByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param prefsCardAging Attributes of \&quot;Prefs Card Aging\&quot; to be updated. (required)
     * @return UpdatePrefsCardAgingByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsCardAgingByIdBoardRequestBuilder updatePrefsCardAgingByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdatePrefsCardAgingByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updatePrefsCardCoversByIdBoardCall(String idBoard, PrefsCardCovers prefsCardCovers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsCardCovers;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/cardCovers"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsCardCoversByIdBoardValidateBeforeCall(String idBoard, PrefsCardCovers prefsCardCovers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updatePrefsCardCoversByIdBoard(Async)");
        }

        // verify the required parameter 'prefsCardCovers' is set
        if (prefsCardCovers == null) {
            throw new ApiException("Missing the required parameter 'prefsCardCovers' when calling updatePrefsCardCoversByIdBoard(Async)");
        }

        return updatePrefsCardCoversByIdBoardCall(idBoard, prefsCardCovers, _callback);

    }


    private ApiResponse<Void> updatePrefsCardCoversByIdBoardWithHttpInfo(String idBoard, PrefsCardCovers prefsCardCovers) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsCardCoversByIdBoardValidateBeforeCall(idBoard, prefsCardCovers, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsCardCoversByIdBoardAsync(String idBoard, PrefsCardCovers prefsCardCovers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsCardCoversByIdBoardValidateBeforeCall(idBoard, prefsCardCovers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsCardCoversByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdatePrefsCardCoversByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdatePrefsCardCoversByIdBoardRequestBuilder
         */
        public UpdatePrefsCardCoversByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsCardCoversByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsCardCovers prefsCardCovers = buildBodyParams();
            return updatePrefsCardCoversByIdBoardCall(idBoard, prefsCardCovers, _callback);
        }

        private PrefsCardCovers buildBodyParams() {
            PrefsCardCovers prefsCardCovers = new PrefsCardCovers();
            prefsCardCovers.value(this.value);
            return prefsCardCovers;
        }

        /**
         * Execute updatePrefsCardCoversByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsCardCovers prefsCardCovers = buildBodyParams();
            updatePrefsCardCoversByIdBoardWithHttpInfo(idBoard, prefsCardCovers);
        }

        /**
         * Execute updatePrefsCardCoversByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsCardCovers prefsCardCovers = buildBodyParams();
            return updatePrefsCardCoversByIdBoardWithHttpInfo(idBoard, prefsCardCovers);
        }

        /**
         * Execute updatePrefsCardCoversByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsCardCovers prefsCardCovers = buildBodyParams();
            return updatePrefsCardCoversByIdBoardAsync(idBoard, prefsCardCovers, _callback);
        }
    }

    /**
     * updateBoardsPrefsCardCoversByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param prefsCardCovers Attributes of \&quot;Prefs Card Covers\&quot; to be updated. (required)
     * @return UpdatePrefsCardCoversByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsCardCoversByIdBoardRequestBuilder updatePrefsCardCoversByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdatePrefsCardCoversByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updatePrefsCommentsByIdBoardCall(String idBoard, PrefsComments prefsComments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsComments;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/comments"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsCommentsByIdBoardValidateBeforeCall(String idBoard, PrefsComments prefsComments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updatePrefsCommentsByIdBoard(Async)");
        }

        // verify the required parameter 'prefsComments' is set
        if (prefsComments == null) {
            throw new ApiException("Missing the required parameter 'prefsComments' when calling updatePrefsCommentsByIdBoard(Async)");
        }

        return updatePrefsCommentsByIdBoardCall(idBoard, prefsComments, _callback);

    }


    private ApiResponse<Void> updatePrefsCommentsByIdBoardWithHttpInfo(String idBoard, PrefsComments prefsComments) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsCommentsByIdBoardValidateBeforeCall(idBoard, prefsComments, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsCommentsByIdBoardAsync(String idBoard, PrefsComments prefsComments, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsCommentsByIdBoardValidateBeforeCall(idBoard, prefsComments, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsCommentsByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdatePrefsCommentsByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value One of: disabled, members, observers, org or public (optional)
         * @return UpdatePrefsCommentsByIdBoardRequestBuilder
         */
        public UpdatePrefsCommentsByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsCommentsByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsComments prefsComments = buildBodyParams();
            return updatePrefsCommentsByIdBoardCall(idBoard, prefsComments, _callback);
        }

        private PrefsComments buildBodyParams() {
            PrefsComments prefsComments = new PrefsComments();
            prefsComments.value(this.value);
            return prefsComments;
        }

        /**
         * Execute updatePrefsCommentsByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsComments prefsComments = buildBodyParams();
            updatePrefsCommentsByIdBoardWithHttpInfo(idBoard, prefsComments);
        }

        /**
         * Execute updatePrefsCommentsByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsComments prefsComments = buildBodyParams();
            return updatePrefsCommentsByIdBoardWithHttpInfo(idBoard, prefsComments);
        }

        /**
         * Execute updatePrefsCommentsByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsComments prefsComments = buildBodyParams();
            return updatePrefsCommentsByIdBoardAsync(idBoard, prefsComments, _callback);
        }
    }

    /**
     * updateBoardsPrefsCommentsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param prefsComments Attributes of \&quot;Prefs Comments\&quot; to be updated. (required)
     * @return UpdatePrefsCommentsByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsCommentsByIdBoardRequestBuilder updatePrefsCommentsByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdatePrefsCommentsByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updatePrefsInvitationsByIdBoardCall(String idBoard, PrefsInvitations prefsInvitations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsInvitations;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/invitations"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsInvitationsByIdBoardValidateBeforeCall(String idBoard, PrefsInvitations prefsInvitations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updatePrefsInvitationsByIdBoard(Async)");
        }

        // verify the required parameter 'prefsInvitations' is set
        if (prefsInvitations == null) {
            throw new ApiException("Missing the required parameter 'prefsInvitations' when calling updatePrefsInvitationsByIdBoard(Async)");
        }

        return updatePrefsInvitationsByIdBoardCall(idBoard, prefsInvitations, _callback);

    }


    private ApiResponse<Void> updatePrefsInvitationsByIdBoardWithHttpInfo(String idBoard, PrefsInvitations prefsInvitations) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsInvitationsByIdBoardValidateBeforeCall(idBoard, prefsInvitations, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsInvitationsByIdBoardAsync(String idBoard, PrefsInvitations prefsInvitations, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsInvitationsByIdBoardValidateBeforeCall(idBoard, prefsInvitations, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsInvitationsByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdatePrefsInvitationsByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value One of: admins or members (optional)
         * @return UpdatePrefsInvitationsByIdBoardRequestBuilder
         */
        public UpdatePrefsInvitationsByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsInvitationsByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsInvitations prefsInvitations = buildBodyParams();
            return updatePrefsInvitationsByIdBoardCall(idBoard, prefsInvitations, _callback);
        }

        private PrefsInvitations buildBodyParams() {
            PrefsInvitations prefsInvitations = new PrefsInvitations();
            prefsInvitations.value(this.value);
            return prefsInvitations;
        }

        /**
         * Execute updatePrefsInvitationsByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsInvitations prefsInvitations = buildBodyParams();
            updatePrefsInvitationsByIdBoardWithHttpInfo(idBoard, prefsInvitations);
        }

        /**
         * Execute updatePrefsInvitationsByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsInvitations prefsInvitations = buildBodyParams();
            return updatePrefsInvitationsByIdBoardWithHttpInfo(idBoard, prefsInvitations);
        }

        /**
         * Execute updatePrefsInvitationsByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsInvitations prefsInvitations = buildBodyParams();
            return updatePrefsInvitationsByIdBoardAsync(idBoard, prefsInvitations, _callback);
        }
    }

    /**
     * updateBoardsPrefsInvitationsByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param prefsInvitations Attributes of \&quot;Prefs Invitations\&quot; to be updated. (required)
     * @return UpdatePrefsInvitationsByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsInvitationsByIdBoardRequestBuilder updatePrefsInvitationsByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdatePrefsInvitationsByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updatePrefsPermissionLevelByIdCall(String idBoard, PrefsPermissionLevel prefsPermissionLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsPermissionLevel;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/permissionLevel"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsPermissionLevelByIdValidateBeforeCall(String idBoard, PrefsPermissionLevel prefsPermissionLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updatePrefsPermissionLevelById(Async)");
        }

        // verify the required parameter 'prefsPermissionLevel' is set
        if (prefsPermissionLevel == null) {
            throw new ApiException("Missing the required parameter 'prefsPermissionLevel' when calling updatePrefsPermissionLevelById(Async)");
        }

        return updatePrefsPermissionLevelByIdCall(idBoard, prefsPermissionLevel, _callback);

    }


    private ApiResponse<Void> updatePrefsPermissionLevelByIdWithHttpInfo(String idBoard, PrefsPermissionLevel prefsPermissionLevel) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsPermissionLevelByIdValidateBeforeCall(idBoard, prefsPermissionLevel, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsPermissionLevelByIdAsync(String idBoard, PrefsPermissionLevel prefsPermissionLevel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsPermissionLevelByIdValidateBeforeCall(idBoard, prefsPermissionLevel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsPermissionLevelByIdRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdatePrefsPermissionLevelByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value One of: private or public (optional)
         * @return UpdatePrefsPermissionLevelByIdRequestBuilder
         */
        public UpdatePrefsPermissionLevelByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsPermissionLevelById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsPermissionLevel prefsPermissionLevel = buildBodyParams();
            return updatePrefsPermissionLevelByIdCall(idBoard, prefsPermissionLevel, _callback);
        }

        private PrefsPermissionLevel buildBodyParams() {
            PrefsPermissionLevel prefsPermissionLevel = new PrefsPermissionLevel();
            prefsPermissionLevel.value(this.value);
            return prefsPermissionLevel;
        }

        /**
         * Execute updatePrefsPermissionLevelById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsPermissionLevel prefsPermissionLevel = buildBodyParams();
            updatePrefsPermissionLevelByIdWithHttpInfo(idBoard, prefsPermissionLevel);
        }

        /**
         * Execute updatePrefsPermissionLevelById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsPermissionLevel prefsPermissionLevel = buildBodyParams();
            return updatePrefsPermissionLevelByIdWithHttpInfo(idBoard, prefsPermissionLevel);
        }

        /**
         * Execute updatePrefsPermissionLevelById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsPermissionLevel prefsPermissionLevel = buildBodyParams();
            return updatePrefsPermissionLevelByIdAsync(idBoard, prefsPermissionLevel, _callback);
        }
    }

    /**
     * updateBoardsPrefsPermissionLevelByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param prefsPermissionLevel Attributes of \&quot;Prefs Permission Level\&quot; to be updated. (required)
     * @return UpdatePrefsPermissionLevelByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsPermissionLevelByIdRequestBuilder updatePrefsPermissionLevelById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdatePrefsPermissionLevelByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call updatePrefsSelfJoinByIdBoardCall(String idBoard, PrefsSelfJoin prefsSelfJoin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsSelfJoin;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/selfJoin"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsSelfJoinByIdBoardValidateBeforeCall(String idBoard, PrefsSelfJoin prefsSelfJoin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updatePrefsSelfJoinByIdBoard(Async)");
        }

        // verify the required parameter 'prefsSelfJoin' is set
        if (prefsSelfJoin == null) {
            throw new ApiException("Missing the required parameter 'prefsSelfJoin' when calling updatePrefsSelfJoinByIdBoard(Async)");
        }

        return updatePrefsSelfJoinByIdBoardCall(idBoard, prefsSelfJoin, _callback);

    }


    private ApiResponse<Void> updatePrefsSelfJoinByIdBoardWithHttpInfo(String idBoard, PrefsSelfJoin prefsSelfJoin) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsSelfJoinByIdBoardValidateBeforeCall(idBoard, prefsSelfJoin, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsSelfJoinByIdBoardAsync(String idBoard, PrefsSelfJoin prefsSelfJoin, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsSelfJoinByIdBoardValidateBeforeCall(idBoard, prefsSelfJoin, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsSelfJoinByIdBoardRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdatePrefsSelfJoinByIdBoardRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdatePrefsSelfJoinByIdBoardRequestBuilder
         */
        public UpdatePrefsSelfJoinByIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsSelfJoinByIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsSelfJoin prefsSelfJoin = buildBodyParams();
            return updatePrefsSelfJoinByIdBoardCall(idBoard, prefsSelfJoin, _callback);
        }

        private PrefsSelfJoin buildBodyParams() {
            PrefsSelfJoin prefsSelfJoin = new PrefsSelfJoin();
            prefsSelfJoin.value(this.value);
            return prefsSelfJoin;
        }

        /**
         * Execute updatePrefsSelfJoinByIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsSelfJoin prefsSelfJoin = buildBodyParams();
            updatePrefsSelfJoinByIdBoardWithHttpInfo(idBoard, prefsSelfJoin);
        }

        /**
         * Execute updatePrefsSelfJoinByIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsSelfJoin prefsSelfJoin = buildBodyParams();
            return updatePrefsSelfJoinByIdBoardWithHttpInfo(idBoard, prefsSelfJoin);
        }

        /**
         * Execute updatePrefsSelfJoinByIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsSelfJoin prefsSelfJoin = buildBodyParams();
            return updatePrefsSelfJoinByIdBoardAsync(idBoard, prefsSelfJoin, _callback);
        }
    }

    /**
     * updateBoardsPrefsSelfJoinByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param prefsSelfJoin Attributes of \&quot;Prefs Self Join\&quot; to be updated. (required)
     * @return UpdatePrefsSelfJoinByIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsSelfJoinByIdBoardRequestBuilder updatePrefsSelfJoinByIdBoard(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdatePrefsSelfJoinByIdBoardRequestBuilder(idBoard);
    }
    private okhttp3.Call updatePrefsShowSidebarMembersByIdCall(String idBoard, MyPrefsShowSidebarMembers myPrefsShowSidebarMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = myPrefsShowSidebarMembers;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/myPrefs/showSidebarMembers"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsShowSidebarMembersByIdValidateBeforeCall(String idBoard, MyPrefsShowSidebarMembers myPrefsShowSidebarMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updatePrefsShowSidebarMembersById(Async)");
        }

        // verify the required parameter 'myPrefsShowSidebarMembers' is set
        if (myPrefsShowSidebarMembers == null) {
            throw new ApiException("Missing the required parameter 'myPrefsShowSidebarMembers' when calling updatePrefsShowSidebarMembersById(Async)");
        }

        return updatePrefsShowSidebarMembersByIdCall(idBoard, myPrefsShowSidebarMembers, _callback);

    }


    private ApiResponse<Void> updatePrefsShowSidebarMembersByIdWithHttpInfo(String idBoard, MyPrefsShowSidebarMembers myPrefsShowSidebarMembers) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsShowSidebarMembersByIdValidateBeforeCall(idBoard, myPrefsShowSidebarMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsShowSidebarMembersByIdAsync(String idBoard, MyPrefsShowSidebarMembers myPrefsShowSidebarMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsShowSidebarMembersByIdValidateBeforeCall(idBoard, myPrefsShowSidebarMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsShowSidebarMembersByIdRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdatePrefsShowSidebarMembersByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdatePrefsShowSidebarMembersByIdRequestBuilder
         */
        public UpdatePrefsShowSidebarMembersByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsShowSidebarMembersById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MyPrefsShowSidebarMembers myPrefsShowSidebarMembers = buildBodyParams();
            return updatePrefsShowSidebarMembersByIdCall(idBoard, myPrefsShowSidebarMembers, _callback);
        }

        private MyPrefsShowSidebarMembers buildBodyParams() {
            MyPrefsShowSidebarMembers myPrefsShowSidebarMembers = new MyPrefsShowSidebarMembers();
            myPrefsShowSidebarMembers.value(this.value);
            return myPrefsShowSidebarMembers;
        }

        /**
         * Execute updatePrefsShowSidebarMembersById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MyPrefsShowSidebarMembers myPrefsShowSidebarMembers = buildBodyParams();
            updatePrefsShowSidebarMembersByIdWithHttpInfo(idBoard, myPrefsShowSidebarMembers);
        }

        /**
         * Execute updatePrefsShowSidebarMembersById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MyPrefsShowSidebarMembers myPrefsShowSidebarMembers = buildBodyParams();
            return updatePrefsShowSidebarMembersByIdWithHttpInfo(idBoard, myPrefsShowSidebarMembers);
        }

        /**
         * Execute updatePrefsShowSidebarMembersById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MyPrefsShowSidebarMembers myPrefsShowSidebarMembers = buildBodyParams();
            return updatePrefsShowSidebarMembersByIdAsync(idBoard, myPrefsShowSidebarMembers, _callback);
        }
    }

    /**
     * updateBoardsMyPrefsShowSidebarMembersByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param myPrefsShowSidebarMembers Attributes of \&quot;My Prefs Show Sidebar Members\&quot; to be updated. (required)
     * @return UpdatePrefsShowSidebarMembersByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsShowSidebarMembersByIdRequestBuilder updatePrefsShowSidebarMembersById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdatePrefsShowSidebarMembersByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call updateSubscribedByIdCall(String idBoard, BoardsSubscribed boardsSubscribed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = boardsSubscribed;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/subscribed"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscribedByIdValidateBeforeCall(String idBoard, BoardsSubscribed boardsSubscribed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateSubscribedById(Async)");
        }

        // verify the required parameter 'boardsSubscribed' is set
        if (boardsSubscribed == null) {
            throw new ApiException("Missing the required parameter 'boardsSubscribed' when calling updateSubscribedById(Async)");
        }

        return updateSubscribedByIdCall(idBoard, boardsSubscribed, _callback);

    }


    private ApiResponse<Void> updateSubscribedByIdWithHttpInfo(String idBoard, BoardsSubscribed boardsSubscribed) throws ApiException {
        okhttp3.Call localVarCall = updateSubscribedByIdValidateBeforeCall(idBoard, boardsSubscribed, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSubscribedByIdAsync(String idBoard, BoardsSubscribed boardsSubscribed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscribedByIdValidateBeforeCall(idBoard, boardsSubscribed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSubscribedByIdRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateSubscribedByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateSubscribedByIdRequestBuilder
         */
        public UpdateSubscribedByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateSubscribedById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BoardsSubscribed boardsSubscribed = buildBodyParams();
            return updateSubscribedByIdCall(idBoard, boardsSubscribed, _callback);
        }

        private BoardsSubscribed buildBodyParams() {
            BoardsSubscribed boardsSubscribed = new BoardsSubscribed();
            boardsSubscribed.value(this.value);
            return boardsSubscribed;
        }

        /**
         * Execute updateSubscribedById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BoardsSubscribed boardsSubscribed = buildBodyParams();
            updateSubscribedByIdWithHttpInfo(idBoard, boardsSubscribed);
        }

        /**
         * Execute updateSubscribedById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BoardsSubscribed boardsSubscribed = buildBodyParams();
            return updateSubscribedByIdWithHttpInfo(idBoard, boardsSubscribed);
        }

        /**
         * Execute updateSubscribedById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BoardsSubscribed boardsSubscribed = buildBodyParams();
            return updateSubscribedByIdAsync(idBoard, boardsSubscribed, _callback);
        }
    }

    /**
     * updateBoardsSubscribedByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param boardsSubscribed Attributes of \&quot;Boards Subscribed\&quot; to be updated. (required)
     * @return UpdateSubscribedByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSubscribedByIdRequestBuilder updateSubscribedById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateSubscribedByIdRequestBuilder(idBoard);
    }
    private okhttp3.Call updateVotingPrefsByIdCall(String idBoard, PrefsVoting prefsVoting, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsVoting;

        // create path and map variables
        String localVarPath = "/boards/{idBoard}/prefs/voting"
            .replace("{" + "idBoard" + "}", localVarApiClient.escapeString(idBoard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVotingPrefsByIdValidateBeforeCall(String idBoard, PrefsVoting prefsVoting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idBoard' is set
        if (idBoard == null) {
            throw new ApiException("Missing the required parameter 'idBoard' when calling updateVotingPrefsById(Async)");
        }

        // verify the required parameter 'prefsVoting' is set
        if (prefsVoting == null) {
            throw new ApiException("Missing the required parameter 'prefsVoting' when calling updateVotingPrefsById(Async)");
        }

        return updateVotingPrefsByIdCall(idBoard, prefsVoting, _callback);

    }


    private ApiResponse<Void> updateVotingPrefsByIdWithHttpInfo(String idBoard, PrefsVoting prefsVoting) throws ApiException {
        okhttp3.Call localVarCall = updateVotingPrefsByIdValidateBeforeCall(idBoard, prefsVoting, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateVotingPrefsByIdAsync(String idBoard, PrefsVoting prefsVoting, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVotingPrefsByIdValidateBeforeCall(idBoard, prefsVoting, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateVotingPrefsByIdRequestBuilder {
        private final String idBoard;
        private String value;

        private UpdateVotingPrefsByIdRequestBuilder(String idBoard) {
            this.idBoard = idBoard;
        }

        /**
         * Set value
         * @param value One of: disabled, members, observers, org or public (optional)
         * @return UpdateVotingPrefsByIdRequestBuilder
         */
        public UpdateVotingPrefsByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateVotingPrefsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsVoting prefsVoting = buildBodyParams();
            return updateVotingPrefsByIdCall(idBoard, prefsVoting, _callback);
        }

        private PrefsVoting buildBodyParams() {
            PrefsVoting prefsVoting = new PrefsVoting();
            prefsVoting.value(this.value);
            return prefsVoting;
        }

        /**
         * Execute updateVotingPrefsById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsVoting prefsVoting = buildBodyParams();
            updateVotingPrefsByIdWithHttpInfo(idBoard, prefsVoting);
        }

        /**
         * Execute updateVotingPrefsById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsVoting prefsVoting = buildBodyParams();
            return updateVotingPrefsByIdWithHttpInfo(idBoard, prefsVoting);
        }

        /**
         * Execute updateVotingPrefsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsVoting prefsVoting = buildBodyParams();
            return updateVotingPrefsByIdAsync(idBoard, prefsVoting, _callback);
        }
    }

    /**
     * updateBoardsPrefsVotingByIdBoard()
     * 
     * @param idBoard board_id (required)
     * @param prefsVoting Attributes of \&quot;Prefs Voting\&quot; to be updated. (required)
     * @return UpdateVotingPrefsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateVotingPrefsByIdRequestBuilder updateVotingPrefsById(String idBoard) throws IllegalArgumentException {
        if (idBoard == null) throw new IllegalArgumentException("\"idBoard\" is required but got null");
            

        return new UpdateVotingPrefsByIdRequestBuilder(idBoard);
    }
}
