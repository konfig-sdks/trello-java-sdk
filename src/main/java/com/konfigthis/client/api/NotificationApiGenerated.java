/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Notifications;
import com.konfigthis.client.model.NotificationsUnread;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class NotificationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBoardByFieldCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/board/{field}"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardByFieldValidateBeforeCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getBoardByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getBoardByField(Async)");
        }

        return getBoardByFieldCall(idNotification, field, _callback);

    }


    private ApiResponse<Void> getBoardByFieldWithHttpInfo(String idNotification, String field) throws ApiException {
        okhttp3.Call localVarCall = getBoardByFieldValidateBeforeCall(idNotification, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardByFieldAsync(String idNotification, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardByFieldValidateBeforeCall(idNotification, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardByFieldRequestBuilder {
        private final String idNotification;
        private final String field;

        private GetBoardByFieldRequestBuilder(String idNotification, String field) {
            this.idNotification = idNotification;
            this.field = field;
        }

        /**
         * Build call for getBoardByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardByFieldCall(idNotification, field, _callback);
        }


        /**
         * Execute getBoardByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardByFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getBoardByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardByFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getBoardByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardByFieldAsync(idNotification, field, _callback);
        }
    }

    /**
     * getNotificationsBoardByIdNotificationByField()
     * 
     * @param idNotification idNotification (required)
     * @param field field (required)
     * @return GetBoardByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardByFieldRequestBuilder getBoardByField(String idNotification, String field) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetBoardByFieldRequestBuilder(idNotification, field);
    }
    private okhttp3.Call getBoardByIdCall(String idNotification, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/board"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardByIdValidateBeforeCall(String idNotification, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getBoardById(Async)");
        }

        return getBoardByIdCall(idNotification, fields, _callback);

    }


    private ApiResponse<Void> getBoardByIdWithHttpInfo(String idNotification, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardByIdValidateBeforeCall(idNotification, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardByIdAsync(String idNotification, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardByIdValidateBeforeCall(idNotification, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardByIdRequestBuilder {
        private final String idNotification;
        private String fields;

        private GetBoardByIdRequestBuilder(String idNotification) {
            this.idNotification = idNotification;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
         * @return GetBoardByIdRequestBuilder
         */
        public GetBoardByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getBoardById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardByIdCall(idNotification, fields, _callback);
        }


        /**
         * Execute getBoardById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardByIdWithHttpInfo(idNotification, fields);
        }

        /**
         * Execute getBoardById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardByIdWithHttpInfo(idNotification, fields);
        }

        /**
         * Execute getBoardById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardByIdAsync(idNotification, fields, _callback);
        }
    }

    /**
     * getNotificationsBoardByIdNotification()
     * 
     * @param idNotification idNotification (required)
     * @return GetBoardByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardByIdRequestBuilder getBoardById(String idNotification) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        return new GetBoardByIdRequestBuilder(idNotification);
    }
    private okhttp3.Call getByIdCall(String idNotification, String display, String entities, String fields, String memberCreator, String memberCreatorFields, String board, String boardFields, String list, String card, String cardFields, String organization, String organizationFields, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (memberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator", memberCreator));
        }

        if (memberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator_fields", memberCreatorFields));
        }

        if (board != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board", board));
        }

        if (boardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_fields", boardFields));
        }

        if (list != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list", list));
        }

        if (card != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card", card));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (organization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
        }

        if (organizationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_fields", organizationFields));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String idNotification, String display, String entities, String fields, String memberCreator, String memberCreatorFields, String board, String boardFields, String list, String card, String cardFields, String organization, String organizationFields, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getById(Async)");
        }

        return getByIdCall(idNotification, display, entities, fields, memberCreator, memberCreatorFields, board, boardFields, list, card, cardFields, organization, organizationFields, member, memberFields, _callback);

    }


    private ApiResponse<Void> getByIdWithHttpInfo(String idNotification, String display, String entities, String fields, String memberCreator, String memberCreatorFields, String board, String boardFields, String list, String card, String cardFields, String organization, String organizationFields, String member, String memberFields) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idNotification, display, entities, fields, memberCreator, memberCreatorFields, board, boardFields, list, card, cardFields, organization, organizationFields, member, memberFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdAsync(String idNotification, String display, String entities, String fields, String memberCreator, String memberCreatorFields, String board, String boardFields, String list, String card, String cardFields, String organization, String organizationFields, String member, String memberFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idNotification, display, entities, fields, memberCreator, memberCreatorFields, board, boardFields, list, card, cardFields, organization, organizationFields, member, memberFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String idNotification;
        private String display;
        private String entities;
        private String fields;
        private String memberCreator;
        private String memberCreatorFields;
        private String board;
        private String boardFields;
        private String list;
        private String card;
        private String cardFields;
        private String organization;
        private String organizationFields;
        private String member;
        private String memberFields;

        private GetByIdRequestBuilder(String idNotification) {
            this.idNotification = idNotification;
        }

        /**
         * Set display
         * @param display  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder display(String display) {
            this.display = display;
            return this;
        }
        
        /**
         * Set entities
         * @param entities  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder entities(String entities) {
            this.entities = entities;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: data, date, idMemberCreator, type or unread (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set memberCreator
         * @param memberCreator  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder memberCreator(String memberCreator) {
            this.memberCreator = memberCreator;
            return this;
        }
        
        /**
         * Set memberCreatorFields
         * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder memberCreatorFields(String memberCreatorFields) {
            this.memberCreatorFields = memberCreatorFields;
            return this;
        }
        
        /**
         * Set board
         * @param board  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder board(String board) {
            this.board = board;
            return this;
        }
        
        /**
         * Set boardFields
         * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardFields(String boardFields) {
            this.boardFields = boardFields;
            return this;
        }
        
        /**
         * Set list
         * @param list  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder list(String list) {
            this.list = list;
            return this;
        }
        
        /**
         * Set card
         * @param card  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder card(String card) {
            this.card = card;
            return this;
        }
        
        /**
         * Set cardFields
         * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to name)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardFields(String cardFields) {
            this.cardFields = cardFields;
            return this;
        }
        
        /**
         * Set organization
         * @param organization  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder organization(String organization) {
            this.organization = organization;
            return this;
        }
        
        /**
         * Set organizationFields
         * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to displayName)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder organizationFields(String organizationFields) {
            this.organizationFields = organizationFields;
            return this;
        }
        
        /**
         * Set member
         * @param member  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder member(String member) {
            this.member = member;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(idNotification, display, entities, fields, memberCreator, memberCreatorFields, board, boardFields, list, card, cardFields, organization, organizationFields, member, memberFields, _callback);
        }


        /**
         * Execute getById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdWithHttpInfo(idNotification, display, entities, fields, memberCreator, memberCreatorFields, board, boardFields, list, card, cardFields, organization, organizationFields, member, memberFields);
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(idNotification, display, entities, fields, memberCreator, memberCreatorFields, board, boardFields, list, card, cardFields, organization, organizationFields, member, memberFields);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdAsync(idNotification, display, entities, fields, memberCreator, memberCreatorFields, board, boardFields, list, card, cardFields, organization, organizationFields, member, memberFields, _callback);
        }
    }

    /**
     * getNotificationsByIdNotification()
     * 
     * @param idNotification idNotification (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String idNotification) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        return new GetByIdRequestBuilder(idNotification);
    }
    private okhttp3.Call getByIdFieldCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/{field}"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdFieldValidateBeforeCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getByIdField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getByIdField(Async)");
        }

        return getByIdFieldCall(idNotification, field, _callback);

    }


    private ApiResponse<Void> getByIdFieldWithHttpInfo(String idNotification, String field) throws ApiException {
        okhttp3.Call localVarCall = getByIdFieldValidateBeforeCall(idNotification, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdFieldAsync(String idNotification, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdFieldValidateBeforeCall(idNotification, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdFieldRequestBuilder {
        private final String idNotification;
        private final String field;

        private GetByIdFieldRequestBuilder(String idNotification, String field) {
            this.idNotification = idNotification;
            this.field = field;
        }

        /**
         * Build call for getByIdField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdFieldCall(idNotification, field, _callback);
        }


        /**
         * Execute getByIdField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getByIdField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getByIdField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdFieldAsync(idNotification, field, _callback);
        }
    }

    /**
     * getNotificationsByIdNotificationByField()
     * 
     * @param idNotification idNotification (required)
     * @param field field (required)
     * @return GetByIdFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdFieldRequestBuilder getByIdField(String idNotification, String field) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetByIdFieldRequestBuilder(idNotification, field);
    }
    private okhttp3.Call getCardByIdCall(String idNotification, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/card"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardByIdValidateBeforeCall(String idNotification, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getCardById(Async)");
        }

        return getCardByIdCall(idNotification, fields, _callback);

    }


    private ApiResponse<Void> getCardByIdWithHttpInfo(String idNotification, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardByIdValidateBeforeCall(idNotification, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCardByIdAsync(String idNotification, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardByIdValidateBeforeCall(idNotification, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCardByIdRequestBuilder {
        private final String idNotification;
        private String fields;

        private GetCardByIdRequestBuilder(String idNotification) {
            this.idNotification = idNotification;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetCardByIdRequestBuilder
         */
        public GetCardByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCardById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardByIdCall(idNotification, fields, _callback);
        }


        /**
         * Execute getCardById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCardByIdWithHttpInfo(idNotification, fields);
        }

        /**
         * Execute getCardById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCardByIdWithHttpInfo(idNotification, fields);
        }

        /**
         * Execute getCardById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCardByIdAsync(idNotification, fields, _callback);
        }
    }

    /**
     * getNotificationsCardByIdNotification()
     * 
     * @param idNotification idNotification (required)
     * @return GetCardByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCardByIdRequestBuilder getCardById(String idNotification) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        return new GetCardByIdRequestBuilder(idNotification);
    }
    private okhttp3.Call getCardByIdNotificationByFieldCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/card/{field}"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardByIdNotificationByFieldValidateBeforeCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getCardByIdNotificationByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getCardByIdNotificationByField(Async)");
        }

        return getCardByIdNotificationByFieldCall(idNotification, field, _callback);

    }


    private ApiResponse<Void> getCardByIdNotificationByFieldWithHttpInfo(String idNotification, String field) throws ApiException {
        okhttp3.Call localVarCall = getCardByIdNotificationByFieldValidateBeforeCall(idNotification, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCardByIdNotificationByFieldAsync(String idNotification, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardByIdNotificationByFieldValidateBeforeCall(idNotification, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCardByIdNotificationByFieldRequestBuilder {
        private final String idNotification;
        private final String field;

        private GetCardByIdNotificationByFieldRequestBuilder(String idNotification, String field) {
            this.idNotification = idNotification;
            this.field = field;
        }

        /**
         * Build call for getCardByIdNotificationByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardByIdNotificationByFieldCall(idNotification, field, _callback);
        }


        /**
         * Execute getCardByIdNotificationByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCardByIdNotificationByFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getCardByIdNotificationByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCardByIdNotificationByFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getCardByIdNotificationByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCardByIdNotificationByFieldAsync(idNotification, field, _callback);
        }
    }

    /**
     * getNotificationsCardByIdNotificationByField()
     * 
     * @param idNotification idNotification (required)
     * @param field field (required)
     * @return GetCardByIdNotificationByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCardByIdNotificationByFieldRequestBuilder getCardByIdNotificationByField(String idNotification, String field) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetCardByIdNotificationByFieldRequestBuilder(idNotification, field);
    }
    private okhttp3.Call getDisplayByIdNotificationCall(String idNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/display"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDisplayByIdNotificationValidateBeforeCall(String idNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getDisplayByIdNotification(Async)");
        }

        return getDisplayByIdNotificationCall(idNotification, _callback);

    }


    private ApiResponse<Void> getDisplayByIdNotificationWithHttpInfo(String idNotification) throws ApiException {
        okhttp3.Call localVarCall = getDisplayByIdNotificationValidateBeforeCall(idNotification, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDisplayByIdNotificationAsync(String idNotification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDisplayByIdNotificationValidateBeforeCall(idNotification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDisplayByIdNotificationRequestBuilder {
        private final String idNotification;

        private GetDisplayByIdNotificationRequestBuilder(String idNotification) {
            this.idNotification = idNotification;
        }

        /**
         * Build call for getDisplayByIdNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDisplayByIdNotificationCall(idNotification, _callback);
        }


        /**
         * Execute getDisplayByIdNotification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDisplayByIdNotificationWithHttpInfo(idNotification);
        }

        /**
         * Execute getDisplayByIdNotification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDisplayByIdNotificationWithHttpInfo(idNotification);
        }

        /**
         * Execute getDisplayByIdNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDisplayByIdNotificationAsync(idNotification, _callback);
        }
    }

    /**
     * getNotificationsDisplayByIdNotification()
     * 
     * @param idNotification idNotification (required)
     * @return GetDisplayByIdNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetDisplayByIdNotificationRequestBuilder getDisplayByIdNotification(String idNotification) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        return new GetDisplayByIdNotificationRequestBuilder(idNotification);
    }
    private okhttp3.Call getEntitiesByIdNotificationCall(String idNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/entities"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitiesByIdNotificationValidateBeforeCall(String idNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getEntitiesByIdNotification(Async)");
        }

        return getEntitiesByIdNotificationCall(idNotification, _callback);

    }


    private ApiResponse<Void> getEntitiesByIdNotificationWithHttpInfo(String idNotification) throws ApiException {
        okhttp3.Call localVarCall = getEntitiesByIdNotificationValidateBeforeCall(idNotification, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEntitiesByIdNotificationAsync(String idNotification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitiesByIdNotificationValidateBeforeCall(idNotification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetEntitiesByIdNotificationRequestBuilder {
        private final String idNotification;

        private GetEntitiesByIdNotificationRequestBuilder(String idNotification) {
            this.idNotification = idNotification;
        }

        /**
         * Build call for getEntitiesByIdNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEntitiesByIdNotificationCall(idNotification, _callback);
        }


        /**
         * Execute getEntitiesByIdNotification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getEntitiesByIdNotificationWithHttpInfo(idNotification);
        }

        /**
         * Execute getEntitiesByIdNotification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getEntitiesByIdNotificationWithHttpInfo(idNotification);
        }

        /**
         * Execute getEntitiesByIdNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getEntitiesByIdNotificationAsync(idNotification, _callback);
        }
    }

    /**
     * getNotificationsEntitiesByIdNotification()
     * 
     * @param idNotification idNotification (required)
     * @return GetEntitiesByIdNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetEntitiesByIdNotificationRequestBuilder getEntitiesByIdNotification(String idNotification) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        return new GetEntitiesByIdNotificationRequestBuilder(idNotification);
    }
    private okhttp3.Call getListByIdNotificationCall(String idNotification, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/list"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListByIdNotificationValidateBeforeCall(String idNotification, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getListByIdNotification(Async)");
        }

        return getListByIdNotificationCall(idNotification, fields, _callback);

    }


    private ApiResponse<Void> getListByIdNotificationWithHttpInfo(String idNotification, String fields) throws ApiException {
        okhttp3.Call localVarCall = getListByIdNotificationValidateBeforeCall(idNotification, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getListByIdNotificationAsync(String idNotification, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListByIdNotificationValidateBeforeCall(idNotification, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetListByIdNotificationRequestBuilder {
        private final String idNotification;
        private String fields;

        private GetListByIdNotificationRequestBuilder(String idNotification) {
            this.idNotification = idNotification;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
         * @return GetListByIdNotificationRequestBuilder
         */
        public GetListByIdNotificationRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getListByIdNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListByIdNotificationCall(idNotification, fields, _callback);
        }


        /**
         * Execute getListByIdNotification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getListByIdNotificationWithHttpInfo(idNotification, fields);
        }

        /**
         * Execute getListByIdNotification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getListByIdNotificationWithHttpInfo(idNotification, fields);
        }

        /**
         * Execute getListByIdNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getListByIdNotificationAsync(idNotification, fields, _callback);
        }
    }

    /**
     * getNotificationsListByIdNotification()
     * 
     * @param idNotification idNotification (required)
     * @return GetListByIdNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetListByIdNotificationRequestBuilder getListByIdNotification(String idNotification) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        return new GetListByIdNotificationRequestBuilder(idNotification);
    }
    private okhttp3.Call getListByIdNotificationByFieldCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/list/{field}"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListByIdNotificationByFieldValidateBeforeCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getListByIdNotificationByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getListByIdNotificationByField(Async)");
        }

        return getListByIdNotificationByFieldCall(idNotification, field, _callback);

    }


    private ApiResponse<Void> getListByIdNotificationByFieldWithHttpInfo(String idNotification, String field) throws ApiException {
        okhttp3.Call localVarCall = getListByIdNotificationByFieldValidateBeforeCall(idNotification, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getListByIdNotificationByFieldAsync(String idNotification, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListByIdNotificationByFieldValidateBeforeCall(idNotification, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetListByIdNotificationByFieldRequestBuilder {
        private final String idNotification;
        private final String field;

        private GetListByIdNotificationByFieldRequestBuilder(String idNotification, String field) {
            this.idNotification = idNotification;
            this.field = field;
        }

        /**
         * Build call for getListByIdNotificationByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListByIdNotificationByFieldCall(idNotification, field, _callback);
        }


        /**
         * Execute getListByIdNotificationByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getListByIdNotificationByFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getListByIdNotificationByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getListByIdNotificationByFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getListByIdNotificationByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getListByIdNotificationByFieldAsync(idNotification, field, _callback);
        }
    }

    /**
     * getNotificationsListByIdNotificationByField()
     * 
     * @param idNotification idNotification (required)
     * @param field field (required)
     * @return GetListByIdNotificationByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetListByIdNotificationByFieldRequestBuilder getListByIdNotificationByField(String idNotification, String field) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetListByIdNotificationByFieldRequestBuilder(idNotification, field);
    }
    private okhttp3.Call getMemberByIdFieldCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/member/{field}"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberByIdFieldValidateBeforeCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getMemberByIdField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getMemberByIdField(Async)");
        }

        return getMemberByIdFieldCall(idNotification, field, _callback);

    }


    private ApiResponse<Void> getMemberByIdFieldWithHttpInfo(String idNotification, String field) throws ApiException {
        okhttp3.Call localVarCall = getMemberByIdFieldValidateBeforeCall(idNotification, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMemberByIdFieldAsync(String idNotification, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberByIdFieldValidateBeforeCall(idNotification, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMemberByIdFieldRequestBuilder {
        private final String idNotification;
        private final String field;

        private GetMemberByIdFieldRequestBuilder(String idNotification, String field) {
            this.idNotification = idNotification;
            this.field = field;
        }

        /**
         * Build call for getMemberByIdField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberByIdFieldCall(idNotification, field, _callback);
        }


        /**
         * Execute getMemberByIdField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMemberByIdFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getMemberByIdField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMemberByIdFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getMemberByIdField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMemberByIdFieldAsync(idNotification, field, _callback);
        }
    }

    /**
     * getNotificationsMemberByIdNotificationByField()
     * 
     * @param idNotification idNotification (required)
     * @param field field (required)
     * @return GetMemberByIdFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberByIdFieldRequestBuilder getMemberByIdField(String idNotification, String field) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetMemberByIdFieldRequestBuilder(idNotification, field);
    }
    private okhttp3.Call getMemberByIdNotificationByFieldCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/memberCreator/{field}"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberByIdNotificationByFieldValidateBeforeCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getMemberByIdNotificationByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getMemberByIdNotificationByField(Async)");
        }

        return getMemberByIdNotificationByFieldCall(idNotification, field, _callback);

    }


    private ApiResponse<Void> getMemberByIdNotificationByFieldWithHttpInfo(String idNotification, String field) throws ApiException {
        okhttp3.Call localVarCall = getMemberByIdNotificationByFieldValidateBeforeCall(idNotification, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMemberByIdNotificationByFieldAsync(String idNotification, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberByIdNotificationByFieldValidateBeforeCall(idNotification, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMemberByIdNotificationByFieldRequestBuilder {
        private final String idNotification;
        private final String field;

        private GetMemberByIdNotificationByFieldRequestBuilder(String idNotification, String field) {
            this.idNotification = idNotification;
            this.field = field;
        }

        /**
         * Build call for getMemberByIdNotificationByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberByIdNotificationByFieldCall(idNotification, field, _callback);
        }


        /**
         * Execute getMemberByIdNotificationByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMemberByIdNotificationByFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getMemberByIdNotificationByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMemberByIdNotificationByFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getMemberByIdNotificationByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMemberByIdNotificationByFieldAsync(idNotification, field, _callback);
        }
    }

    /**
     * getNotificationsMemberCreatorByIdNotificationByField()
     * 
     * @param idNotification idNotification (required)
     * @param field field (required)
     * @return GetMemberByIdNotificationByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberByIdNotificationByFieldRequestBuilder getMemberByIdNotificationByField(String idNotification, String field) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetMemberByIdNotificationByFieldRequestBuilder(idNotification, field);
    }
    private okhttp3.Call getMemberByNotificationCall(String idNotification, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/member"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberByNotificationValidateBeforeCall(String idNotification, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getMemberByNotification(Async)");
        }

        return getMemberByNotificationCall(idNotification, fields, _callback);

    }


    private ApiResponse<Void> getMemberByNotificationWithHttpInfo(String idNotification, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMemberByNotificationValidateBeforeCall(idNotification, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMemberByNotificationAsync(String idNotification, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberByNotificationValidateBeforeCall(idNotification, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMemberByNotificationRequestBuilder {
        private final String idNotification;
        private String fields;

        private GetMemberByNotificationRequestBuilder(String idNotification) {
            this.idNotification = idNotification;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
         * @return GetMemberByNotificationRequestBuilder
         */
        public GetMemberByNotificationRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getMemberByNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberByNotificationCall(idNotification, fields, _callback);
        }


        /**
         * Execute getMemberByNotification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMemberByNotificationWithHttpInfo(idNotification, fields);
        }

        /**
         * Execute getMemberByNotification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMemberByNotificationWithHttpInfo(idNotification, fields);
        }

        /**
         * Execute getMemberByNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMemberByNotificationAsync(idNotification, fields, _callback);
        }
    }

    /**
     * getNotificationsMemberByIdNotification()
     * 
     * @param idNotification idNotification (required)
     * @return GetMemberByNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberByNotificationRequestBuilder getMemberByNotification(String idNotification) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        return new GetMemberByNotificationRequestBuilder(idNotification);
    }
    private okhttp3.Call getMemberCreatorByIdCall(String idNotification, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/memberCreator"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberCreatorByIdValidateBeforeCall(String idNotification, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getMemberCreatorById(Async)");
        }

        return getMemberCreatorByIdCall(idNotification, fields, _callback);

    }


    private ApiResponse<Void> getMemberCreatorByIdWithHttpInfo(String idNotification, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMemberCreatorByIdValidateBeforeCall(idNotification, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMemberCreatorByIdAsync(String idNotification, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberCreatorByIdValidateBeforeCall(idNotification, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMemberCreatorByIdRequestBuilder {
        private final String idNotification;
        private String fields;

        private GetMemberCreatorByIdRequestBuilder(String idNotification) {
            this.idNotification = idNotification;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
         * @return GetMemberCreatorByIdRequestBuilder
         */
        public GetMemberCreatorByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getMemberCreatorById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberCreatorByIdCall(idNotification, fields, _callback);
        }


        /**
         * Execute getMemberCreatorById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMemberCreatorByIdWithHttpInfo(idNotification, fields);
        }

        /**
         * Execute getMemberCreatorById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMemberCreatorByIdWithHttpInfo(idNotification, fields);
        }

        /**
         * Execute getMemberCreatorById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMemberCreatorByIdAsync(idNotification, fields, _callback);
        }
    }

    /**
     * getNotificationsMemberCreatorByIdNotification()
     * 
     * @param idNotification idNotification (required)
     * @return GetMemberCreatorByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberCreatorByIdRequestBuilder getMemberCreatorById(String idNotification) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        return new GetMemberCreatorByIdRequestBuilder(idNotification);
    }
    private okhttp3.Call getOrganizationByIdNotificationCall(String idNotification, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/organization"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationByIdNotificationValidateBeforeCall(String idNotification, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getOrganizationByIdNotification(Async)");
        }

        return getOrganizationByIdNotificationCall(idNotification, fields, _callback);

    }


    private ApiResponse<Void> getOrganizationByIdNotificationWithHttpInfo(String idNotification, String fields) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationByIdNotificationValidateBeforeCall(idNotification, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getOrganizationByIdNotificationAsync(String idNotification, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationByIdNotificationValidateBeforeCall(idNotification, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetOrganizationByIdNotificationRequestBuilder {
        private final String idNotification;
        private String fields;

        private GetOrganizationByIdNotificationRequestBuilder(String idNotification) {
            this.idNotification = idNotification;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
         * @return GetOrganizationByIdNotificationRequestBuilder
         */
        public GetOrganizationByIdNotificationRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getOrganizationByIdNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationByIdNotificationCall(idNotification, fields, _callback);
        }


        /**
         * Execute getOrganizationByIdNotification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getOrganizationByIdNotificationWithHttpInfo(idNotification, fields);
        }

        /**
         * Execute getOrganizationByIdNotification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getOrganizationByIdNotificationWithHttpInfo(idNotification, fields);
        }

        /**
         * Execute getOrganizationByIdNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getOrganizationByIdNotificationAsync(idNotification, fields, _callback);
        }
    }

    /**
     * getNotificationsOrganizationByIdNotification()
     * 
     * @param idNotification idNotification (required)
     * @return GetOrganizationByIdNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationByIdNotificationRequestBuilder getOrganizationByIdNotification(String idNotification) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        return new GetOrganizationByIdNotificationRequestBuilder(idNotification);
    }
    private okhttp3.Call getOrganizationByIdNotificationByFieldCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/organization/{field}"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationByIdNotificationByFieldValidateBeforeCall(String idNotification, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling getOrganizationByIdNotificationByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getOrganizationByIdNotificationByField(Async)");
        }

        return getOrganizationByIdNotificationByFieldCall(idNotification, field, _callback);

    }


    private ApiResponse<Void> getOrganizationByIdNotificationByFieldWithHttpInfo(String idNotification, String field) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationByIdNotificationByFieldValidateBeforeCall(idNotification, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getOrganizationByIdNotificationByFieldAsync(String idNotification, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationByIdNotificationByFieldValidateBeforeCall(idNotification, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetOrganizationByIdNotificationByFieldRequestBuilder {
        private final String idNotification;
        private final String field;

        private GetOrganizationByIdNotificationByFieldRequestBuilder(String idNotification, String field) {
            this.idNotification = idNotification;
            this.field = field;
        }

        /**
         * Build call for getOrganizationByIdNotificationByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationByIdNotificationByFieldCall(idNotification, field, _callback);
        }


        /**
         * Execute getOrganizationByIdNotificationByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getOrganizationByIdNotificationByFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getOrganizationByIdNotificationByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getOrganizationByIdNotificationByFieldWithHttpInfo(idNotification, field);
        }

        /**
         * Execute getOrganizationByIdNotificationByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getOrganizationByIdNotificationByFieldAsync(idNotification, field, _callback);
        }
    }

    /**
     * getNotificationsOrganizationByIdNotificationByField()
     * 
     * @param idNotification idNotification (required)
     * @param field field (required)
     * @return GetOrganizationByIdNotificationByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationByIdNotificationByFieldRequestBuilder getOrganizationByIdNotificationByField(String idNotification, String field) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetOrganizationByIdNotificationByFieldRequestBuilder(idNotification, field);
    }
    private okhttp3.Call markAllAsReadCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/all/read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markAllAsReadValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return markAllAsReadCall(_callback);

    }


    private ApiResponse<Void> markAllAsReadWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = markAllAsReadValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call markAllAsReadAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markAllAsReadValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class MarkAllAsReadRequestBuilder {

        private MarkAllAsReadRequestBuilder() {
        }

        /**
         * Build call for markAllAsRead
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return markAllAsReadCall(_callback);
        }


        /**
         * Execute markAllAsRead request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            markAllAsReadWithHttpInfo();
        }

        /**
         * Execute markAllAsRead request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return markAllAsReadWithHttpInfo();
        }

        /**
         * Execute markAllAsRead request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return markAllAsReadAsync(_callback);
        }
    }

    /**
     * addNotificationsAllRead()
     * 
     * @return MarkAllAsReadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public MarkAllAsReadRequestBuilder markAllAsRead() throws IllegalArgumentException {
        return new MarkAllAsReadRequestBuilder();
    }
    private okhttp3.Call updateByIdNotificationCall(String idNotification, Notifications notifications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notifications;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdNotificationValidateBeforeCall(String idNotification, Notifications notifications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling updateByIdNotification(Async)");
        }

        // verify the required parameter 'notifications' is set
        if (notifications == null) {
            throw new ApiException("Missing the required parameter 'notifications' when calling updateByIdNotification(Async)");
        }

        return updateByIdNotificationCall(idNotification, notifications, _callback);

    }


    private ApiResponse<Void> updateByIdNotificationWithHttpInfo(String idNotification, Notifications notifications) throws ApiException {
        okhttp3.Call localVarCall = updateByIdNotificationValidateBeforeCall(idNotification, notifications, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdNotificationAsync(String idNotification, Notifications notifications, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdNotificationValidateBeforeCall(idNotification, notifications, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdNotificationRequestBuilder {
        private final String idNotification;
        private String unread;

        private UpdateByIdNotificationRequestBuilder(String idNotification) {
            this.idNotification = idNotification;
        }

        /**
         * Set unread
         * @param unread  true or false (optional)
         * @return UpdateByIdNotificationRequestBuilder
         */
        public UpdateByIdNotificationRequestBuilder unread(String unread) {
            this.unread = unread;
            return this;
        }
        
        /**
         * Build call for updateByIdNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Notifications notifications = buildBodyParams();
            return updateByIdNotificationCall(idNotification, notifications, _callback);
        }

        private Notifications buildBodyParams() {
            Notifications notifications = new Notifications();
            notifications.unread(this.unread);
            return notifications;
        }

        /**
         * Execute updateByIdNotification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Notifications notifications = buildBodyParams();
            updateByIdNotificationWithHttpInfo(idNotification, notifications);
        }

        /**
         * Execute updateByIdNotification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Notifications notifications = buildBodyParams();
            return updateByIdNotificationWithHttpInfo(idNotification, notifications);
        }

        /**
         * Execute updateByIdNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Notifications notifications = buildBodyParams();
            return updateByIdNotificationAsync(idNotification, notifications, _callback);
        }
    }

    /**
     * updateNotificationsByIdNotification()
     * 
     * @param idNotification idNotification (required)
     * @param notifications Attributes of \&quot;Notifications\&quot; to be updated. (required)
     * @return UpdateByIdNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdNotificationRequestBuilder updateByIdNotification(String idNotification) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        return new UpdateByIdNotificationRequestBuilder(idNotification);
    }
    private okhttp3.Call updateUnreadByIdNotificationCall(String idNotification, NotificationsUnread notificationsUnread, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationsUnread;

        // create path and map variables
        String localVarPath = "/notifications/{idNotification}/unread"
            .replace("{" + "idNotification" + "}", localVarApiClient.escapeString(idNotification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUnreadByIdNotificationValidateBeforeCall(String idNotification, NotificationsUnread notificationsUnread, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idNotification' is set
        if (idNotification == null) {
            throw new ApiException("Missing the required parameter 'idNotification' when calling updateUnreadByIdNotification(Async)");
        }

        // verify the required parameter 'notificationsUnread' is set
        if (notificationsUnread == null) {
            throw new ApiException("Missing the required parameter 'notificationsUnread' when calling updateUnreadByIdNotification(Async)");
        }

        return updateUnreadByIdNotificationCall(idNotification, notificationsUnread, _callback);

    }


    private ApiResponse<Void> updateUnreadByIdNotificationWithHttpInfo(String idNotification, NotificationsUnread notificationsUnread) throws ApiException {
        okhttp3.Call localVarCall = updateUnreadByIdNotificationValidateBeforeCall(idNotification, notificationsUnread, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateUnreadByIdNotificationAsync(String idNotification, NotificationsUnread notificationsUnread, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUnreadByIdNotificationValidateBeforeCall(idNotification, notificationsUnread, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateUnreadByIdNotificationRequestBuilder {
        private final String idNotification;
        private String value;

        private UpdateUnreadByIdNotificationRequestBuilder(String idNotification) {
            this.idNotification = idNotification;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateUnreadByIdNotificationRequestBuilder
         */
        public UpdateUnreadByIdNotificationRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateUnreadByIdNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NotificationsUnread notificationsUnread = buildBodyParams();
            return updateUnreadByIdNotificationCall(idNotification, notificationsUnread, _callback);
        }

        private NotificationsUnread buildBodyParams() {
            NotificationsUnread notificationsUnread = new NotificationsUnread();
            notificationsUnread.value(this.value);
            return notificationsUnread;
        }

        /**
         * Execute updateUnreadByIdNotification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            NotificationsUnread notificationsUnread = buildBodyParams();
            updateUnreadByIdNotificationWithHttpInfo(idNotification, notificationsUnread);
        }

        /**
         * Execute updateUnreadByIdNotification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            NotificationsUnread notificationsUnread = buildBodyParams();
            return updateUnreadByIdNotificationWithHttpInfo(idNotification, notificationsUnread);
        }

        /**
         * Execute updateUnreadByIdNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            NotificationsUnread notificationsUnread = buildBodyParams();
            return updateUnreadByIdNotificationAsync(idNotification, notificationsUnread, _callback);
        }
    }

    /**
     * updateNotificationsUnreadByIdNotification()
     * 
     * @param idNotification idNotification (required)
     * @param notificationsUnread Attributes of \&quot;Notifications Unread\&quot; to be updated. (required)
     * @return UpdateUnreadByIdNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUnreadByIdNotificationRequestBuilder updateUnreadByIdNotification(String idNotification) throws IllegalArgumentException {
        if (idNotification == null) throw new IllegalArgumentException("\"idNotification\" is required but got null");
            

        return new UpdateUnreadByIdNotificationRequestBuilder(idNotification);
    }
}
