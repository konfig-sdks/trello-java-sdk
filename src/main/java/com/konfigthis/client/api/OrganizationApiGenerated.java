/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Organizations;
import com.konfigthis.client.model.OrganizationsDesc;
import com.konfigthis.client.model.OrganizationsDisplayName;
import com.konfigthis.client.model.OrganizationsLogo;
import com.konfigthis.client.model.OrganizationsMembers;
import com.konfigthis.client.model.OrganizationsMembersDeactivated;
import com.konfigthis.client.model.OrganizationsMemberships;
import com.konfigthis.client.model.OrganizationsName;
import com.konfigthis.client.model.OrganizationsWebsite;
import com.konfigthis.client.model.PrefsAssociatedDomain;
import com.konfigthis.client.model.PrefsBoardVisibilityRestrict;
import com.konfigthis.client.model.PrefsExternalMembersDisabled;
import com.konfigthis.client.model.PrefsGoogleAppsVersion;
import com.konfigthis.client.model.PrefsOrgInviteRestrict;
import com.konfigthis.client.model.PrefsPermissionLevel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrganizationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(Organizations organizations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizations;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(Organizations organizations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizations' is set
        if (organizations == null) {
            throw new ApiException("Missing the required parameter 'organizations' when calling create(Async)");
        }

        return createCall(organizations, _callback);

    }


    private ApiResponse<Void> createWithHttpInfo(Organizations organizations) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(organizations, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createAsync(Organizations organizations, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(organizations, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private String desc;
        private String displayName;
        private String name;
        private String prefsAssociatedDomain;
        private String prefsBoardVisibilityRestrictOrg;
        private String prefsBoardVisibilityRestrictPrivate;
        private String prefsBoardVisibilityRestrictPublic;
        private String prefsExternalMembersDisabled;
        private String prefsGoogleAppsVersion;
        private String prefsOrgInviteRestrict;
        private String prefsPermissionLevel;
        private String website;

        private CreateRequestBuilder() {
        }

        /**
         * Set desc
         * @param desc a string with a length from 0 to 16384 (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder desc(String desc) {
            this.desc = desc;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName A string with a length of at least 1.  Cannot begin or end with a space. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 0 to 16384 (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set prefsAssociatedDomain
         * @param prefsAssociatedDomain The google apps domain to link this org to. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder prefsAssociatedDomain(String prefsAssociatedDomain) {
            this.prefsAssociatedDomain = prefsAssociatedDomain;
            return this;
        }
        
        /**
         * Set prefsBoardVisibilityRestrictOrg
         * @param prefsBoardVisibilityRestrictOrg One of: admin, none or org (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder prefsBoardVisibilityRestrictOrg(String prefsBoardVisibilityRestrictOrg) {
            this.prefsBoardVisibilityRestrictOrg = prefsBoardVisibilityRestrictOrg;
            return this;
        }
        
        /**
         * Set prefsBoardVisibilityRestrictPrivate
         * @param prefsBoardVisibilityRestrictPrivate One of: admin, none or org (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder prefsBoardVisibilityRestrictPrivate(String prefsBoardVisibilityRestrictPrivate) {
            this.prefsBoardVisibilityRestrictPrivate = prefsBoardVisibilityRestrictPrivate;
            return this;
        }
        
        /**
         * Set prefsBoardVisibilityRestrictPublic
         * @param prefsBoardVisibilityRestrictPublic One of: admin, none or org (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder prefsBoardVisibilityRestrictPublic(String prefsBoardVisibilityRestrictPublic) {
            this.prefsBoardVisibilityRestrictPublic = prefsBoardVisibilityRestrictPublic;
            return this;
        }
        
        /**
         * Set prefsExternalMembersDisabled
         * @param prefsExternalMembersDisabled  true or false (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder prefsExternalMembersDisabled(String prefsExternalMembersDisabled) {
            this.prefsExternalMembersDisabled = prefsExternalMembersDisabled;
            return this;
        }
        
        /**
         * Set prefsGoogleAppsVersion
         * @param prefsGoogleAppsVersion a number from 1 to 2 (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder prefsGoogleAppsVersion(String prefsGoogleAppsVersion) {
            this.prefsGoogleAppsVersion = prefsGoogleAppsVersion;
            return this;
        }
        
        /**
         * Set prefsOrgInviteRestrict
         * @param prefsOrgInviteRestrict An email address with optional expansion tokens (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder prefsOrgInviteRestrict(String prefsOrgInviteRestrict) {
            this.prefsOrgInviteRestrict = prefsOrgInviteRestrict;
            return this;
        }
        
        /**
         * Set prefsPermissionLevel
         * @param prefsPermissionLevel One of: private or public (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder prefsPermissionLevel(String prefsPermissionLevel) {
            this.prefsPermissionLevel = prefsPermissionLevel;
            return this;
        }
        
        /**
         * Set website
         * @param website A URL starting with http:// or https:// or null (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder website(String website) {
            this.website = website;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Organizations organizations = buildBodyParams();
            return createCall(organizations, _callback);
        }

        private Organizations buildBodyParams() {
            Organizations organizations = new Organizations();
            organizations.desc(this.desc);
            organizations.displayName(this.displayName);
            organizations.name(this.name);
            organizations.prefsAssociatedDomain(this.prefsAssociatedDomain);
            organizations.prefsBoardVisibilityRestrictOrg(this.prefsBoardVisibilityRestrictOrg);
            organizations.prefsBoardVisibilityRestrictPrivate(this.prefsBoardVisibilityRestrictPrivate);
            organizations.prefsBoardVisibilityRestrictPublic(this.prefsBoardVisibilityRestrictPublic);
            organizations.prefsExternalMembersDisabled(this.prefsExternalMembersDisabled);
            organizations.prefsGoogleAppsVersion(this.prefsGoogleAppsVersion);
            organizations.prefsOrgInviteRestrict(this.prefsOrgInviteRestrict);
            organizations.prefsPermissionLevel(this.prefsPermissionLevel);
            organizations.website(this.website);
            return organizations;
        }

        /**
         * Execute create request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Organizations organizations = buildBodyParams();
            createWithHttpInfo(organizations);
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Organizations organizations = buildBodyParams();
            return createWithHttpInfo(organizations);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Organizations organizations = buildBodyParams();
            return createAsync(organizations, _callback);
        }
    }

    /**
     * addOrganizations()
     * 
     * @param organizations Attributes of \&quot;Organizations\&quot; to be added. (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create() throws IllegalArgumentException {
        return new CreateRequestBuilder();
    }
    private okhttp3.Call deletePrefsAssociatedDomainByIdOrgCall(String idOrg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/prefs/associatedDomain"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePrefsAssociatedDomainByIdOrgValidateBeforeCall(String idOrg, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling deletePrefsAssociatedDomainByIdOrg(Async)");
        }

        return deletePrefsAssociatedDomainByIdOrgCall(idOrg, _callback);

    }


    private ApiResponse<Void> deletePrefsAssociatedDomainByIdOrgWithHttpInfo(String idOrg) throws ApiException {
        okhttp3.Call localVarCall = deletePrefsAssociatedDomainByIdOrgValidateBeforeCall(idOrg, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePrefsAssociatedDomainByIdOrgAsync(String idOrg, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePrefsAssociatedDomainByIdOrgValidateBeforeCall(idOrg, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePrefsAssociatedDomainByIdOrgRequestBuilder {
        private final String idOrg;

        private DeletePrefsAssociatedDomainByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Build call for deletePrefsAssociatedDomainByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePrefsAssociatedDomainByIdOrgCall(idOrg, _callback);
        }


        /**
         * Execute deletePrefsAssociatedDomainByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePrefsAssociatedDomainByIdOrgWithHttpInfo(idOrg);
        }

        /**
         * Execute deletePrefsAssociatedDomainByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePrefsAssociatedDomainByIdOrgWithHttpInfo(idOrg);
        }

        /**
         * Execute deletePrefsAssociatedDomainByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePrefsAssociatedDomainByIdOrgAsync(idOrg, _callback);
        }
    }

    /**
     * deleteOrganizationsPrefsAssociatedDomainByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @return DeletePrefsAssociatedDomainByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public DeletePrefsAssociatedDomainByIdOrgRequestBuilder deletePrefsAssociatedDomainByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new DeletePrefsAssociatedDomainByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call getActionsByIdOrgCall(String idOrg, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/actions"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (idModels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idModels", idModels));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (memberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator", memberCreator));
        }

        if (memberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator_fields", memberCreatorFields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActionsByIdOrgValidateBeforeCall(String idOrg, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling getActionsByIdOrg(Async)");
        }

        return getActionsByIdOrgCall(idOrg, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);

    }


    private ApiResponse<Void> getActionsByIdOrgWithHttpInfo(String idOrg, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields) throws ApiException {
        okhttp3.Call localVarCall = getActionsByIdOrgValidateBeforeCall(idOrg, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getActionsByIdOrgAsync(String idOrg, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActionsByIdOrgValidateBeforeCall(idOrg, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetActionsByIdOrgRequestBuilder {
        private final String idOrg;
        private String entities;
        private String display;
        private String filter;
        private String fields;
        private String limit;
        private String format;
        private String since;
        private String before;
        private String page;
        private String idModels;
        private String member;
        private String memberFields;
        private String memberCreator;
        private String memberCreatorFields;

        private GetActionsByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set entities
         * @param entities  true or false (optional)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder entities(String entities) {
            this.entities = entities;
            return this;
        }
        
        /**
         * Set display
         * @param display  true or false (optional)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder display(String display) {
            this.display = display;
            return this;
        }
        
        /**
         * Set filter
         * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to all)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set limit
         * @param limit a number from 0 to 1000 (optional, default to 50)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set format
         * @param format One of: count, list or minimal (optional, default to list)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set since
         * @param since A date, null or lastView (optional)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set before
         * @param before A date, or null (optional)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set page
         * @param page Page * limit must be less than 1000 (optional, default to 0)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set idModels
         * @param idModels Only return actions related to these model ids (optional)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder idModels(String idModels) {
            this.idModels = idModels;
            return this;
        }
        
        /**
         * Set member
         * @param member  true or false (optional)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder member(String member) {
            this.member = member;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set memberCreator
         * @param memberCreator  true or false (optional)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder memberCreator(String memberCreator) {
            this.memberCreator = memberCreator;
            return this;
        }
        
        /**
         * Set memberCreatorFields
         * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetActionsByIdOrgRequestBuilder
         */
        public GetActionsByIdOrgRequestBuilder memberCreatorFields(String memberCreatorFields) {
            this.memberCreatorFields = memberCreatorFields;
            return this;
        }
        
        /**
         * Build call for getActionsByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getActionsByIdOrgCall(idOrg, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        }


        /**
         * Execute getActionsByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getActionsByIdOrgWithHttpInfo(idOrg, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
        }

        /**
         * Execute getActionsByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getActionsByIdOrgWithHttpInfo(idOrg, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
        }

        /**
         * Execute getActionsByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getActionsByIdOrgAsync(idOrg, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        }
    }

    /**
     * getOrganizationsActionsByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @return GetActionsByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetActionsByIdOrgRequestBuilder getActionsByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new GetActionsByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call getBoardsByIdOrgByFilterCall(String idOrg, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/boards/{filter}"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsByIdOrgByFilterValidateBeforeCall(String idOrg, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling getBoardsByIdOrgByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getBoardsByIdOrgByFilter(Async)");
        }

        return getBoardsByIdOrgByFilterCall(idOrg, filter, _callback);

    }


    private ApiResponse<Void> getBoardsByIdOrgByFilterWithHttpInfo(String idOrg, String filter) throws ApiException {
        okhttp3.Call localVarCall = getBoardsByIdOrgByFilterValidateBeforeCall(idOrg, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardsByIdOrgByFilterAsync(String idOrg, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsByIdOrgByFilterValidateBeforeCall(idOrg, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardsByIdOrgByFilterRequestBuilder {
        private final String idOrg;
        private final String filter;

        private GetBoardsByIdOrgByFilterRequestBuilder(String idOrg, String filter) {
            this.idOrg = idOrg;
            this.filter = filter;
        }

        /**
         * Build call for getBoardsByIdOrgByFilter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardsByIdOrgByFilterCall(idOrg, filter, _callback);
        }


        /**
         * Execute getBoardsByIdOrgByFilter request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardsByIdOrgByFilterWithHttpInfo(idOrg, filter);
        }

        /**
         * Execute getBoardsByIdOrgByFilter request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardsByIdOrgByFilterWithHttpInfo(idOrg, filter);
        }

        /**
         * Execute getBoardsByIdOrgByFilter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardsByIdOrgByFilterAsync(idOrg, filter, _callback);
        }
    }

    /**
     * getOrganizationsBoardsByIdOrgByFilter()
     * 
     * @param idOrg idOrg or name (required)
     * @param filter filter (required)
     * @return GetBoardsByIdOrgByFilterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardsByIdOrgByFilterRequestBuilder getBoardsByIdOrgByFilter(String idOrg, String filter) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new GetBoardsByIdOrgByFilterRequestBuilder(idOrg, filter);
    }
    private okhttp3.Call getBoardsByOrgIdCall(String idOrg, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/boards"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (actionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_entities", actionsEntities));
        }

        if (actionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_limit", actionsLimit));
        }

        if (actionsFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_format", actionsFormat));
        }

        if (actionsSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_since", actionsSince));
        }

        if (actionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_fields", actionFields));
        }

        if (memberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships", memberships));
        }

        if (organization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
        }

        if (organizationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_fields", organizationFields));
        }

        if (lists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lists", lists));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsByOrgIdValidateBeforeCall(String idOrg, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling getBoardsByOrgId(Async)");
        }

        return getBoardsByOrgIdCall(idOrg, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, _callback);

    }


    private ApiResponse<Void> getBoardsByOrgIdWithHttpInfo(String idOrg, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists) throws ApiException {
        okhttp3.Call localVarCall = getBoardsByOrgIdValidateBeforeCall(idOrg, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardsByOrgIdAsync(String idOrg, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsByOrgIdValidateBeforeCall(idOrg, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardsByOrgIdRequestBuilder {
        private final String idOrg;
        private String filter;
        private String fields;
        private String actions;
        private String actionsEntities;
        private String actionsLimit;
        private String actionsFormat;
        private String actionsSince;
        private String actionFields;
        private String memberships;
        private String organization;
        private String organizationFields;
        private String lists;

        private GetBoardsByOrgIdRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set filter
         * @param filter all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional, default to all)
         * @return GetBoardsByOrgIdRequestBuilder
         */
        public GetBoardsByOrgIdRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
         * @return GetBoardsByOrgIdRequestBuilder
         */
        public GetBoardsByOrgIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetBoardsByOrgIdRequestBuilder
         */
        public GetBoardsByOrgIdRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set actionsEntities
         * @param actionsEntities  true or false (optional)
         * @return GetBoardsByOrgIdRequestBuilder
         */
        public GetBoardsByOrgIdRequestBuilder actionsEntities(String actionsEntities) {
            this.actionsEntities = actionsEntities;
            return this;
        }
        
        /**
         * Set actionsLimit
         * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
         * @return GetBoardsByOrgIdRequestBuilder
         */
        public GetBoardsByOrgIdRequestBuilder actionsLimit(String actionsLimit) {
            this.actionsLimit = actionsLimit;
            return this;
        }
        
        /**
         * Set actionsFormat
         * @param actionsFormat One of: count, list or minimal (optional, default to list)
         * @return GetBoardsByOrgIdRequestBuilder
         */
        public GetBoardsByOrgIdRequestBuilder actionsFormat(String actionsFormat) {
            this.actionsFormat = actionsFormat;
            return this;
        }
        
        /**
         * Set actionsSince
         * @param actionsSince A date, null or lastView (optional)
         * @return GetBoardsByOrgIdRequestBuilder
         */
        public GetBoardsByOrgIdRequestBuilder actionsSince(String actionsSince) {
            this.actionsSince = actionsSince;
            return this;
        }
        
        /**
         * Set actionFields
         * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return GetBoardsByOrgIdRequestBuilder
         */
        public GetBoardsByOrgIdRequestBuilder actionFields(String actionFields) {
            this.actionFields = actionFields;
            return this;
        }
        
        /**
         * Set memberships
         * @param memberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
         * @return GetBoardsByOrgIdRequestBuilder
         */
        public GetBoardsByOrgIdRequestBuilder memberships(String memberships) {
            this.memberships = memberships;
            return this;
        }
        
        /**
         * Set organization
         * @param organization  true or false (optional)
         * @return GetBoardsByOrgIdRequestBuilder
         */
        public GetBoardsByOrgIdRequestBuilder organization(String organization) {
            this.organization = organization;
            return this;
        }
        
        /**
         * Set organizationFields
         * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
         * @return GetBoardsByOrgIdRequestBuilder
         */
        public GetBoardsByOrgIdRequestBuilder organizationFields(String organizationFields) {
            this.organizationFields = organizationFields;
            return this;
        }
        
        /**
         * Set lists
         * @param lists One of: all, closed, none or open (optional, default to none)
         * @return GetBoardsByOrgIdRequestBuilder
         */
        public GetBoardsByOrgIdRequestBuilder lists(String lists) {
            this.lists = lists;
            return this;
        }
        
        /**
         * Build call for getBoardsByOrgId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardsByOrgIdCall(idOrg, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, _callback);
        }


        /**
         * Execute getBoardsByOrgId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardsByOrgIdWithHttpInfo(idOrg, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists);
        }

        /**
         * Execute getBoardsByOrgId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardsByOrgIdWithHttpInfo(idOrg, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists);
        }

        /**
         * Execute getBoardsByOrgId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardsByOrgIdAsync(idOrg, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, _callback);
        }
    }

    /**
     * getOrganizationsBoardsByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @return GetBoardsByOrgIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardsByOrgIdRequestBuilder getBoardsByOrgId(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new GetBoardsByOrgIdRequestBuilder(idOrg);
    }
    private okhttp3.Call getByIdAndFieldCall(String idOrg, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/{field}"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdAndFieldValidateBeforeCall(String idOrg, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling getByIdAndField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getByIdAndField(Async)");
        }

        return getByIdAndFieldCall(idOrg, field, _callback);

    }


    private ApiResponse<Void> getByIdAndFieldWithHttpInfo(String idOrg, String field) throws ApiException {
        okhttp3.Call localVarCall = getByIdAndFieldValidateBeforeCall(idOrg, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdAndFieldAsync(String idOrg, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdAndFieldValidateBeforeCall(idOrg, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdAndFieldRequestBuilder {
        private final String idOrg;
        private final String field;

        private GetByIdAndFieldRequestBuilder(String idOrg, String field) {
            this.idOrg = idOrg;
            this.field = field;
        }

        /**
         * Build call for getByIdAndField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdAndFieldCall(idOrg, field, _callback);
        }


        /**
         * Execute getByIdAndField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdAndFieldWithHttpInfo(idOrg, field);
        }

        /**
         * Execute getByIdAndField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdAndFieldWithHttpInfo(idOrg, field);
        }

        /**
         * Execute getByIdAndField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdAndFieldAsync(idOrg, field, _callback);
        }
    }

    /**
     * getOrganizationsByIdOrgByField()
     * 
     * @param idOrg idOrg or name (required)
     * @param field field (required)
     * @return GetByIdAndFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdAndFieldRequestBuilder getByIdAndField(String idOrg, String field) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetByIdAndFieldRequestBuilder(idOrg, field);
    }
    private okhttp3.Call getByIdOrgCall(String idOrg, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String memberActivity, String membersInvited, String membersInvitedFields, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String paidAccount, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (actionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_entities", actionsEntities));
        }

        if (actionsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_display", actionsDisplay));
        }

        if (actionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_limit", actionsLimit));
        }

        if (actionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_fields", actionFields));
        }

        if (memberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships", memberships));
        }

        if (membershipsMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships_member", membershipsMember));
        }

        if (membershipsMemberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships_member_fields", membershipsMemberFields));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (memberActivity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_activity", memberActivity));
        }

        if (membersInvited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("membersInvited", membersInvited));
        }

        if (membersInvitedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("membersInvited_fields", membersInvitedFields));
        }

        if (boards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boards", boards));
        }

        if (boardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_fields", boardFields));
        }

        if (boardActions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions", boardActions));
        }

        if (boardActionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_entities", boardActionsEntities));
        }

        if (boardActionsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_display", boardActionsDisplay));
        }

        if (boardActionsFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_format", boardActionsFormat));
        }

        if (boardActionsSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_since", boardActionsSince));
        }

        if (boardActionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_limit", boardActionsLimit));
        }

        if (boardActionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_action_fields", boardActionFields));
        }

        if (boardLists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_lists", boardLists));
        }

        if (paidAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paid_account", paidAccount));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdOrgValidateBeforeCall(String idOrg, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String memberActivity, String membersInvited, String membersInvitedFields, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String paidAccount, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling getByIdOrg(Async)");
        }

        return getByIdOrgCall(idOrg, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, memberActivity, membersInvited, membersInvitedFields, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, paidAccount, fields, _callback);

    }


    private ApiResponse<Void> getByIdOrgWithHttpInfo(String idOrg, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String memberActivity, String membersInvited, String membersInvitedFields, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String paidAccount, String fields) throws ApiException {
        okhttp3.Call localVarCall = getByIdOrgValidateBeforeCall(idOrg, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, memberActivity, membersInvited, membersInvitedFields, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, paidAccount, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdOrgAsync(String idOrg, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String memberships, String membershipsMember, String membershipsMemberFields, String members, String memberFields, String memberActivity, String membersInvited, String membersInvitedFields, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String paidAccount, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdOrgValidateBeforeCall(idOrg, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, memberActivity, membersInvited, membersInvitedFields, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, paidAccount, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdOrgRequestBuilder {
        private final String idOrg;
        private String actions;
        private String actionsEntities;
        private String actionsDisplay;
        private String actionsLimit;
        private String actionFields;
        private String memberships;
        private String membershipsMember;
        private String membershipsMemberFields;
        private String members;
        private String memberFields;
        private String memberActivity;
        private String membersInvited;
        private String membersInvitedFields;
        private String boards;
        private String boardFields;
        private String boardActions;
        private String boardActionsEntities;
        private String boardActionsDisplay;
        private String boardActionsFormat;
        private String boardActionsSince;
        private String boardActionsLimit;
        private String boardActionFields;
        private String boardLists;
        private String paidAccount;
        private String fields;

        private GetByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set actionsEntities
         * @param actionsEntities  true or false (optional)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder actionsEntities(String actionsEntities) {
            this.actionsEntities = actionsEntities;
            return this;
        }
        
        /**
         * Set actionsDisplay
         * @param actionsDisplay  true or false (optional)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder actionsDisplay(String actionsDisplay) {
            this.actionsDisplay = actionsDisplay;
            return this;
        }
        
        /**
         * Set actionsLimit
         * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder actionsLimit(String actionsLimit) {
            this.actionsLimit = actionsLimit;
            return this;
        }
        
        /**
         * Set actionFields
         * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder actionFields(String actionFields) {
            this.actionFields = actionFields;
            return this;
        }
        
        /**
         * Set memberships
         * @param memberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder memberships(String memberships) {
            this.memberships = memberships;
            return this;
        }
        
        /**
         * Set membershipsMember
         * @param membershipsMember  true or false (optional)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder membershipsMember(String membershipsMember) {
            this.membershipsMember = membershipsMember;
            return this;
        }
        
        /**
         * Set membershipsMemberFields
         * @param membershipsMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder membershipsMemberFields(String membershipsMemberFields) {
            this.membershipsMemberFields = membershipsMemberFields;
            return this;
        }
        
        /**
         * Set members
         * @param members One of: admins, all, none, normal or owners (optional, default to none)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder members(String members) {
            this.members = members;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials, username and confirmed)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set memberActivity
         * @param memberActivity true or false ; works for premium organizations only. (optional)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder memberActivity(String memberActivity) {
            this.memberActivity = memberActivity;
            return this;
        }
        
        /**
         * Set membersInvited
         * @param membersInvited One of: admins, all, none, normal or owners (optional, default to none)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder membersInvited(String membersInvited) {
            this.membersInvited = membersInvited;
            return this;
        }
        
        /**
         * Set membersInvitedFields
         * @param membersInvitedFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, initials, fullName and username)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder membersInvitedFields(String membersInvitedFields) {
            this.membersInvitedFields = membersInvitedFields;
            return this;
        }
        
        /**
         * Set boards
         * @param boards all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional, default to none)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder boards(String boards) {
            this.boards = boards;
            return this;
        }
        
        /**
         * Set boardFields
         * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder boardFields(String boardFields) {
            this.boardFields = boardFields;
            return this;
        }
        
        /**
         * Set boardActions
         * @param boardActions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder boardActions(String boardActions) {
            this.boardActions = boardActions;
            return this;
        }
        
        /**
         * Set boardActionsEntities
         * @param boardActionsEntities  true or false (optional)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder boardActionsEntities(String boardActionsEntities) {
            this.boardActionsEntities = boardActionsEntities;
            return this;
        }
        
        /**
         * Set boardActionsDisplay
         * @param boardActionsDisplay  true or false (optional)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder boardActionsDisplay(String boardActionsDisplay) {
            this.boardActionsDisplay = boardActionsDisplay;
            return this;
        }
        
        /**
         * Set boardActionsFormat
         * @param boardActionsFormat One of: count, list or minimal (optional, default to list)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder boardActionsFormat(String boardActionsFormat) {
            this.boardActionsFormat = boardActionsFormat;
            return this;
        }
        
        /**
         * Set boardActionsSince
         * @param boardActionsSince A date, null or lastView (optional)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder boardActionsSince(String boardActionsSince) {
            this.boardActionsSince = boardActionsSince;
            return this;
        }
        
        /**
         * Set boardActionsLimit
         * @param boardActionsLimit a number from 0 to 1000 (optional, default to 50)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder boardActionsLimit(String boardActionsLimit) {
            this.boardActionsLimit = boardActionsLimit;
            return this;
        }
        
        /**
         * Set boardActionFields
         * @param boardActionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder boardActionFields(String boardActionFields) {
            this.boardActionFields = boardActionFields;
            return this;
        }
        
        /**
         * Set boardLists
         * @param boardLists One of: all, closed, none or open (optional, default to none)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder boardLists(String boardLists) {
            this.boardLists = boardLists;
            return this;
        }
        
        /**
         * Set paidAccount
         * @param paidAccount  true or false (optional)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder paidAccount(String paidAccount) {
            this.paidAccount = paidAccount;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name, displayName, desc, descData, url, website, logoHash, products and powerUps)
         * @return GetByIdOrgRequestBuilder
         */
        public GetByIdOrgRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdOrgCall(idOrg, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, memberActivity, membersInvited, membersInvitedFields, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, paidAccount, fields, _callback);
        }


        /**
         * Execute getByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdOrgWithHttpInfo(idOrg, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, memberActivity, membersInvited, membersInvitedFields, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, paidAccount, fields);
        }

        /**
         * Execute getByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdOrgWithHttpInfo(idOrg, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, memberActivity, membersInvited, membersInvitedFields, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, paidAccount, fields);
        }

        /**
         * Execute getByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdOrgAsync(idOrg, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, memberships, membershipsMember, membershipsMemberFields, members, memberFields, memberActivity, membersInvited, membersInvitedFields, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, paidAccount, fields, _callback);
        }
    }

    /**
     * getOrganizationsByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @return GetByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdOrgRequestBuilder getByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new GetByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call getMembersByIdOrgCall(String idOrg, String filter, String fields, String activity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/members"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (activity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity", activity));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersByIdOrgValidateBeforeCall(String idOrg, String filter, String fields, String activity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling getMembersByIdOrg(Async)");
        }

        return getMembersByIdOrgCall(idOrg, filter, fields, activity, _callback);

    }


    private ApiResponse<Void> getMembersByIdOrgWithHttpInfo(String idOrg, String filter, String fields, String activity) throws ApiException {
        okhttp3.Call localVarCall = getMembersByIdOrgValidateBeforeCall(idOrg, filter, fields, activity, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMembersByIdOrgAsync(String idOrg, String filter, String fields, String activity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersByIdOrgValidateBeforeCall(idOrg, filter, fields, activity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMembersByIdOrgRequestBuilder {
        private final String idOrg;
        private String filter;
        private String fields;
        private String activity;

        private GetMembersByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set filter
         * @param filter One of: admins, all, none, normal or owners (optional, default to all)
         * @return GetMembersByIdOrgRequestBuilder
         */
        public GetMembersByIdOrgRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
         * @return GetMembersByIdOrgRequestBuilder
         */
        public GetMembersByIdOrgRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set activity
         * @param activity true or false ; works for premium organizations only. (optional)
         * @return GetMembersByIdOrgRequestBuilder
         */
        public GetMembersByIdOrgRequestBuilder activity(String activity) {
            this.activity = activity;
            return this;
        }
        
        /**
         * Build call for getMembersByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersByIdOrgCall(idOrg, filter, fields, activity, _callback);
        }


        /**
         * Execute getMembersByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMembersByIdOrgWithHttpInfo(idOrg, filter, fields, activity);
        }

        /**
         * Execute getMembersByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMembersByIdOrgWithHttpInfo(idOrg, filter, fields, activity);
        }

        /**
         * Execute getMembersByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMembersByIdOrgAsync(idOrg, filter, fields, activity, _callback);
        }
    }

    /**
     * getOrganizationsMembersByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @return GetMembersByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMembersByIdOrgRequestBuilder getMembersByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new GetMembersByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call getMembersInvitedByIdOrgCall(String idOrg, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/membersInvited"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersInvitedByIdOrgValidateBeforeCall(String idOrg, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling getMembersInvitedByIdOrg(Async)");
        }

        return getMembersInvitedByIdOrgCall(idOrg, fields, _callback);

    }


    private ApiResponse<Void> getMembersInvitedByIdOrgWithHttpInfo(String idOrg, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMembersInvitedByIdOrgValidateBeforeCall(idOrg, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMembersInvitedByIdOrgAsync(String idOrg, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersInvitedByIdOrgValidateBeforeCall(idOrg, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMembersInvitedByIdOrgRequestBuilder {
        private final String idOrg;
        private String fields;

        private GetMembersInvitedByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
         * @return GetMembersInvitedByIdOrgRequestBuilder
         */
        public GetMembersInvitedByIdOrgRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getMembersInvitedByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersInvitedByIdOrgCall(idOrg, fields, _callback);
        }


        /**
         * Execute getMembersInvitedByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMembersInvitedByIdOrgWithHttpInfo(idOrg, fields);
        }

        /**
         * Execute getMembersInvitedByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMembersInvitedByIdOrgWithHttpInfo(idOrg, fields);
        }

        /**
         * Execute getMembersInvitedByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMembersInvitedByIdOrgAsync(idOrg, fields, _callback);
        }
    }

    /**
     * getOrganizationsMembersInvitedByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @return GetMembersInvitedByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMembersInvitedByIdOrgRequestBuilder getMembersInvitedByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new GetMembersInvitedByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call getMembersInvitedByIdOrgByFieldCall(String idOrg, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/membersInvited/{field}"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersInvitedByIdOrgByFieldValidateBeforeCall(String idOrg, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling getMembersInvitedByIdOrgByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getMembersInvitedByIdOrgByField(Async)");
        }

        return getMembersInvitedByIdOrgByFieldCall(idOrg, field, _callback);

    }


    private ApiResponse<Void> getMembersInvitedByIdOrgByFieldWithHttpInfo(String idOrg, String field) throws ApiException {
        okhttp3.Call localVarCall = getMembersInvitedByIdOrgByFieldValidateBeforeCall(idOrg, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMembersInvitedByIdOrgByFieldAsync(String idOrg, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersInvitedByIdOrgByFieldValidateBeforeCall(idOrg, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMembersInvitedByIdOrgByFieldRequestBuilder {
        private final String idOrg;
        private final String field;

        private GetMembersInvitedByIdOrgByFieldRequestBuilder(String idOrg, String field) {
            this.idOrg = idOrg;
            this.field = field;
        }

        /**
         * Build call for getMembersInvitedByIdOrgByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembersInvitedByIdOrgByFieldCall(idOrg, field, _callback);
        }


        /**
         * Execute getMembersInvitedByIdOrgByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMembersInvitedByIdOrgByFieldWithHttpInfo(idOrg, field);
        }

        /**
         * Execute getMembersInvitedByIdOrgByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMembersInvitedByIdOrgByFieldWithHttpInfo(idOrg, field);
        }

        /**
         * Execute getMembersInvitedByIdOrgByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMembersInvitedByIdOrgByFieldAsync(idOrg, field, _callback);
        }
    }

    /**
     * getOrganizationsMembersInvitedByIdOrgByField()
     * 
     * @param idOrg idOrg or name (required)
     * @param field field (required)
     * @return GetMembersInvitedByIdOrgByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMembersInvitedByIdOrgByFieldRequestBuilder getMembersInvitedByIdOrgByField(String idOrg, String field) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetMembersInvitedByIdOrgByFieldRequestBuilder(idOrg, field);
    }
    private okhttp3.Call getMembershipsByIdOrgByIdMembershipCall(String idOrg, String idMembership, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/memberships/{idMembership}"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()))
            .replace("{" + "idMembership" + "}", localVarApiClient.escapeString(idMembership.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembershipsByIdOrgByIdMembershipValidateBeforeCall(String idOrg, String idMembership, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling getMembershipsByIdOrgByIdMembership(Async)");
        }

        // verify the required parameter 'idMembership' is set
        if (idMembership == null) {
            throw new ApiException("Missing the required parameter 'idMembership' when calling getMembershipsByIdOrgByIdMembership(Async)");
        }

        return getMembershipsByIdOrgByIdMembershipCall(idOrg, idMembership, member, memberFields, _callback);

    }


    private ApiResponse<Void> getMembershipsByIdOrgByIdMembershipWithHttpInfo(String idOrg, String idMembership, String member, String memberFields) throws ApiException {
        okhttp3.Call localVarCall = getMembershipsByIdOrgByIdMembershipValidateBeforeCall(idOrg, idMembership, member, memberFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMembershipsByIdOrgByIdMembershipAsync(String idOrg, String idMembership, String member, String memberFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembershipsByIdOrgByIdMembershipValidateBeforeCall(idOrg, idMembership, member, memberFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMembershipsByIdOrgByIdMembershipRequestBuilder {
        private final String idOrg;
        private final String idMembership;
        private String member;
        private String memberFields;

        private GetMembershipsByIdOrgByIdMembershipRequestBuilder(String idOrg, String idMembership) {
            this.idOrg = idOrg;
            this.idMembership = idMembership;
        }

        /**
         * Set member
         * @param member  true or false (optional)
         * @return GetMembershipsByIdOrgByIdMembershipRequestBuilder
         */
        public GetMembershipsByIdOrgByIdMembershipRequestBuilder member(String member) {
            this.member = member;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
         * @return GetMembershipsByIdOrgByIdMembershipRequestBuilder
         */
        public GetMembershipsByIdOrgByIdMembershipRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Build call for getMembershipsByIdOrgByIdMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembershipsByIdOrgByIdMembershipCall(idOrg, idMembership, member, memberFields, _callback);
        }


        /**
         * Execute getMembershipsByIdOrgByIdMembership request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMembershipsByIdOrgByIdMembershipWithHttpInfo(idOrg, idMembership, member, memberFields);
        }

        /**
         * Execute getMembershipsByIdOrgByIdMembership request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMembershipsByIdOrgByIdMembershipWithHttpInfo(idOrg, idMembership, member, memberFields);
        }

        /**
         * Execute getMembershipsByIdOrgByIdMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMembershipsByIdOrgByIdMembershipAsync(idOrg, idMembership, member, memberFields, _callback);
        }
    }

    /**
     * getOrganizationsMembershipsByIdOrgByIdMembership()
     * 
     * @param idOrg idOrg or name (required)
     * @param idMembership idMembership (required)
     * @return GetMembershipsByIdOrgByIdMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetMembershipsByIdOrgByIdMembershipRequestBuilder getMembershipsByIdOrgByIdMembership(String idOrg, String idMembership) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (idMembership == null) throw new IllegalArgumentException("\"idMembership\" is required but got null");
            

        return new GetMembershipsByIdOrgByIdMembershipRequestBuilder(idOrg, idMembership);
    }
    private okhttp3.Call getOrganizationDeltasCall(String idOrg, String tags, String ixLastUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/deltas"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (ixLastUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ixLastUpdate", ixLastUpdate));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationDeltasValidateBeforeCall(String idOrg, String tags, String ixLastUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling getOrganizationDeltas(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling getOrganizationDeltas(Async)");
        }

        // verify the required parameter 'ixLastUpdate' is set
        if (ixLastUpdate == null) {
            throw new ApiException("Missing the required parameter 'ixLastUpdate' when calling getOrganizationDeltas(Async)");
        }

        return getOrganizationDeltasCall(idOrg, tags, ixLastUpdate, _callback);

    }


    private ApiResponse<Void> getOrganizationDeltasWithHttpInfo(String idOrg, String tags, String ixLastUpdate) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationDeltasValidateBeforeCall(idOrg, tags, ixLastUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getOrganizationDeltasAsync(String idOrg, String tags, String ixLastUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationDeltasValidateBeforeCall(idOrg, tags, ixLastUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetOrganizationDeltasRequestBuilder {
        private final String idOrg;
        private final String tags;
        private final String ixLastUpdate;

        private GetOrganizationDeltasRequestBuilder(String idOrg, String tags, String ixLastUpdate) {
            this.idOrg = idOrg;
            this.tags = tags;
            this.ixLastUpdate = ixLastUpdate;
        }

        /**
         * Build call for getOrganizationDeltas
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationDeltasCall(idOrg, tags, ixLastUpdate, _callback);
        }


        /**
         * Execute getOrganizationDeltas request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getOrganizationDeltasWithHttpInfo(idOrg, tags, ixLastUpdate);
        }

        /**
         * Execute getOrganizationDeltas request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getOrganizationDeltasWithHttpInfo(idOrg, tags, ixLastUpdate);
        }

        /**
         * Execute getOrganizationDeltas request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getOrganizationDeltasAsync(idOrg, tags, ixLastUpdate, _callback);
        }
    }

    /**
     * getOrganizationsDeltasByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param tags A valid tag for subscribing (required)
     * @param ixLastUpdate a number from -1 to Infinity (required)
     * @return GetOrganizationDeltasRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationDeltasRequestBuilder getOrganizationDeltas(String idOrg, String tags, String ixLastUpdate) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (tags == null) throw new IllegalArgumentException("\"tags\" is required but got null");
            

        if (ixLastUpdate == null) throw new IllegalArgumentException("\"ixLastUpdate\" is required but got null");
            

        return new GetOrganizationDeltasRequestBuilder(idOrg, tags, ixLastUpdate);
    }
    private okhttp3.Call listMembersByIdOrgByFilterCall(String idOrg, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/members/{filter}"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMembersByIdOrgByFilterValidateBeforeCall(String idOrg, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling listMembersByIdOrgByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling listMembersByIdOrgByFilter(Async)");
        }

        return listMembersByIdOrgByFilterCall(idOrg, filter, _callback);

    }


    private ApiResponse<Void> listMembersByIdOrgByFilterWithHttpInfo(String idOrg, String filter) throws ApiException {
        okhttp3.Call localVarCall = listMembersByIdOrgByFilterValidateBeforeCall(idOrg, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listMembersByIdOrgByFilterAsync(String idOrg, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMembersByIdOrgByFilterValidateBeforeCall(idOrg, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListMembersByIdOrgByFilterRequestBuilder {
        private final String idOrg;
        private final String filter;

        private ListMembersByIdOrgByFilterRequestBuilder(String idOrg, String filter) {
            this.idOrg = idOrg;
            this.filter = filter;
        }

        /**
         * Build call for listMembersByIdOrgByFilter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMembersByIdOrgByFilterCall(idOrg, filter, _callback);
        }


        /**
         * Execute listMembersByIdOrgByFilter request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listMembersByIdOrgByFilterWithHttpInfo(idOrg, filter);
        }

        /**
         * Execute listMembersByIdOrgByFilter request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listMembersByIdOrgByFilterWithHttpInfo(idOrg, filter);
        }

        /**
         * Execute listMembersByIdOrgByFilter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listMembersByIdOrgByFilterAsync(idOrg, filter, _callback);
        }
    }

    /**
     * getOrganizationsMembersByIdOrgByFilter()
     * 
     * @param idOrg idOrg or name (required)
     * @param filter filter (required)
     * @return ListMembersByIdOrgByFilterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListMembersByIdOrgByFilterRequestBuilder listMembersByIdOrgByFilter(String idOrg, String filter) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new ListMembersByIdOrgByFilterRequestBuilder(idOrg, filter);
    }
    private okhttp3.Call listMembersCardsByIdOrgByIdMemberCall(String idOrg, String idMember, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String list, String listFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/members/{idMember}/cards"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (board != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board", board));
        }

        if (boardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_fields", boardFields));
        }

        if (list != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list", list));
        }

        if (listFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_fields", listFields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMembersCardsByIdOrgByIdMemberValidateBeforeCall(String idOrg, String idMember, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String list, String listFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling listMembersCardsByIdOrgByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling listMembersCardsByIdOrgByIdMember(Async)");
        }

        return listMembersCardsByIdOrgByIdMemberCall(idOrg, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields, _callback);

    }


    private ApiResponse<Void> listMembersCardsByIdOrgByIdMemberWithHttpInfo(String idOrg, String idMember, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String list, String listFields, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = listMembersCardsByIdOrgByIdMemberValidateBeforeCall(idOrg, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listMembersCardsByIdOrgByIdMemberAsync(String idOrg, String idMember, String actions, String attachments, String attachmentFields, String members, String memberFields, String checkItemStates, String checklists, String board, String boardFields, String list, String listFields, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMembersCardsByIdOrgByIdMemberValidateBeforeCall(idOrg, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListMembersCardsByIdOrgByIdMemberRequestBuilder {
        private final String idOrg;
        private final String idMember;
        private String actions;
        private String attachments;
        private String attachmentFields;
        private String members;
        private String memberFields;
        private String checkItemStates;
        private String checklists;
        private String board;
        private String boardFields;
        private String list;
        private String listFields;
        private String filter;
        private String fields;

        private ListMembersCardsByIdOrgByIdMemberRequestBuilder(String idOrg, String idMember) {
            this.idOrg = idOrg;
            this.idMember = idMember;
        }

        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder attachments(String attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set attachmentFields
         * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder attachmentFields(String attachmentFields) {
            this.attachmentFields = attachmentFields;
            return this;
        }
        
        /**
         * Set members
         * @param members  true or false (optional)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder members(String members) {
            this.members = members;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set checkItemStates
         * @param checkItemStates  true or false (optional)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder checkItemStates(String checkItemStates) {
            this.checkItemStates = checkItemStates;
            return this;
        }
        
        /**
         * Set checklists
         * @param checklists One of: all or none (optional, default to none)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder checklists(String checklists) {
            this.checklists = checklists;
            return this;
        }
        
        /**
         * Set board
         * @param board  true or false (optional)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder board(String board) {
            this.board = board;
            return this;
        }
        
        /**
         * Set boardFields
         * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, closed, idOrganization, pinned, url and prefs)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder boardFields(String boardFields) {
            this.boardFields = boardFields;
            return this;
        }
        
        /**
         * Set list
         * @param list  true or false (optional)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder list(String list) {
            this.list = list;
            return this;
        }
        
        /**
         * Set listFields
         * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder listFields(String listFields) {
            this.listFields = listFields;
            return this;
        }
        
        /**
         * Set filter
         * @param filter One of: all, closed, none, open or visible (optional, default to visible)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
         */
        public ListMembersCardsByIdOrgByIdMemberRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for listMembersCardsByIdOrgByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMembersCardsByIdOrgByIdMemberCall(idOrg, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields, _callback);
        }


        /**
         * Execute listMembersCardsByIdOrgByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listMembersCardsByIdOrgByIdMemberWithHttpInfo(idOrg, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields);
        }

        /**
         * Execute listMembersCardsByIdOrgByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listMembersCardsByIdOrgByIdMemberWithHttpInfo(idOrg, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields);
        }

        /**
         * Execute listMembersCardsByIdOrgByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listMembersCardsByIdOrgByIdMemberAsync(idOrg, idMember, actions, attachments, attachmentFields, members, memberFields, checkItemStates, checklists, board, boardFields, list, listFields, filter, fields, _callback);
        }
    }

    /**
     * getOrganizationsMembersCardsByIdOrgByIdMember()
     * 
     * @param idOrg idOrg or name (required)
     * @param idMember idMember (required)
     * @return ListMembersCardsByIdOrgByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListMembersCardsByIdOrgByIdMemberRequestBuilder listMembersCardsByIdOrgByIdMember(String idOrg, String idMember) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new ListMembersCardsByIdOrgByIdMemberRequestBuilder(idOrg, idMember);
    }
    private okhttp3.Call listMembershipsByIdOrgCall(String idOrg, String filter, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/memberships"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMembershipsByIdOrgValidateBeforeCall(String idOrg, String filter, String member, String memberFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling listMembershipsByIdOrg(Async)");
        }

        return listMembershipsByIdOrgCall(idOrg, filter, member, memberFields, _callback);

    }


    private ApiResponse<Void> listMembershipsByIdOrgWithHttpInfo(String idOrg, String filter, String member, String memberFields) throws ApiException {
        okhttp3.Call localVarCall = listMembershipsByIdOrgValidateBeforeCall(idOrg, filter, member, memberFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listMembershipsByIdOrgAsync(String idOrg, String filter, String member, String memberFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMembershipsByIdOrgValidateBeforeCall(idOrg, filter, member, memberFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListMembershipsByIdOrgRequestBuilder {
        private final String idOrg;
        private String filter;
        private String member;
        private String memberFields;

        private ListMembershipsByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set filter
         * @param filter all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to all)
         * @return ListMembershipsByIdOrgRequestBuilder
         */
        public ListMembershipsByIdOrgRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set member
         * @param member  true or false (optional)
         * @return ListMembershipsByIdOrgRequestBuilder
         */
        public ListMembershipsByIdOrgRequestBuilder member(String member) {
            this.member = member;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to fullName and username)
         * @return ListMembershipsByIdOrgRequestBuilder
         */
        public ListMembershipsByIdOrgRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Build call for listMembershipsByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMembershipsByIdOrgCall(idOrg, filter, member, memberFields, _callback);
        }


        /**
         * Execute listMembershipsByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listMembershipsByIdOrgWithHttpInfo(idOrg, filter, member, memberFields);
        }

        /**
         * Execute listMembershipsByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listMembershipsByIdOrgWithHttpInfo(idOrg, filter, member, memberFields);
        }

        /**
         * Execute listMembershipsByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listMembershipsByIdOrgAsync(idOrg, filter, member, memberFields, _callback);
        }
    }

    /**
     * getOrganizationsMembershipsByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @return ListMembershipsByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListMembershipsByIdOrgRequestBuilder listMembershipsByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new ListMembershipsByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call removeByIdOrgCall(String idOrg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdOrgValidateBeforeCall(String idOrg, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling removeByIdOrg(Async)");
        }

        return removeByIdOrgCall(idOrg, _callback);

    }


    private ApiResponse<Void> removeByIdOrgWithHttpInfo(String idOrg) throws ApiException {
        okhttp3.Call localVarCall = removeByIdOrgValidateBeforeCall(idOrg, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdOrgAsync(String idOrg, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdOrgValidateBeforeCall(idOrg, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdOrgRequestBuilder {
        private final String idOrg;

        private RemoveByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Build call for removeByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdOrgCall(idOrg, _callback);
        }


        /**
         * Execute removeByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdOrgWithHttpInfo(idOrg);
        }

        /**
         * Execute removeByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdOrgWithHttpInfo(idOrg);
        }

        /**
         * Execute removeByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdOrgAsync(idOrg, _callback);
        }
    }

    /**
     * deleteOrganizationsByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @return RemoveByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdOrgRequestBuilder removeByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new RemoveByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call removeInviteRestrictByIdOrgCall(String idOrg, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/prefs/orgInviteRestrict"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeInviteRestrictByIdOrgValidateBeforeCall(String idOrg, String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling removeInviteRestrictByIdOrg(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling removeInviteRestrictByIdOrg(Async)");
        }

        return removeInviteRestrictByIdOrgCall(idOrg, value, _callback);

    }


    private ApiResponse<Void> removeInviteRestrictByIdOrgWithHttpInfo(String idOrg, String value) throws ApiException {
        okhttp3.Call localVarCall = removeInviteRestrictByIdOrgValidateBeforeCall(idOrg, value, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeInviteRestrictByIdOrgAsync(String idOrg, String value, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeInviteRestrictByIdOrgValidateBeforeCall(idOrg, value, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveInviteRestrictByIdOrgRequestBuilder {
        private final String idOrg;
        private final String value;

        private RemoveInviteRestrictByIdOrgRequestBuilder(String idOrg, String value) {
            this.idOrg = idOrg;
            this.value = value;
        }

        /**
         * Build call for removeInviteRestrictByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeInviteRestrictByIdOrgCall(idOrg, value, _callback);
        }


        /**
         * Execute removeInviteRestrictByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeInviteRestrictByIdOrgWithHttpInfo(idOrg, value);
        }

        /**
         * Execute removeInviteRestrictByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeInviteRestrictByIdOrgWithHttpInfo(idOrg, value);
        }

        /**
         * Execute removeInviteRestrictByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeInviteRestrictByIdOrgAsync(idOrg, value, _callback);
        }
    }

    /**
     * deleteOrganizationsPrefsOrgInviteRestrictByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param value An email address with optional expansion tokens (required)
     * @return RemoveInviteRestrictByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveInviteRestrictByIdOrgRequestBuilder removeInviteRestrictByIdOrg(String idOrg, String value) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        return new RemoveInviteRestrictByIdOrgRequestBuilder(idOrg, value);
    }
    private okhttp3.Call removeLogoByIdOrgCall(String idOrg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/logo"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLogoByIdOrgValidateBeforeCall(String idOrg, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling removeLogoByIdOrg(Async)");
        }

        return removeLogoByIdOrgCall(idOrg, _callback);

    }


    private ApiResponse<Void> removeLogoByIdOrgWithHttpInfo(String idOrg) throws ApiException {
        okhttp3.Call localVarCall = removeLogoByIdOrgValidateBeforeCall(idOrg, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeLogoByIdOrgAsync(String idOrg, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLogoByIdOrgValidateBeforeCall(idOrg, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveLogoByIdOrgRequestBuilder {
        private final String idOrg;

        private RemoveLogoByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Build call for removeLogoByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeLogoByIdOrgCall(idOrg, _callback);
        }


        /**
         * Execute removeLogoByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeLogoByIdOrgWithHttpInfo(idOrg);
        }

        /**
         * Execute removeLogoByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeLogoByIdOrgWithHttpInfo(idOrg);
        }

        /**
         * Execute removeLogoByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeLogoByIdOrgAsync(idOrg, _callback);
        }
    }

    /**
     * deleteOrganizationsLogoByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @return RemoveLogoByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveLogoByIdOrgRequestBuilder removeLogoByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new RemoveLogoByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call removeMemberAllCall(String idOrg, String idMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/members/{idMember}/all"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMemberAllValidateBeforeCall(String idOrg, String idMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling removeMemberAll(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling removeMemberAll(Async)");
        }

        return removeMemberAllCall(idOrg, idMember, _callback);

    }


    private ApiResponse<Void> removeMemberAllWithHttpInfo(String idOrg, String idMember) throws ApiException {
        okhttp3.Call localVarCall = removeMemberAllValidateBeforeCall(idOrg, idMember, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMemberAllAsync(String idOrg, String idMember, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMemberAllValidateBeforeCall(idOrg, idMember, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMemberAllRequestBuilder {
        private final String idOrg;
        private final String idMember;

        private RemoveMemberAllRequestBuilder(String idOrg, String idMember) {
            this.idOrg = idOrg;
            this.idMember = idMember;
        }

        /**
         * Build call for removeMemberAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMemberAllCall(idOrg, idMember, _callback);
        }


        /**
         * Execute removeMemberAll request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeMemberAllWithHttpInfo(idOrg, idMember);
        }

        /**
         * Execute removeMemberAll request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeMemberAllWithHttpInfo(idOrg, idMember);
        }

        /**
         * Execute removeMemberAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeMemberAllAsync(idOrg, idMember, _callback);
        }
    }

    /**
     * deleteOrganizationsMembersAllByIdOrgByIdMember()
     * 
     * @param idOrg idOrg or name (required)
     * @param idMember idMember (required)
     * @return RemoveMemberAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMemberAllRequestBuilder removeMemberAll(String idOrg, String idMember) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new RemoveMemberAllRequestBuilder(idOrg, idMember);
    }
    private okhttp3.Call removeMemberByIdOrgByIdMemberCall(String idOrg, String idMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/members/{idMember}"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMemberByIdOrgByIdMemberValidateBeforeCall(String idOrg, String idMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling removeMemberByIdOrgByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling removeMemberByIdOrgByIdMember(Async)");
        }

        return removeMemberByIdOrgByIdMemberCall(idOrg, idMember, _callback);

    }


    private ApiResponse<Void> removeMemberByIdOrgByIdMemberWithHttpInfo(String idOrg, String idMember) throws ApiException {
        okhttp3.Call localVarCall = removeMemberByIdOrgByIdMemberValidateBeforeCall(idOrg, idMember, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMemberByIdOrgByIdMemberAsync(String idOrg, String idMember, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMemberByIdOrgByIdMemberValidateBeforeCall(idOrg, idMember, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMemberByIdOrgByIdMemberRequestBuilder {
        private final String idOrg;
        private final String idMember;

        private RemoveMemberByIdOrgByIdMemberRequestBuilder(String idOrg, String idMember) {
            this.idOrg = idOrg;
            this.idMember = idMember;
        }

        /**
         * Build call for removeMemberByIdOrgByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMemberByIdOrgByIdMemberCall(idOrg, idMember, _callback);
        }


        /**
         * Execute removeMemberByIdOrgByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeMemberByIdOrgByIdMemberWithHttpInfo(idOrg, idMember);
        }

        /**
         * Execute removeMemberByIdOrgByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeMemberByIdOrgByIdMemberWithHttpInfo(idOrg, idMember);
        }

        /**
         * Execute removeMemberByIdOrgByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeMemberByIdOrgByIdMemberAsync(idOrg, idMember, _callback);
        }
    }

    /**
     * deleteOrganizationsMembersByIdOrgByIdMember()
     * 
     * @param idOrg idOrg or name (required)
     * @param idMember idMember (required)
     * @return RemoveMemberByIdOrgByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMemberByIdOrgByIdMemberRequestBuilder removeMemberByIdOrgByIdMember(String idOrg, String idMember) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new RemoveMemberByIdOrgByIdMemberRequestBuilder(idOrg, idMember);
    }
    private okhttp3.Call updateByIdOrgCall(String idOrg, Organizations organizations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizations;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdOrgValidateBeforeCall(String idOrg, Organizations organizations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updateByIdOrg(Async)");
        }

        // verify the required parameter 'organizations' is set
        if (organizations == null) {
            throw new ApiException("Missing the required parameter 'organizations' when calling updateByIdOrg(Async)");
        }

        return updateByIdOrgCall(idOrg, organizations, _callback);

    }


    private ApiResponse<Void> updateByIdOrgWithHttpInfo(String idOrg, Organizations organizations) throws ApiException {
        okhttp3.Call localVarCall = updateByIdOrgValidateBeforeCall(idOrg, organizations, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdOrgAsync(String idOrg, Organizations organizations, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdOrgValidateBeforeCall(idOrg, organizations, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdOrgRequestBuilder {
        private final String idOrg;
        private String desc;
        private String displayName;
        private String name;
        private String prefsAssociatedDomain;
        private String prefsBoardVisibilityRestrictOrg;
        private String prefsBoardVisibilityRestrictPrivate;
        private String prefsBoardVisibilityRestrictPublic;
        private String prefsExternalMembersDisabled;
        private String prefsGoogleAppsVersion;
        private String prefsOrgInviteRestrict;
        private String prefsPermissionLevel;
        private String website;

        private UpdateByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set desc
         * @param desc a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdOrgRequestBuilder
         */
        public UpdateByIdOrgRequestBuilder desc(String desc) {
            this.desc = desc;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName A string with a length of at least 1.  Cannot begin or end with a space. (optional)
         * @return UpdateByIdOrgRequestBuilder
         */
        public UpdateByIdOrgRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdOrgRequestBuilder
         */
        public UpdateByIdOrgRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set prefsAssociatedDomain
         * @param prefsAssociatedDomain The google apps domain to link this org to. (optional)
         * @return UpdateByIdOrgRequestBuilder
         */
        public UpdateByIdOrgRequestBuilder prefsAssociatedDomain(String prefsAssociatedDomain) {
            this.prefsAssociatedDomain = prefsAssociatedDomain;
            return this;
        }
        
        /**
         * Set prefsBoardVisibilityRestrictOrg
         * @param prefsBoardVisibilityRestrictOrg One of: admin, none or org (optional)
         * @return UpdateByIdOrgRequestBuilder
         */
        public UpdateByIdOrgRequestBuilder prefsBoardVisibilityRestrictOrg(String prefsBoardVisibilityRestrictOrg) {
            this.prefsBoardVisibilityRestrictOrg = prefsBoardVisibilityRestrictOrg;
            return this;
        }
        
        /**
         * Set prefsBoardVisibilityRestrictPrivate
         * @param prefsBoardVisibilityRestrictPrivate One of: admin, none or org (optional)
         * @return UpdateByIdOrgRequestBuilder
         */
        public UpdateByIdOrgRequestBuilder prefsBoardVisibilityRestrictPrivate(String prefsBoardVisibilityRestrictPrivate) {
            this.prefsBoardVisibilityRestrictPrivate = prefsBoardVisibilityRestrictPrivate;
            return this;
        }
        
        /**
         * Set prefsBoardVisibilityRestrictPublic
         * @param prefsBoardVisibilityRestrictPublic One of: admin, none or org (optional)
         * @return UpdateByIdOrgRequestBuilder
         */
        public UpdateByIdOrgRequestBuilder prefsBoardVisibilityRestrictPublic(String prefsBoardVisibilityRestrictPublic) {
            this.prefsBoardVisibilityRestrictPublic = prefsBoardVisibilityRestrictPublic;
            return this;
        }
        
        /**
         * Set prefsExternalMembersDisabled
         * @param prefsExternalMembersDisabled  true or false (optional)
         * @return UpdateByIdOrgRequestBuilder
         */
        public UpdateByIdOrgRequestBuilder prefsExternalMembersDisabled(String prefsExternalMembersDisabled) {
            this.prefsExternalMembersDisabled = prefsExternalMembersDisabled;
            return this;
        }
        
        /**
         * Set prefsGoogleAppsVersion
         * @param prefsGoogleAppsVersion a number from 1 to 2 (optional)
         * @return UpdateByIdOrgRequestBuilder
         */
        public UpdateByIdOrgRequestBuilder prefsGoogleAppsVersion(String prefsGoogleAppsVersion) {
            this.prefsGoogleAppsVersion = prefsGoogleAppsVersion;
            return this;
        }
        
        /**
         * Set prefsOrgInviteRestrict
         * @param prefsOrgInviteRestrict An email address with optional expansion tokens (optional)
         * @return UpdateByIdOrgRequestBuilder
         */
        public UpdateByIdOrgRequestBuilder prefsOrgInviteRestrict(String prefsOrgInviteRestrict) {
            this.prefsOrgInviteRestrict = prefsOrgInviteRestrict;
            return this;
        }
        
        /**
         * Set prefsPermissionLevel
         * @param prefsPermissionLevel One of: private or public (optional)
         * @return UpdateByIdOrgRequestBuilder
         */
        public UpdateByIdOrgRequestBuilder prefsPermissionLevel(String prefsPermissionLevel) {
            this.prefsPermissionLevel = prefsPermissionLevel;
            return this;
        }
        
        /**
         * Set website
         * @param website A URL starting with http:// or https:// or null (optional)
         * @return UpdateByIdOrgRequestBuilder
         */
        public UpdateByIdOrgRequestBuilder website(String website) {
            this.website = website;
            return this;
        }
        
        /**
         * Build call for updateByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Organizations organizations = buildBodyParams();
            return updateByIdOrgCall(idOrg, organizations, _callback);
        }

        private Organizations buildBodyParams() {
            Organizations organizations = new Organizations();
            organizations.desc(this.desc);
            organizations.displayName(this.displayName);
            organizations.name(this.name);
            organizations.prefsAssociatedDomain(this.prefsAssociatedDomain);
            organizations.prefsBoardVisibilityRestrictOrg(this.prefsBoardVisibilityRestrictOrg);
            organizations.prefsBoardVisibilityRestrictPrivate(this.prefsBoardVisibilityRestrictPrivate);
            organizations.prefsBoardVisibilityRestrictPublic(this.prefsBoardVisibilityRestrictPublic);
            organizations.prefsExternalMembersDisabled(this.prefsExternalMembersDisabled);
            organizations.prefsGoogleAppsVersion(this.prefsGoogleAppsVersion);
            organizations.prefsOrgInviteRestrict(this.prefsOrgInviteRestrict);
            organizations.prefsPermissionLevel(this.prefsPermissionLevel);
            organizations.website(this.website);
            return organizations;
        }

        /**
         * Execute updateByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Organizations organizations = buildBodyParams();
            updateByIdOrgWithHttpInfo(idOrg, organizations);
        }

        /**
         * Execute updateByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Organizations organizations = buildBodyParams();
            return updateByIdOrgWithHttpInfo(idOrg, organizations);
        }

        /**
         * Execute updateByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Organizations organizations = buildBodyParams();
            return updateByIdOrgAsync(idOrg, organizations, _callback);
        }
    }

    /**
     * updateOrganizationsByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param organizations Attributes of \&quot;Organizations\&quot; to be updated. (required)
     * @return UpdateByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdOrgRequestBuilder updateByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdateByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updateDescriptionByIdOrgCall(String idOrg, OrganizationsDesc organizationsDesc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationsDesc;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/desc"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDescriptionByIdOrgValidateBeforeCall(String idOrg, OrganizationsDesc organizationsDesc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updateDescriptionByIdOrg(Async)");
        }

        // verify the required parameter 'organizationsDesc' is set
        if (organizationsDesc == null) {
            throw new ApiException("Missing the required parameter 'organizationsDesc' when calling updateDescriptionByIdOrg(Async)");
        }

        return updateDescriptionByIdOrgCall(idOrg, organizationsDesc, _callback);

    }


    private ApiResponse<Void> updateDescriptionByIdOrgWithHttpInfo(String idOrg, OrganizationsDesc organizationsDesc) throws ApiException {
        okhttp3.Call localVarCall = updateDescriptionByIdOrgValidateBeforeCall(idOrg, organizationsDesc, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDescriptionByIdOrgAsync(String idOrg, OrganizationsDesc organizationsDesc, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDescriptionByIdOrgValidateBeforeCall(idOrg, organizationsDesc, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDescriptionByIdOrgRequestBuilder {
        private final String idOrg;
        private String value;

        private UpdateDescriptionByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateDescriptionByIdOrgRequestBuilder
         */
        public UpdateDescriptionByIdOrgRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateDescriptionByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrganizationsDesc organizationsDesc = buildBodyParams();
            return updateDescriptionByIdOrgCall(idOrg, organizationsDesc, _callback);
        }

        private OrganizationsDesc buildBodyParams() {
            OrganizationsDesc organizationsDesc = new OrganizationsDesc();
            organizationsDesc.value(this.value);
            return organizationsDesc;
        }

        /**
         * Execute updateDescriptionByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            OrganizationsDesc organizationsDesc = buildBodyParams();
            updateDescriptionByIdOrgWithHttpInfo(idOrg, organizationsDesc);
        }

        /**
         * Execute updateDescriptionByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            OrganizationsDesc organizationsDesc = buildBodyParams();
            return updateDescriptionByIdOrgWithHttpInfo(idOrg, organizationsDesc);
        }

        /**
         * Execute updateDescriptionByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            OrganizationsDesc organizationsDesc = buildBodyParams();
            return updateDescriptionByIdOrgAsync(idOrg, organizationsDesc, _callback);
        }
    }

    /**
     * updateOrganizationsDescByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param organizationsDesc Attributes of \&quot;Organizations Desc\&quot; to be updated. (required)
     * @return UpdateDescriptionByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDescriptionByIdOrgRequestBuilder updateDescriptionByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdateDescriptionByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updateDisplayNameByIdOrgCall(String idOrg, OrganizationsDisplayName organizationsDisplayName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationsDisplayName;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/displayName"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDisplayNameByIdOrgValidateBeforeCall(String idOrg, OrganizationsDisplayName organizationsDisplayName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updateDisplayNameByIdOrg(Async)");
        }

        // verify the required parameter 'organizationsDisplayName' is set
        if (organizationsDisplayName == null) {
            throw new ApiException("Missing the required parameter 'organizationsDisplayName' when calling updateDisplayNameByIdOrg(Async)");
        }

        return updateDisplayNameByIdOrgCall(idOrg, organizationsDisplayName, _callback);

    }


    private ApiResponse<Void> updateDisplayNameByIdOrgWithHttpInfo(String idOrg, OrganizationsDisplayName organizationsDisplayName) throws ApiException {
        okhttp3.Call localVarCall = updateDisplayNameByIdOrgValidateBeforeCall(idOrg, organizationsDisplayName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateDisplayNameByIdOrgAsync(String idOrg, OrganizationsDisplayName organizationsDisplayName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDisplayNameByIdOrgValidateBeforeCall(idOrg, organizationsDisplayName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateDisplayNameByIdOrgRequestBuilder {
        private final String idOrg;
        private String value;

        private UpdateDisplayNameByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set value
         * @param value A string with a length of at least 1.  Cannot begin or end with a space. (optional)
         * @return UpdateDisplayNameByIdOrgRequestBuilder
         */
        public UpdateDisplayNameByIdOrgRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateDisplayNameByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrganizationsDisplayName organizationsDisplayName = buildBodyParams();
            return updateDisplayNameByIdOrgCall(idOrg, organizationsDisplayName, _callback);
        }

        private OrganizationsDisplayName buildBodyParams() {
            OrganizationsDisplayName organizationsDisplayName = new OrganizationsDisplayName();
            organizationsDisplayName.value(this.value);
            return organizationsDisplayName;
        }

        /**
         * Execute updateDisplayNameByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            OrganizationsDisplayName organizationsDisplayName = buildBodyParams();
            updateDisplayNameByIdOrgWithHttpInfo(idOrg, organizationsDisplayName);
        }

        /**
         * Execute updateDisplayNameByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            OrganizationsDisplayName organizationsDisplayName = buildBodyParams();
            return updateDisplayNameByIdOrgWithHttpInfo(idOrg, organizationsDisplayName);
        }

        /**
         * Execute updateDisplayNameByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            OrganizationsDisplayName organizationsDisplayName = buildBodyParams();
            return updateDisplayNameByIdOrgAsync(idOrg, organizationsDisplayName, _callback);
        }
    }

    /**
     * updateOrganizationsDisplayNameByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param organizationsDisplayName Attributes of \&quot;Organizations Display Name\&quot; to be updated. (required)
     * @return UpdateDisplayNameByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDisplayNameByIdOrgRequestBuilder updateDisplayNameByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdateDisplayNameByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updateMembersByIdOrgCall(String idOrg, OrganizationsMembers organizationsMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationsMembers;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/members"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersByIdOrgValidateBeforeCall(String idOrg, OrganizationsMembers organizationsMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updateMembersByIdOrg(Async)");
        }

        // verify the required parameter 'organizationsMembers' is set
        if (organizationsMembers == null) {
            throw new ApiException("Missing the required parameter 'organizationsMembers' when calling updateMembersByIdOrg(Async)");
        }

        return updateMembersByIdOrgCall(idOrg, organizationsMembers, _callback);

    }


    private ApiResponse<Void> updateMembersByIdOrgWithHttpInfo(String idOrg, OrganizationsMembers organizationsMembers) throws ApiException {
        okhttp3.Call localVarCall = updateMembersByIdOrgValidateBeforeCall(idOrg, organizationsMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMembersByIdOrgAsync(String idOrg, OrganizationsMembers organizationsMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersByIdOrgValidateBeforeCall(idOrg, organizationsMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMembersByIdOrgRequestBuilder {
        private final String idOrg;
        private String email;
        private String fullName;
        private String type;

        private UpdateMembersByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set email
         * @param email An email address (optional)
         * @return UpdateMembersByIdOrgRequestBuilder
         */
        public UpdateMembersByIdOrgRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set fullName
         * @param fullName A string with a length of at least 1.  Cannot begin or end with a space. (optional)
         * @return UpdateMembersByIdOrgRequestBuilder
         */
        public UpdateMembersByIdOrgRequestBuilder fullName(String fullName) {
            this.fullName = fullName;
            return this;
        }
        
        /**
         * Set type
         * @param type One of: admin, normal or observer (optional)
         * @return UpdateMembersByIdOrgRequestBuilder
         */
        public UpdateMembersByIdOrgRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateMembersByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrganizationsMembers organizationsMembers = buildBodyParams();
            return updateMembersByIdOrgCall(idOrg, organizationsMembers, _callback);
        }

        private OrganizationsMembers buildBodyParams() {
            OrganizationsMembers organizationsMembers = new OrganizationsMembers();
            organizationsMembers.email(this.email);
            organizationsMembers.fullName(this.fullName);
            organizationsMembers.type(this.type);
            return organizationsMembers;
        }

        /**
         * Execute updateMembersByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            OrganizationsMembers organizationsMembers = buildBodyParams();
            updateMembersByIdOrgWithHttpInfo(idOrg, organizationsMembers);
        }

        /**
         * Execute updateMembersByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            OrganizationsMembers organizationsMembers = buildBodyParams();
            return updateMembersByIdOrgWithHttpInfo(idOrg, organizationsMembers);
        }

        /**
         * Execute updateMembersByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            OrganizationsMembers organizationsMembers = buildBodyParams();
            return updateMembersByIdOrgAsync(idOrg, organizationsMembers, _callback);
        }
    }

    /**
     * updateOrganizationsMembersByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param organizationsMembers Attributes of \&quot;Organizations Members\&quot; to be updated. (required)
     * @return UpdateMembersByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMembersByIdOrgRequestBuilder updateMembersByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdateMembersByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updateMembersByIdOrgByIdMemberCall(String idOrg, String idMember, OrganizationsMembers organizationsMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationsMembers;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/members/{idMember}"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersByIdOrgByIdMemberValidateBeforeCall(String idOrg, String idMember, OrganizationsMembers organizationsMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updateMembersByIdOrgByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersByIdOrgByIdMember(Async)");
        }

        // verify the required parameter 'organizationsMembers' is set
        if (organizationsMembers == null) {
            throw new ApiException("Missing the required parameter 'organizationsMembers' when calling updateMembersByIdOrgByIdMember(Async)");
        }

        return updateMembersByIdOrgByIdMemberCall(idOrg, idMember, organizationsMembers, _callback);

    }


    private ApiResponse<Void> updateMembersByIdOrgByIdMemberWithHttpInfo(String idOrg, String idMember, OrganizationsMembers organizationsMembers) throws ApiException {
        okhttp3.Call localVarCall = updateMembersByIdOrgByIdMemberValidateBeforeCall(idOrg, idMember, organizationsMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMembersByIdOrgByIdMemberAsync(String idOrg, String idMember, OrganizationsMembers organizationsMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersByIdOrgByIdMemberValidateBeforeCall(idOrg, idMember, organizationsMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMembersByIdOrgByIdMemberRequestBuilder {
        private final String idOrg;
        private final String idMember;
        private String email;
        private String fullName;
        private String type;

        private UpdateMembersByIdOrgByIdMemberRequestBuilder(String idOrg, String idMember) {
            this.idOrg = idOrg;
            this.idMember = idMember;
        }

        /**
         * Set email
         * @param email An email address (optional)
         * @return UpdateMembersByIdOrgByIdMemberRequestBuilder
         */
        public UpdateMembersByIdOrgByIdMemberRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set fullName
         * @param fullName A string with a length of at least 1.  Cannot begin or end with a space. (optional)
         * @return UpdateMembersByIdOrgByIdMemberRequestBuilder
         */
        public UpdateMembersByIdOrgByIdMemberRequestBuilder fullName(String fullName) {
            this.fullName = fullName;
            return this;
        }
        
        /**
         * Set type
         * @param type One of: admin, normal or observer (optional)
         * @return UpdateMembersByIdOrgByIdMemberRequestBuilder
         */
        public UpdateMembersByIdOrgByIdMemberRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateMembersByIdOrgByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrganizationsMembers organizationsMembers = buildBodyParams();
            return updateMembersByIdOrgByIdMemberCall(idOrg, idMember, organizationsMembers, _callback);
        }

        private OrganizationsMembers buildBodyParams() {
            OrganizationsMembers organizationsMembers = new OrganizationsMembers();
            organizationsMembers.email(this.email);
            organizationsMembers.fullName(this.fullName);
            organizationsMembers.type(this.type);
            return organizationsMembers;
        }

        /**
         * Execute updateMembersByIdOrgByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            OrganizationsMembers organizationsMembers = buildBodyParams();
            updateMembersByIdOrgByIdMemberWithHttpInfo(idOrg, idMember, organizationsMembers);
        }

        /**
         * Execute updateMembersByIdOrgByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            OrganizationsMembers organizationsMembers = buildBodyParams();
            return updateMembersByIdOrgByIdMemberWithHttpInfo(idOrg, idMember, organizationsMembers);
        }

        /**
         * Execute updateMembersByIdOrgByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            OrganizationsMembers organizationsMembers = buildBodyParams();
            return updateMembersByIdOrgByIdMemberAsync(idOrg, idMember, organizationsMembers, _callback);
        }
    }

    /**
     * updateOrganizationsMembersByIdOrgByIdMember()
     * 
     * @param idOrg idOrg or name (required)
     * @param idMember idMember (required)
     * @param organizationsMembers Attributes of \&quot;Organizations Members\&quot; to be updated. (required)
     * @return UpdateMembersByIdOrgByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMembersByIdOrgByIdMemberRequestBuilder updateMembersByIdOrgByIdMember(String idOrg, String idMember) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UpdateMembersByIdOrgByIdMemberRequestBuilder(idOrg, idMember);
    }
    private okhttp3.Call updateMembersDeactivatedByIdOrgByIdMemberCall(String idOrg, String idMember, OrganizationsMembersDeactivated organizationsMembersDeactivated, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationsMembersDeactivated;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/members/{idMember}/deactivated"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersDeactivatedByIdOrgByIdMemberValidateBeforeCall(String idOrg, String idMember, OrganizationsMembersDeactivated organizationsMembersDeactivated, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updateMembersDeactivatedByIdOrgByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersDeactivatedByIdOrgByIdMember(Async)");
        }

        // verify the required parameter 'organizationsMembersDeactivated' is set
        if (organizationsMembersDeactivated == null) {
            throw new ApiException("Missing the required parameter 'organizationsMembersDeactivated' when calling updateMembersDeactivatedByIdOrgByIdMember(Async)");
        }

        return updateMembersDeactivatedByIdOrgByIdMemberCall(idOrg, idMember, organizationsMembersDeactivated, _callback);

    }


    private ApiResponse<Void> updateMembersDeactivatedByIdOrgByIdMemberWithHttpInfo(String idOrg, String idMember, OrganizationsMembersDeactivated organizationsMembersDeactivated) throws ApiException {
        okhttp3.Call localVarCall = updateMembersDeactivatedByIdOrgByIdMemberValidateBeforeCall(idOrg, idMember, organizationsMembersDeactivated, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMembersDeactivatedByIdOrgByIdMemberAsync(String idOrg, String idMember, OrganizationsMembersDeactivated organizationsMembersDeactivated, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersDeactivatedByIdOrgByIdMemberValidateBeforeCall(idOrg, idMember, organizationsMembersDeactivated, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMembersDeactivatedByIdOrgByIdMemberRequestBuilder {
        private final String idOrg;
        private final String idMember;
        private String value;

        private UpdateMembersDeactivatedByIdOrgByIdMemberRequestBuilder(String idOrg, String idMember) {
            this.idOrg = idOrg;
            this.idMember = idMember;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdateMembersDeactivatedByIdOrgByIdMemberRequestBuilder
         */
        public UpdateMembersDeactivatedByIdOrgByIdMemberRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateMembersDeactivatedByIdOrgByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrganizationsMembersDeactivated organizationsMembersDeactivated = buildBodyParams();
            return updateMembersDeactivatedByIdOrgByIdMemberCall(idOrg, idMember, organizationsMembersDeactivated, _callback);
        }

        private OrganizationsMembersDeactivated buildBodyParams() {
            OrganizationsMembersDeactivated organizationsMembersDeactivated = new OrganizationsMembersDeactivated();
            organizationsMembersDeactivated.value(this.value);
            return organizationsMembersDeactivated;
        }

        /**
         * Execute updateMembersDeactivatedByIdOrgByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            OrganizationsMembersDeactivated organizationsMembersDeactivated = buildBodyParams();
            updateMembersDeactivatedByIdOrgByIdMemberWithHttpInfo(idOrg, idMember, organizationsMembersDeactivated);
        }

        /**
         * Execute updateMembersDeactivatedByIdOrgByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            OrganizationsMembersDeactivated organizationsMembersDeactivated = buildBodyParams();
            return updateMembersDeactivatedByIdOrgByIdMemberWithHttpInfo(idOrg, idMember, organizationsMembersDeactivated);
        }

        /**
         * Execute updateMembersDeactivatedByIdOrgByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            OrganizationsMembersDeactivated organizationsMembersDeactivated = buildBodyParams();
            return updateMembersDeactivatedByIdOrgByIdMemberAsync(idOrg, idMember, organizationsMembersDeactivated, _callback);
        }
    }

    /**
     * updateOrganizationsMembersDeactivatedByIdOrgByIdMember()
     * 
     * @param idOrg idOrg or name (required)
     * @param idMember idMember (required)
     * @param organizationsMembersDeactivated Attributes of \&quot;Organizations Members Deactivated\&quot; to be updated. (required)
     * @return UpdateMembersDeactivatedByIdOrgByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMembersDeactivatedByIdOrgByIdMemberRequestBuilder updateMembersDeactivatedByIdOrgByIdMember(String idOrg, String idMember) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UpdateMembersDeactivatedByIdOrgByIdMemberRequestBuilder(idOrg, idMember);
    }
    private okhttp3.Call updateMembershipByIdOrgByIdMembershipCall(String idOrg, String idMembership, OrganizationsMemberships organizationsMemberships, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationsMemberships;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/memberships/{idMembership}"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()))
            .replace("{" + "idMembership" + "}", localVarApiClient.escapeString(idMembership.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembershipByIdOrgByIdMembershipValidateBeforeCall(String idOrg, String idMembership, OrganizationsMemberships organizationsMemberships, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updateMembershipByIdOrgByIdMembership(Async)");
        }

        // verify the required parameter 'idMembership' is set
        if (idMembership == null) {
            throw new ApiException("Missing the required parameter 'idMembership' when calling updateMembershipByIdOrgByIdMembership(Async)");
        }

        // verify the required parameter 'organizationsMemberships' is set
        if (organizationsMemberships == null) {
            throw new ApiException("Missing the required parameter 'organizationsMemberships' when calling updateMembershipByIdOrgByIdMembership(Async)");
        }

        return updateMembershipByIdOrgByIdMembershipCall(idOrg, idMembership, organizationsMemberships, _callback);

    }


    private ApiResponse<Void> updateMembershipByIdOrgByIdMembershipWithHttpInfo(String idOrg, String idMembership, OrganizationsMemberships organizationsMemberships) throws ApiException {
        okhttp3.Call localVarCall = updateMembershipByIdOrgByIdMembershipValidateBeforeCall(idOrg, idMembership, organizationsMemberships, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMembershipByIdOrgByIdMembershipAsync(String idOrg, String idMembership, OrganizationsMemberships organizationsMemberships, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembershipByIdOrgByIdMembershipValidateBeforeCall(idOrg, idMembership, organizationsMemberships, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMembershipByIdOrgByIdMembershipRequestBuilder {
        private final String idOrg;
        private final String idMembership;
        private String memberFields;
        private String type;

        private UpdateMembershipByIdOrgByIdMembershipRequestBuilder(String idOrg, String idMembership) {
            this.idOrg = idOrg;
            this.idMembership = idMembership;
        }

        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional)
         * @return UpdateMembershipByIdOrgByIdMembershipRequestBuilder
         */
        public UpdateMembershipByIdOrgByIdMembershipRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set type
         * @param type One of: admin, normal or observer (optional)
         * @return UpdateMembershipByIdOrgByIdMembershipRequestBuilder
         */
        public UpdateMembershipByIdOrgByIdMembershipRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateMembershipByIdOrgByIdMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrganizationsMemberships organizationsMemberships = buildBodyParams();
            return updateMembershipByIdOrgByIdMembershipCall(idOrg, idMembership, organizationsMemberships, _callback);
        }

        private OrganizationsMemberships buildBodyParams() {
            OrganizationsMemberships organizationsMemberships = new OrganizationsMemberships();
            organizationsMemberships.memberFields(this.memberFields);
            organizationsMemberships.type(this.type);
            return organizationsMemberships;
        }

        /**
         * Execute updateMembershipByIdOrgByIdMembership request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            OrganizationsMemberships organizationsMemberships = buildBodyParams();
            updateMembershipByIdOrgByIdMembershipWithHttpInfo(idOrg, idMembership, organizationsMemberships);
        }

        /**
         * Execute updateMembershipByIdOrgByIdMembership request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            OrganizationsMemberships organizationsMemberships = buildBodyParams();
            return updateMembershipByIdOrgByIdMembershipWithHttpInfo(idOrg, idMembership, organizationsMemberships);
        }

        /**
         * Execute updateMembershipByIdOrgByIdMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            OrganizationsMemberships organizationsMemberships = buildBodyParams();
            return updateMembershipByIdOrgByIdMembershipAsync(idOrg, idMembership, organizationsMemberships, _callback);
        }
    }

    /**
     * updateOrganizationsMembershipsByIdOrgByIdMembership()
     * 
     * @param idOrg idOrg or name (required)
     * @param idMembership idMembership (required)
     * @param organizationsMemberships Attributes of \&quot;Organizations Memberships\&quot; to be updated. (required)
     * @return UpdateMembershipByIdOrgByIdMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMembershipByIdOrgByIdMembershipRequestBuilder updateMembershipByIdOrgByIdMembership(String idOrg, String idMembership) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        if (idMembership == null) throw new IllegalArgumentException("\"idMembership\" is required but got null");
            

        return new UpdateMembershipByIdOrgByIdMembershipRequestBuilder(idOrg, idMembership);
    }
    private okhttp3.Call updateNameByIdOrgCall(String idOrg, OrganizationsName organizationsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationsName;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/name"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNameByIdOrgValidateBeforeCall(String idOrg, OrganizationsName organizationsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updateNameByIdOrg(Async)");
        }

        // verify the required parameter 'organizationsName' is set
        if (organizationsName == null) {
            throw new ApiException("Missing the required parameter 'organizationsName' when calling updateNameByIdOrg(Async)");
        }

        return updateNameByIdOrgCall(idOrg, organizationsName, _callback);

    }


    private ApiResponse<Void> updateNameByIdOrgWithHttpInfo(String idOrg, OrganizationsName organizationsName) throws ApiException {
        okhttp3.Call localVarCall = updateNameByIdOrgValidateBeforeCall(idOrg, organizationsName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateNameByIdOrgAsync(String idOrg, OrganizationsName organizationsName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNameByIdOrgValidateBeforeCall(idOrg, organizationsName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateNameByIdOrgRequestBuilder {
        private final String idOrg;
        private String value;

        private UpdateNameByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set value
         * @param value A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique. (optional)
         * @return UpdateNameByIdOrgRequestBuilder
         */
        public UpdateNameByIdOrgRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateNameByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrganizationsName organizationsName = buildBodyParams();
            return updateNameByIdOrgCall(idOrg, organizationsName, _callback);
        }

        private OrganizationsName buildBodyParams() {
            OrganizationsName organizationsName = new OrganizationsName();
            organizationsName.value(this.value);
            return organizationsName;
        }

        /**
         * Execute updateNameByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            OrganizationsName organizationsName = buildBodyParams();
            updateNameByIdOrgWithHttpInfo(idOrg, organizationsName);
        }

        /**
         * Execute updateNameByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            OrganizationsName organizationsName = buildBodyParams();
            return updateNameByIdOrgWithHttpInfo(idOrg, organizationsName);
        }

        /**
         * Execute updateNameByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            OrganizationsName organizationsName = buildBodyParams();
            return updateNameByIdOrgAsync(idOrg, organizationsName, _callback);
        }
    }

    /**
     * updateOrganizationsNameByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param organizationsName Attributes of \&quot;Organizations Name\&quot; to be updated. (required)
     * @return UpdateNameByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateNameByIdOrgRequestBuilder updateNameByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdateNameByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updatePrefsAssociatedDomainByIdOrgCall(String idOrg, PrefsAssociatedDomain prefsAssociatedDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsAssociatedDomain;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/prefs/associatedDomain"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsAssociatedDomainByIdOrgValidateBeforeCall(String idOrg, PrefsAssociatedDomain prefsAssociatedDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updatePrefsAssociatedDomainByIdOrg(Async)");
        }

        // verify the required parameter 'prefsAssociatedDomain' is set
        if (prefsAssociatedDomain == null) {
            throw new ApiException("Missing the required parameter 'prefsAssociatedDomain' when calling updatePrefsAssociatedDomainByIdOrg(Async)");
        }

        return updatePrefsAssociatedDomainByIdOrgCall(idOrg, prefsAssociatedDomain, _callback);

    }


    private ApiResponse<Void> updatePrefsAssociatedDomainByIdOrgWithHttpInfo(String idOrg, PrefsAssociatedDomain prefsAssociatedDomain) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsAssociatedDomainByIdOrgValidateBeforeCall(idOrg, prefsAssociatedDomain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsAssociatedDomainByIdOrgAsync(String idOrg, PrefsAssociatedDomain prefsAssociatedDomain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsAssociatedDomainByIdOrgValidateBeforeCall(idOrg, prefsAssociatedDomain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsAssociatedDomainByIdOrgRequestBuilder {
        private final String idOrg;
        private String value;

        private UpdatePrefsAssociatedDomainByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set value
         * @param value The google apps domain to link this org to. (optional)
         * @return UpdatePrefsAssociatedDomainByIdOrgRequestBuilder
         */
        public UpdatePrefsAssociatedDomainByIdOrgRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsAssociatedDomainByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsAssociatedDomain prefsAssociatedDomain = buildBodyParams();
            return updatePrefsAssociatedDomainByIdOrgCall(idOrg, prefsAssociatedDomain, _callback);
        }

        private PrefsAssociatedDomain buildBodyParams() {
            PrefsAssociatedDomain prefsAssociatedDomain = new PrefsAssociatedDomain();
            prefsAssociatedDomain.value(this.value);
            return prefsAssociatedDomain;
        }

        /**
         * Execute updatePrefsAssociatedDomainByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsAssociatedDomain prefsAssociatedDomain = buildBodyParams();
            updatePrefsAssociatedDomainByIdOrgWithHttpInfo(idOrg, prefsAssociatedDomain);
        }

        /**
         * Execute updatePrefsAssociatedDomainByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsAssociatedDomain prefsAssociatedDomain = buildBodyParams();
            return updatePrefsAssociatedDomainByIdOrgWithHttpInfo(idOrg, prefsAssociatedDomain);
        }

        /**
         * Execute updatePrefsAssociatedDomainByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsAssociatedDomain prefsAssociatedDomain = buildBodyParams();
            return updatePrefsAssociatedDomainByIdOrgAsync(idOrg, prefsAssociatedDomain, _callback);
        }
    }

    /**
     * updateOrganizationsPrefsAssociatedDomainByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param prefsAssociatedDomain Attributes of \&quot;Prefs Associated Domain\&quot; to be updated. (required)
     * @return UpdatePrefsAssociatedDomainByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsAssociatedDomainByIdOrgRequestBuilder updatePrefsAssociatedDomainByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdatePrefsAssociatedDomainByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updatePrefsBoardVisibilityRestrictByIdOrgCall(String idOrg, PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsBoardVisibilityRestrict;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/prefs/boardVisibilityRestrict/org"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsBoardVisibilityRestrictByIdOrgValidateBeforeCall(String idOrg, PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updatePrefsBoardVisibilityRestrictByIdOrg(Async)");
        }

        // verify the required parameter 'prefsBoardVisibilityRestrict' is set
        if (prefsBoardVisibilityRestrict == null) {
            throw new ApiException("Missing the required parameter 'prefsBoardVisibilityRestrict' when calling updatePrefsBoardVisibilityRestrictByIdOrg(Async)");
        }

        return updatePrefsBoardVisibilityRestrictByIdOrgCall(idOrg, prefsBoardVisibilityRestrict, _callback);

    }


    private ApiResponse<Void> updatePrefsBoardVisibilityRestrictByIdOrgWithHttpInfo(String idOrg, PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsBoardVisibilityRestrictByIdOrgValidateBeforeCall(idOrg, prefsBoardVisibilityRestrict, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsBoardVisibilityRestrictByIdOrgAsync(String idOrg, PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsBoardVisibilityRestrictByIdOrgValidateBeforeCall(idOrg, prefsBoardVisibilityRestrict, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsBoardVisibilityRestrictByIdOrgRequestBuilder {
        private final String idOrg;
        private String value;

        private UpdatePrefsBoardVisibilityRestrictByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set value
         * @param value One of: admin, none or org (optional)
         * @return UpdatePrefsBoardVisibilityRestrictByIdOrgRequestBuilder
         */
        public UpdatePrefsBoardVisibilityRestrictByIdOrgRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsBoardVisibilityRestrictByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = buildBodyParams();
            return updatePrefsBoardVisibilityRestrictByIdOrgCall(idOrg, prefsBoardVisibilityRestrict, _callback);
        }

        private PrefsBoardVisibilityRestrict buildBodyParams() {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = new PrefsBoardVisibilityRestrict();
            prefsBoardVisibilityRestrict.value(this.value);
            return prefsBoardVisibilityRestrict;
        }

        /**
         * Execute updatePrefsBoardVisibilityRestrictByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = buildBodyParams();
            updatePrefsBoardVisibilityRestrictByIdOrgWithHttpInfo(idOrg, prefsBoardVisibilityRestrict);
        }

        /**
         * Execute updatePrefsBoardVisibilityRestrictByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = buildBodyParams();
            return updatePrefsBoardVisibilityRestrictByIdOrgWithHttpInfo(idOrg, prefsBoardVisibilityRestrict);
        }

        /**
         * Execute updatePrefsBoardVisibilityRestrictByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = buildBodyParams();
            return updatePrefsBoardVisibilityRestrictByIdOrgAsync(idOrg, prefsBoardVisibilityRestrict, _callback);
        }
    }

    /**
     * updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param prefsBoardVisibilityRestrict Attributes of \&quot;Prefs Board Visibility Restrict\&quot; to be updated. (required)
     * @return UpdatePrefsBoardVisibilityRestrictByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsBoardVisibilityRestrictByIdOrgRequestBuilder updatePrefsBoardVisibilityRestrictByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdatePrefsBoardVisibilityRestrictByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updatePrefsBoardVisibilityRestrictPublicByIdOrgCall(String idOrg, PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsBoardVisibilityRestrict;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/prefs/boardVisibilityRestrict/public"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsBoardVisibilityRestrictPublicByIdOrgValidateBeforeCall(String idOrg, PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updatePrefsBoardVisibilityRestrictPublicByIdOrg(Async)");
        }

        // verify the required parameter 'prefsBoardVisibilityRestrict' is set
        if (prefsBoardVisibilityRestrict == null) {
            throw new ApiException("Missing the required parameter 'prefsBoardVisibilityRestrict' when calling updatePrefsBoardVisibilityRestrictPublicByIdOrg(Async)");
        }

        return updatePrefsBoardVisibilityRestrictPublicByIdOrgCall(idOrg, prefsBoardVisibilityRestrict, _callback);

    }


    private ApiResponse<Void> updatePrefsBoardVisibilityRestrictPublicByIdOrgWithHttpInfo(String idOrg, PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsBoardVisibilityRestrictPublicByIdOrgValidateBeforeCall(idOrg, prefsBoardVisibilityRestrict, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsBoardVisibilityRestrictPublicByIdOrgAsync(String idOrg, PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsBoardVisibilityRestrictPublicByIdOrgValidateBeforeCall(idOrg, prefsBoardVisibilityRestrict, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequestBuilder {
        private final String idOrg;
        private String value;

        private UpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set value
         * @param value One of: admin, none or org (optional)
         * @return UpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequestBuilder
         */
        public UpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsBoardVisibilityRestrictPublicByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = buildBodyParams();
            return updatePrefsBoardVisibilityRestrictPublicByIdOrgCall(idOrg, prefsBoardVisibilityRestrict, _callback);
        }

        private PrefsBoardVisibilityRestrict buildBodyParams() {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = new PrefsBoardVisibilityRestrict();
            prefsBoardVisibilityRestrict.value(this.value);
            return prefsBoardVisibilityRestrict;
        }

        /**
         * Execute updatePrefsBoardVisibilityRestrictPublicByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = buildBodyParams();
            updatePrefsBoardVisibilityRestrictPublicByIdOrgWithHttpInfo(idOrg, prefsBoardVisibilityRestrict);
        }

        /**
         * Execute updatePrefsBoardVisibilityRestrictPublicByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = buildBodyParams();
            return updatePrefsBoardVisibilityRestrictPublicByIdOrgWithHttpInfo(idOrg, prefsBoardVisibilityRestrict);
        }

        /**
         * Execute updatePrefsBoardVisibilityRestrictPublicByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = buildBodyParams();
            return updatePrefsBoardVisibilityRestrictPublicByIdOrgAsync(idOrg, prefsBoardVisibilityRestrict, _callback);
        }
    }

    /**
     * updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param prefsBoardVisibilityRestrict Attributes of \&quot;Prefs Board Visibility Restrict\&quot; to be updated. (required)
     * @return UpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequestBuilder updatePrefsBoardVisibilityRestrictPublicByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updatePrefsExternalMembersDisabledByIdOrgCall(String idOrg, PrefsExternalMembersDisabled prefsExternalMembersDisabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsExternalMembersDisabled;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/prefs/externalMembersDisabled"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsExternalMembersDisabledByIdOrgValidateBeforeCall(String idOrg, PrefsExternalMembersDisabled prefsExternalMembersDisabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updatePrefsExternalMembersDisabledByIdOrg(Async)");
        }

        // verify the required parameter 'prefsExternalMembersDisabled' is set
        if (prefsExternalMembersDisabled == null) {
            throw new ApiException("Missing the required parameter 'prefsExternalMembersDisabled' when calling updatePrefsExternalMembersDisabledByIdOrg(Async)");
        }

        return updatePrefsExternalMembersDisabledByIdOrgCall(idOrg, prefsExternalMembersDisabled, _callback);

    }


    private ApiResponse<Void> updatePrefsExternalMembersDisabledByIdOrgWithHttpInfo(String idOrg, PrefsExternalMembersDisabled prefsExternalMembersDisabled) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsExternalMembersDisabledByIdOrgValidateBeforeCall(idOrg, prefsExternalMembersDisabled, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsExternalMembersDisabledByIdOrgAsync(String idOrg, PrefsExternalMembersDisabled prefsExternalMembersDisabled, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsExternalMembersDisabledByIdOrgValidateBeforeCall(idOrg, prefsExternalMembersDisabled, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsExternalMembersDisabledByIdOrgRequestBuilder {
        private final String idOrg;
        private String value;

        private UpdatePrefsExternalMembersDisabledByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdatePrefsExternalMembersDisabledByIdOrgRequestBuilder
         */
        public UpdatePrefsExternalMembersDisabledByIdOrgRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsExternalMembersDisabledByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsExternalMembersDisabled prefsExternalMembersDisabled = buildBodyParams();
            return updatePrefsExternalMembersDisabledByIdOrgCall(idOrg, prefsExternalMembersDisabled, _callback);
        }

        private PrefsExternalMembersDisabled buildBodyParams() {
            PrefsExternalMembersDisabled prefsExternalMembersDisabled = new PrefsExternalMembersDisabled();
            prefsExternalMembersDisabled.value(this.value);
            return prefsExternalMembersDisabled;
        }

        /**
         * Execute updatePrefsExternalMembersDisabledByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsExternalMembersDisabled prefsExternalMembersDisabled = buildBodyParams();
            updatePrefsExternalMembersDisabledByIdOrgWithHttpInfo(idOrg, prefsExternalMembersDisabled);
        }

        /**
         * Execute updatePrefsExternalMembersDisabledByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsExternalMembersDisabled prefsExternalMembersDisabled = buildBodyParams();
            return updatePrefsExternalMembersDisabledByIdOrgWithHttpInfo(idOrg, prefsExternalMembersDisabled);
        }

        /**
         * Execute updatePrefsExternalMembersDisabledByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsExternalMembersDisabled prefsExternalMembersDisabled = buildBodyParams();
            return updatePrefsExternalMembersDisabledByIdOrgAsync(idOrg, prefsExternalMembersDisabled, _callback);
        }
    }

    /**
     * updateOrganizationsPrefsExternalMembersDisabledByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param prefsExternalMembersDisabled Attributes of \&quot;Prefs External Members Disabled\&quot; to be updated. (required)
     * @return UpdatePrefsExternalMembersDisabledByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsExternalMembersDisabledByIdOrgRequestBuilder updatePrefsExternalMembersDisabledByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdatePrefsExternalMembersDisabledByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updatePrefsGoogleAppsVersionByIdOrgCall(String idOrg, PrefsGoogleAppsVersion prefsGoogleAppsVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsGoogleAppsVersion;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/prefs/googleAppsVersion"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsGoogleAppsVersionByIdOrgValidateBeforeCall(String idOrg, PrefsGoogleAppsVersion prefsGoogleAppsVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updatePrefsGoogleAppsVersionByIdOrg(Async)");
        }

        // verify the required parameter 'prefsGoogleAppsVersion' is set
        if (prefsGoogleAppsVersion == null) {
            throw new ApiException("Missing the required parameter 'prefsGoogleAppsVersion' when calling updatePrefsGoogleAppsVersionByIdOrg(Async)");
        }

        return updatePrefsGoogleAppsVersionByIdOrgCall(idOrg, prefsGoogleAppsVersion, _callback);

    }


    private ApiResponse<Void> updatePrefsGoogleAppsVersionByIdOrgWithHttpInfo(String idOrg, PrefsGoogleAppsVersion prefsGoogleAppsVersion) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsGoogleAppsVersionByIdOrgValidateBeforeCall(idOrg, prefsGoogleAppsVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsGoogleAppsVersionByIdOrgAsync(String idOrg, PrefsGoogleAppsVersion prefsGoogleAppsVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsGoogleAppsVersionByIdOrgValidateBeforeCall(idOrg, prefsGoogleAppsVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsGoogleAppsVersionByIdOrgRequestBuilder {
        private final String idOrg;
        private String value;

        private UpdatePrefsGoogleAppsVersionByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set value
         * @param value a number from 1 to 2 (optional)
         * @return UpdatePrefsGoogleAppsVersionByIdOrgRequestBuilder
         */
        public UpdatePrefsGoogleAppsVersionByIdOrgRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsGoogleAppsVersionByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsGoogleAppsVersion prefsGoogleAppsVersion = buildBodyParams();
            return updatePrefsGoogleAppsVersionByIdOrgCall(idOrg, prefsGoogleAppsVersion, _callback);
        }

        private PrefsGoogleAppsVersion buildBodyParams() {
            PrefsGoogleAppsVersion prefsGoogleAppsVersion = new PrefsGoogleAppsVersion();
            prefsGoogleAppsVersion.value(this.value);
            return prefsGoogleAppsVersion;
        }

        /**
         * Execute updatePrefsGoogleAppsVersionByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsGoogleAppsVersion prefsGoogleAppsVersion = buildBodyParams();
            updatePrefsGoogleAppsVersionByIdOrgWithHttpInfo(idOrg, prefsGoogleAppsVersion);
        }

        /**
         * Execute updatePrefsGoogleAppsVersionByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsGoogleAppsVersion prefsGoogleAppsVersion = buildBodyParams();
            return updatePrefsGoogleAppsVersionByIdOrgWithHttpInfo(idOrg, prefsGoogleAppsVersion);
        }

        /**
         * Execute updatePrefsGoogleAppsVersionByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsGoogleAppsVersion prefsGoogleAppsVersion = buildBodyParams();
            return updatePrefsGoogleAppsVersionByIdOrgAsync(idOrg, prefsGoogleAppsVersion, _callback);
        }
    }

    /**
     * updateOrganizationsPrefsGoogleAppsVersionByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param prefsGoogleAppsVersion Attributes of \&quot;Prefs Google Apps Version\&quot; to be updated. (required)
     * @return UpdatePrefsGoogleAppsVersionByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsGoogleAppsVersionByIdOrgRequestBuilder updatePrefsGoogleAppsVersionByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdatePrefsGoogleAppsVersionByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updatePrefsOrgInviteRestrictByIdOrgCall(String idOrg, PrefsOrgInviteRestrict prefsOrgInviteRestrict, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsOrgInviteRestrict;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/prefs/orgInviteRestrict"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsOrgInviteRestrictByIdOrgValidateBeforeCall(String idOrg, PrefsOrgInviteRestrict prefsOrgInviteRestrict, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updatePrefsOrgInviteRestrictByIdOrg(Async)");
        }

        // verify the required parameter 'prefsOrgInviteRestrict' is set
        if (prefsOrgInviteRestrict == null) {
            throw new ApiException("Missing the required parameter 'prefsOrgInviteRestrict' when calling updatePrefsOrgInviteRestrictByIdOrg(Async)");
        }

        return updatePrefsOrgInviteRestrictByIdOrgCall(idOrg, prefsOrgInviteRestrict, _callback);

    }


    private ApiResponse<Void> updatePrefsOrgInviteRestrictByIdOrgWithHttpInfo(String idOrg, PrefsOrgInviteRestrict prefsOrgInviteRestrict) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsOrgInviteRestrictByIdOrgValidateBeforeCall(idOrg, prefsOrgInviteRestrict, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsOrgInviteRestrictByIdOrgAsync(String idOrg, PrefsOrgInviteRestrict prefsOrgInviteRestrict, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsOrgInviteRestrictByIdOrgValidateBeforeCall(idOrg, prefsOrgInviteRestrict, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsOrgInviteRestrictByIdOrgRequestBuilder {
        private final String idOrg;
        private String value;

        private UpdatePrefsOrgInviteRestrictByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set value
         * @param value An email address with optional expansion tokens (optional)
         * @return UpdatePrefsOrgInviteRestrictByIdOrgRequestBuilder
         */
        public UpdatePrefsOrgInviteRestrictByIdOrgRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsOrgInviteRestrictByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsOrgInviteRestrict prefsOrgInviteRestrict = buildBodyParams();
            return updatePrefsOrgInviteRestrictByIdOrgCall(idOrg, prefsOrgInviteRestrict, _callback);
        }

        private PrefsOrgInviteRestrict buildBodyParams() {
            PrefsOrgInviteRestrict prefsOrgInviteRestrict = new PrefsOrgInviteRestrict();
            prefsOrgInviteRestrict.value(this.value);
            return prefsOrgInviteRestrict;
        }

        /**
         * Execute updatePrefsOrgInviteRestrictByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsOrgInviteRestrict prefsOrgInviteRestrict = buildBodyParams();
            updatePrefsOrgInviteRestrictByIdOrgWithHttpInfo(idOrg, prefsOrgInviteRestrict);
        }

        /**
         * Execute updatePrefsOrgInviteRestrictByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsOrgInviteRestrict prefsOrgInviteRestrict = buildBodyParams();
            return updatePrefsOrgInviteRestrictByIdOrgWithHttpInfo(idOrg, prefsOrgInviteRestrict);
        }

        /**
         * Execute updatePrefsOrgInviteRestrictByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsOrgInviteRestrict prefsOrgInviteRestrict = buildBodyParams();
            return updatePrefsOrgInviteRestrictByIdOrgAsync(idOrg, prefsOrgInviteRestrict, _callback);
        }
    }

    /**
     * updateOrganizationsPrefsOrgInviteRestrictByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param prefsOrgInviteRestrict Attributes of \&quot;Prefs Org Invite Restrict\&quot; to be updated. (required)
     * @return UpdatePrefsOrgInviteRestrictByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsOrgInviteRestrictByIdOrgRequestBuilder updatePrefsOrgInviteRestrictByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdatePrefsOrgInviteRestrictByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updatePrefsPermissionLevelByIdOrgCall(String idOrg, PrefsPermissionLevel prefsPermissionLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsPermissionLevel;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/prefs/permissionLevel"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsPermissionLevelByIdOrgValidateBeforeCall(String idOrg, PrefsPermissionLevel prefsPermissionLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updatePrefsPermissionLevelByIdOrg(Async)");
        }

        // verify the required parameter 'prefsPermissionLevel' is set
        if (prefsPermissionLevel == null) {
            throw new ApiException("Missing the required parameter 'prefsPermissionLevel' when calling updatePrefsPermissionLevelByIdOrg(Async)");
        }

        return updatePrefsPermissionLevelByIdOrgCall(idOrg, prefsPermissionLevel, _callback);

    }


    private ApiResponse<Void> updatePrefsPermissionLevelByIdOrgWithHttpInfo(String idOrg, PrefsPermissionLevel prefsPermissionLevel) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsPermissionLevelByIdOrgValidateBeforeCall(idOrg, prefsPermissionLevel, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsPermissionLevelByIdOrgAsync(String idOrg, PrefsPermissionLevel prefsPermissionLevel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsPermissionLevelByIdOrgValidateBeforeCall(idOrg, prefsPermissionLevel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsPermissionLevelByIdOrgRequestBuilder {
        private final String idOrg;
        private String value;

        private UpdatePrefsPermissionLevelByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set value
         * @param value One of: private or public (optional)
         * @return UpdatePrefsPermissionLevelByIdOrgRequestBuilder
         */
        public UpdatePrefsPermissionLevelByIdOrgRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsPermissionLevelByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsPermissionLevel prefsPermissionLevel = buildBodyParams();
            return updatePrefsPermissionLevelByIdOrgCall(idOrg, prefsPermissionLevel, _callback);
        }

        private PrefsPermissionLevel buildBodyParams() {
            PrefsPermissionLevel prefsPermissionLevel = new PrefsPermissionLevel();
            prefsPermissionLevel.value(this.value);
            return prefsPermissionLevel;
        }

        /**
         * Execute updatePrefsPermissionLevelByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsPermissionLevel prefsPermissionLevel = buildBodyParams();
            updatePrefsPermissionLevelByIdOrgWithHttpInfo(idOrg, prefsPermissionLevel);
        }

        /**
         * Execute updatePrefsPermissionLevelByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsPermissionLevel prefsPermissionLevel = buildBodyParams();
            return updatePrefsPermissionLevelByIdOrgWithHttpInfo(idOrg, prefsPermissionLevel);
        }

        /**
         * Execute updatePrefsPermissionLevelByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsPermissionLevel prefsPermissionLevel = buildBodyParams();
            return updatePrefsPermissionLevelByIdOrgAsync(idOrg, prefsPermissionLevel, _callback);
        }
    }

    /**
     * updateOrganizationsPrefsPermissionLevelByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param prefsPermissionLevel Attributes of \&quot;Prefs Permission Level\&quot; to be updated. (required)
     * @return UpdatePrefsPermissionLevelByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsPermissionLevelByIdOrgRequestBuilder updatePrefsPermissionLevelByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdatePrefsPermissionLevelByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updatePrefsVisibilityByIdOrgCall(String idOrg, PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsBoardVisibilityRestrict;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/prefs/boardVisibilityRestrict/private"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsVisibilityByIdOrgValidateBeforeCall(String idOrg, PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updatePrefsVisibilityByIdOrg(Async)");
        }

        // verify the required parameter 'prefsBoardVisibilityRestrict' is set
        if (prefsBoardVisibilityRestrict == null) {
            throw new ApiException("Missing the required parameter 'prefsBoardVisibilityRestrict' when calling updatePrefsVisibilityByIdOrg(Async)");
        }

        return updatePrefsVisibilityByIdOrgCall(idOrg, prefsBoardVisibilityRestrict, _callback);

    }


    private ApiResponse<Void> updatePrefsVisibilityByIdOrgWithHttpInfo(String idOrg, PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsVisibilityByIdOrgValidateBeforeCall(idOrg, prefsBoardVisibilityRestrict, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsVisibilityByIdOrgAsync(String idOrg, PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsVisibilityByIdOrgValidateBeforeCall(idOrg, prefsBoardVisibilityRestrict, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsVisibilityByIdOrgRequestBuilder {
        private final String idOrg;
        private String value;

        private UpdatePrefsVisibilityByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set value
         * @param value One of: admin, none or org (optional)
         * @return UpdatePrefsVisibilityByIdOrgRequestBuilder
         */
        public UpdatePrefsVisibilityByIdOrgRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsVisibilityByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = buildBodyParams();
            return updatePrefsVisibilityByIdOrgCall(idOrg, prefsBoardVisibilityRestrict, _callback);
        }

        private PrefsBoardVisibilityRestrict buildBodyParams() {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = new PrefsBoardVisibilityRestrict();
            prefsBoardVisibilityRestrict.value(this.value);
            return prefsBoardVisibilityRestrict;
        }

        /**
         * Execute updatePrefsVisibilityByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = buildBodyParams();
            updatePrefsVisibilityByIdOrgWithHttpInfo(idOrg, prefsBoardVisibilityRestrict);
        }

        /**
         * Execute updatePrefsVisibilityByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = buildBodyParams();
            return updatePrefsVisibilityByIdOrgWithHttpInfo(idOrg, prefsBoardVisibilityRestrict);
        }

        /**
         * Execute updatePrefsVisibilityByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsBoardVisibilityRestrict prefsBoardVisibilityRestrict = buildBodyParams();
            return updatePrefsVisibilityByIdOrgAsync(idOrg, prefsBoardVisibilityRestrict, _callback);
        }
    }

    /**
     * updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param prefsBoardVisibilityRestrict Attributes of \&quot;Prefs Board Visibility Restrict\&quot; to be updated. (required)
     * @return UpdatePrefsVisibilityByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsVisibilityByIdOrgRequestBuilder updatePrefsVisibilityByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdatePrefsVisibilityByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call updateWebsiteByIdOrgCall(String idOrg, OrganizationsWebsite organizationsWebsite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationsWebsite;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/website"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebsiteByIdOrgValidateBeforeCall(String idOrg, OrganizationsWebsite organizationsWebsite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling updateWebsiteByIdOrg(Async)");
        }

        // verify the required parameter 'organizationsWebsite' is set
        if (organizationsWebsite == null) {
            throw new ApiException("Missing the required parameter 'organizationsWebsite' when calling updateWebsiteByIdOrg(Async)");
        }

        return updateWebsiteByIdOrgCall(idOrg, organizationsWebsite, _callback);

    }


    private ApiResponse<Void> updateWebsiteByIdOrgWithHttpInfo(String idOrg, OrganizationsWebsite organizationsWebsite) throws ApiException {
        okhttp3.Call localVarCall = updateWebsiteByIdOrgValidateBeforeCall(idOrg, organizationsWebsite, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateWebsiteByIdOrgAsync(String idOrg, OrganizationsWebsite organizationsWebsite, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebsiteByIdOrgValidateBeforeCall(idOrg, organizationsWebsite, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateWebsiteByIdOrgRequestBuilder {
        private final String idOrg;
        private String value;

        private UpdateWebsiteByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set value
         * @param value A URL starting with http:// or https:// or null (optional)
         * @return UpdateWebsiteByIdOrgRequestBuilder
         */
        public UpdateWebsiteByIdOrgRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateWebsiteByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrganizationsWebsite organizationsWebsite = buildBodyParams();
            return updateWebsiteByIdOrgCall(idOrg, organizationsWebsite, _callback);
        }

        private OrganizationsWebsite buildBodyParams() {
            OrganizationsWebsite organizationsWebsite = new OrganizationsWebsite();
            organizationsWebsite.value(this.value);
            return organizationsWebsite;
        }

        /**
         * Execute updateWebsiteByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            OrganizationsWebsite organizationsWebsite = buildBodyParams();
            updateWebsiteByIdOrgWithHttpInfo(idOrg, organizationsWebsite);
        }

        /**
         * Execute updateWebsiteByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            OrganizationsWebsite organizationsWebsite = buildBodyParams();
            return updateWebsiteByIdOrgWithHttpInfo(idOrg, organizationsWebsite);
        }

        /**
         * Execute updateWebsiteByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            OrganizationsWebsite organizationsWebsite = buildBodyParams();
            return updateWebsiteByIdOrgAsync(idOrg, organizationsWebsite, _callback);
        }
    }

    /**
     * updateOrganizationsWebsiteByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param organizationsWebsite Attributes of \&quot;Organizations Website\&quot; to be updated. (required)
     * @return UpdateWebsiteByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWebsiteByIdOrgRequestBuilder updateWebsiteByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UpdateWebsiteByIdOrgRequestBuilder(idOrg);
    }
    private okhttp3.Call uploadLogoByIdOrgCall(String idOrg, OrganizationsLogo organizationsLogo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationsLogo;

        // create path and map variables
        String localVarPath = "/organizations/{idOrg}/logo"
            .replace("{" + "idOrg" + "}", localVarApiClient.escapeString(idOrg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadLogoByIdOrgValidateBeforeCall(String idOrg, OrganizationsLogo organizationsLogo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idOrg' is set
        if (idOrg == null) {
            throw new ApiException("Missing the required parameter 'idOrg' when calling uploadLogoByIdOrg(Async)");
        }

        // verify the required parameter 'organizationsLogo' is set
        if (organizationsLogo == null) {
            throw new ApiException("Missing the required parameter 'organizationsLogo' when calling uploadLogoByIdOrg(Async)");
        }

        return uploadLogoByIdOrgCall(idOrg, organizationsLogo, _callback);

    }


    private ApiResponse<Void> uploadLogoByIdOrgWithHttpInfo(String idOrg, OrganizationsLogo organizationsLogo) throws ApiException {
        okhttp3.Call localVarCall = uploadLogoByIdOrgValidateBeforeCall(idOrg, organizationsLogo, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call uploadLogoByIdOrgAsync(String idOrg, OrganizationsLogo organizationsLogo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadLogoByIdOrgValidateBeforeCall(idOrg, organizationsLogo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UploadLogoByIdOrgRequestBuilder {
        private final String idOrg;
        private String _file;

        private UploadLogoByIdOrgRequestBuilder(String idOrg) {
            this.idOrg = idOrg;
        }

        /**
         * Set _file
         * @param _file A file (optional)
         * @return UploadLogoByIdOrgRequestBuilder
         */
        public UploadLogoByIdOrgRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for uploadLogoByIdOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrganizationsLogo organizationsLogo = buildBodyParams();
            return uploadLogoByIdOrgCall(idOrg, organizationsLogo, _callback);
        }

        private OrganizationsLogo buildBodyParams() {
            OrganizationsLogo organizationsLogo = new OrganizationsLogo();
            organizationsLogo._file(this._file);
            return organizationsLogo;
        }

        /**
         * Execute uploadLogoByIdOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            OrganizationsLogo organizationsLogo = buildBodyParams();
            uploadLogoByIdOrgWithHttpInfo(idOrg, organizationsLogo);
        }

        /**
         * Execute uploadLogoByIdOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            OrganizationsLogo organizationsLogo = buildBodyParams();
            return uploadLogoByIdOrgWithHttpInfo(idOrg, organizationsLogo);
        }

        /**
         * Execute uploadLogoByIdOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            OrganizationsLogo organizationsLogo = buildBodyParams();
            return uploadLogoByIdOrgAsync(idOrg, organizationsLogo, _callback);
        }
    }

    /**
     * addOrganizationsLogoByIdOrg()
     * 
     * @param idOrg idOrg or name (required)
     * @param organizationsLogo Attributes of \&quot;Organizations Logo\&quot; to be added. (required)
     * @return UploadLogoByIdOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UploadLogoByIdOrgRequestBuilder uploadLogoByIdOrg(String idOrg) throws IllegalArgumentException {
        if (idOrg == null) throw new IllegalArgumentException("\"idOrg\" is required but got null");
            

        return new UploadLogoByIdOrgRequestBuilder(idOrg);
    }
}
