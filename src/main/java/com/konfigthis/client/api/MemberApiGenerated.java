/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Members;
import com.konfigthis.client.model.MembersAvatar;
import com.konfigthis.client.model.MembersAvatarSource;
import com.konfigthis.client.model.MembersBio;
import com.konfigthis.client.model.MembersBoardBackgrounds;
import com.konfigthis.client.model.MembersBoardStars;
import com.konfigthis.client.model.MembersBoardStarsIdBoard;
import com.konfigthis.client.model.MembersBoardStarsPos;
import com.konfigthis.client.model.MembersCustomBoardBackgrounds;
import com.konfigthis.client.model.MembersCustomEmoji;
import com.konfigthis.client.model.MembersCustomStickers;
import com.konfigthis.client.model.MembersFullName;
import com.konfigthis.client.model.MembersInitials;
import com.konfigthis.client.model.MembersOneTimeMessagesDismissed;
import com.konfigthis.client.model.MembersSavedSearches;
import com.konfigthis.client.model.MembersSavedSearchesName;
import com.konfigthis.client.model.MembersSavedSearchesPos;
import com.konfigthis.client.model.MembersSavedSearchesQuery;
import com.konfigthis.client.model.MembersUsername;
import com.konfigthis.client.model.PrefsColorBlind;
import com.konfigthis.client.model.PrefsLocale;
import com.konfigthis.client.model.PrefsMinutesBetweenSummaries;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MemberApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MemberApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MemberApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addBoardBackgroundsCall(String idMember, MembersBoardBackgrounds membersBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBoardBackgrounds;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardBackgrounds"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBoardBackgroundsValidateBeforeCall(String idMember, MembersBoardBackgrounds membersBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addBoardBackgrounds(Async)");
        }

        // verify the required parameter 'membersBoardBackgrounds' is set
        if (membersBoardBackgrounds == null) {
            throw new ApiException("Missing the required parameter 'membersBoardBackgrounds' when calling addBoardBackgrounds(Async)");
        }

        return addBoardBackgroundsCall(idMember, membersBoardBackgrounds, _callback);

    }


    private ApiResponse<Void> addBoardBackgroundsWithHttpInfo(String idMember, MembersBoardBackgrounds membersBoardBackgrounds) throws ApiException {
        okhttp3.Call localVarCall = addBoardBackgroundsValidateBeforeCall(idMember, membersBoardBackgrounds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addBoardBackgroundsAsync(String idMember, MembersBoardBackgrounds membersBoardBackgrounds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBoardBackgroundsValidateBeforeCall(idMember, membersBoardBackgrounds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddBoardBackgroundsRequestBuilder {
        private final String idMember;
        private String brightness;
        private String _file;
        private String tile;

        private AddBoardBackgroundsRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set brightness
         * @param brightness One of: dark, light or unknown (optional)
         * @return AddBoardBackgroundsRequestBuilder
         */
        public AddBoardBackgroundsRequestBuilder brightness(String brightness) {
            this.brightness = brightness;
            return this;
        }
        
        /**
         * Set _file
         * @param _file A file (optional)
         * @return AddBoardBackgroundsRequestBuilder
         */
        public AddBoardBackgroundsRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set tile
         * @param tile  true or false (optional)
         * @return AddBoardBackgroundsRequestBuilder
         */
        public AddBoardBackgroundsRequestBuilder tile(String tile) {
            this.tile = tile;
            return this;
        }
        
        /**
         * Build call for addBoardBackgrounds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersBoardBackgrounds membersBoardBackgrounds = buildBodyParams();
            return addBoardBackgroundsCall(idMember, membersBoardBackgrounds, _callback);
        }

        private MembersBoardBackgrounds buildBodyParams() {
            MembersBoardBackgrounds membersBoardBackgrounds = new MembersBoardBackgrounds();
            membersBoardBackgrounds.brightness(this.brightness);
            membersBoardBackgrounds._file(this._file);
            membersBoardBackgrounds.tile(this.tile);
            return membersBoardBackgrounds;
        }

        /**
         * Execute addBoardBackgrounds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersBoardBackgrounds membersBoardBackgrounds = buildBodyParams();
            addBoardBackgroundsWithHttpInfo(idMember, membersBoardBackgrounds);
        }

        /**
         * Execute addBoardBackgrounds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersBoardBackgrounds membersBoardBackgrounds = buildBodyParams();
            return addBoardBackgroundsWithHttpInfo(idMember, membersBoardBackgrounds);
        }

        /**
         * Execute addBoardBackgrounds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersBoardBackgrounds membersBoardBackgrounds = buildBodyParams();
            return addBoardBackgroundsAsync(idMember, membersBoardBackgrounds, _callback);
        }
    }

    /**
     * addMembersBoardBackgroundsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersBoardBackgrounds Attributes of \&quot;Members Board Backgrounds\&quot; to be added. (required)
     * @return AddBoardBackgroundsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddBoardBackgroundsRequestBuilder addBoardBackgrounds(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new AddBoardBackgroundsRequestBuilder(idMember);
    }
    private okhttp3.Call addBoardStarsByIdMemberCall(String idMember, MembersBoardStars membersBoardStars, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBoardStars;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBoardStarsByIdMemberValidateBeforeCall(String idMember, MembersBoardStars membersBoardStars, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addBoardStarsByIdMember(Async)");
        }

        // verify the required parameter 'membersBoardStars' is set
        if (membersBoardStars == null) {
            throw new ApiException("Missing the required parameter 'membersBoardStars' when calling addBoardStarsByIdMember(Async)");
        }

        return addBoardStarsByIdMemberCall(idMember, membersBoardStars, _callback);

    }


    private ApiResponse<Void> addBoardStarsByIdMemberWithHttpInfo(String idMember, MembersBoardStars membersBoardStars) throws ApiException {
        okhttp3.Call localVarCall = addBoardStarsByIdMemberValidateBeforeCall(idMember, membersBoardStars, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addBoardStarsByIdMemberAsync(String idMember, MembersBoardStars membersBoardStars, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBoardStarsByIdMemberValidateBeforeCall(idMember, membersBoardStars, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddBoardStarsByIdMemberRequestBuilder {
        private final String idMember;
        private String idBoard;
        private String pos;

        private AddBoardStarsByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set idBoard
         * @param idBoard The id of the board to star (optional)
         * @return AddBoardStarsByIdMemberRequestBuilder
         */
        public AddBoardStarsByIdMemberRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return AddBoardStarsByIdMemberRequestBuilder
         */
        public AddBoardStarsByIdMemberRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Build call for addBoardStarsByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersBoardStars membersBoardStars = buildBodyParams();
            return addBoardStarsByIdMemberCall(idMember, membersBoardStars, _callback);
        }

        private MembersBoardStars buildBodyParams() {
            MembersBoardStars membersBoardStars = new MembersBoardStars();
            membersBoardStars.idBoard(this.idBoard);
            membersBoardStars.pos(this.pos);
            return membersBoardStars;
        }

        /**
         * Execute addBoardStarsByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersBoardStars membersBoardStars = buildBodyParams();
            addBoardStarsByIdMemberWithHttpInfo(idMember, membersBoardStars);
        }

        /**
         * Execute addBoardStarsByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersBoardStars membersBoardStars = buildBodyParams();
            return addBoardStarsByIdMemberWithHttpInfo(idMember, membersBoardStars);
        }

        /**
         * Execute addBoardStarsByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersBoardStars membersBoardStars = buildBodyParams();
            return addBoardStarsByIdMemberAsync(idMember, membersBoardStars, _callback);
        }
    }

    /**
     * addMembersBoardStarsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersBoardStars Attributes of \&quot;Members Board Stars\&quot; to be added. (required)
     * @return AddBoardStarsByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddBoardStarsByIdMemberRequestBuilder addBoardStarsByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new AddBoardStarsByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call addCustomBoardBackgroundsCall(String idMember, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersCustomBoardBackgrounds;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customBoardBackgrounds"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomBoardBackgroundsValidateBeforeCall(String idMember, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addCustomBoardBackgrounds(Async)");
        }

        // verify the required parameter 'membersCustomBoardBackgrounds' is set
        if (membersCustomBoardBackgrounds == null) {
            throw new ApiException("Missing the required parameter 'membersCustomBoardBackgrounds' when calling addCustomBoardBackgrounds(Async)");
        }

        return addCustomBoardBackgroundsCall(idMember, membersCustomBoardBackgrounds, _callback);

    }


    private ApiResponse<Void> addCustomBoardBackgroundsWithHttpInfo(String idMember, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds) throws ApiException {
        okhttp3.Call localVarCall = addCustomBoardBackgroundsValidateBeforeCall(idMember, membersCustomBoardBackgrounds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addCustomBoardBackgroundsAsync(String idMember, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomBoardBackgroundsValidateBeforeCall(idMember, membersCustomBoardBackgrounds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddCustomBoardBackgroundsRequestBuilder {
        private final String idMember;
        private String brightness;
        private String _file;
        private String tile;

        private AddCustomBoardBackgroundsRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set brightness
         * @param brightness One of: dark, light or unknown (optional)
         * @return AddCustomBoardBackgroundsRequestBuilder
         */
        public AddCustomBoardBackgroundsRequestBuilder brightness(String brightness) {
            this.brightness = brightness;
            return this;
        }
        
        /**
         * Set _file
         * @param _file A file (optional)
         * @return AddCustomBoardBackgroundsRequestBuilder
         */
        public AddCustomBoardBackgroundsRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set tile
         * @param tile  true or false (optional)
         * @return AddCustomBoardBackgroundsRequestBuilder
         */
        public AddCustomBoardBackgroundsRequestBuilder tile(String tile) {
            this.tile = tile;
            return this;
        }
        
        /**
         * Build call for addCustomBoardBackgrounds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersCustomBoardBackgrounds membersCustomBoardBackgrounds = buildBodyParams();
            return addCustomBoardBackgroundsCall(idMember, membersCustomBoardBackgrounds, _callback);
        }

        private MembersCustomBoardBackgrounds buildBodyParams() {
            MembersCustomBoardBackgrounds membersCustomBoardBackgrounds = new MembersCustomBoardBackgrounds();
            membersCustomBoardBackgrounds.brightness(this.brightness);
            membersCustomBoardBackgrounds._file(this._file);
            membersCustomBoardBackgrounds.tile(this.tile);
            return membersCustomBoardBackgrounds;
        }

        /**
         * Execute addCustomBoardBackgrounds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersCustomBoardBackgrounds membersCustomBoardBackgrounds = buildBodyParams();
            addCustomBoardBackgroundsWithHttpInfo(idMember, membersCustomBoardBackgrounds);
        }

        /**
         * Execute addCustomBoardBackgrounds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersCustomBoardBackgrounds membersCustomBoardBackgrounds = buildBodyParams();
            return addCustomBoardBackgroundsWithHttpInfo(idMember, membersCustomBoardBackgrounds);
        }

        /**
         * Execute addCustomBoardBackgrounds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersCustomBoardBackgrounds membersCustomBoardBackgrounds = buildBodyParams();
            return addCustomBoardBackgroundsAsync(idMember, membersCustomBoardBackgrounds, _callback);
        }
    }

    /**
     * addMembersCustomBoardBackgroundsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersCustomBoardBackgrounds Attributes of \&quot;Members Custom Board Backgrounds\&quot; to be added. (required)
     * @return AddCustomBoardBackgroundsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddCustomBoardBackgroundsRequestBuilder addCustomBoardBackgrounds(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new AddCustomBoardBackgroundsRequestBuilder(idMember);
    }
    private okhttp3.Call addCustomEmojiByIdMemberCall(String idMember, MembersCustomEmoji membersCustomEmoji, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersCustomEmoji;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customEmoji"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomEmojiByIdMemberValidateBeforeCall(String idMember, MembersCustomEmoji membersCustomEmoji, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addCustomEmojiByIdMember(Async)");
        }

        // verify the required parameter 'membersCustomEmoji' is set
        if (membersCustomEmoji == null) {
            throw new ApiException("Missing the required parameter 'membersCustomEmoji' when calling addCustomEmojiByIdMember(Async)");
        }

        return addCustomEmojiByIdMemberCall(idMember, membersCustomEmoji, _callback);

    }


    private ApiResponse<Void> addCustomEmojiByIdMemberWithHttpInfo(String idMember, MembersCustomEmoji membersCustomEmoji) throws ApiException {
        okhttp3.Call localVarCall = addCustomEmojiByIdMemberValidateBeforeCall(idMember, membersCustomEmoji, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addCustomEmojiByIdMemberAsync(String idMember, MembersCustomEmoji membersCustomEmoji, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomEmojiByIdMemberValidateBeforeCall(idMember, membersCustomEmoji, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddCustomEmojiByIdMemberRequestBuilder {
        private final String idMember;
        private String _file;
        private String name;

        private AddCustomEmojiByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set _file
         * @param _file A file (optional)
         * @return AddCustomEmojiByIdMemberRequestBuilder
         */
        public AddCustomEmojiByIdMemberRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set name
         * @param name a string with a length from 2 to 64 (optional)
         * @return AddCustomEmojiByIdMemberRequestBuilder
         */
        public AddCustomEmojiByIdMemberRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for addCustomEmojiByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersCustomEmoji membersCustomEmoji = buildBodyParams();
            return addCustomEmojiByIdMemberCall(idMember, membersCustomEmoji, _callback);
        }

        private MembersCustomEmoji buildBodyParams() {
            MembersCustomEmoji membersCustomEmoji = new MembersCustomEmoji();
            membersCustomEmoji._file(this._file);
            membersCustomEmoji.name(this.name);
            return membersCustomEmoji;
        }

        /**
         * Execute addCustomEmojiByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersCustomEmoji membersCustomEmoji = buildBodyParams();
            addCustomEmojiByIdMemberWithHttpInfo(idMember, membersCustomEmoji);
        }

        /**
         * Execute addCustomEmojiByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersCustomEmoji membersCustomEmoji = buildBodyParams();
            return addCustomEmojiByIdMemberWithHttpInfo(idMember, membersCustomEmoji);
        }

        /**
         * Execute addCustomEmojiByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersCustomEmoji membersCustomEmoji = buildBodyParams();
            return addCustomEmojiByIdMemberAsync(idMember, membersCustomEmoji, _callback);
        }
    }

    /**
     * addMembersCustomEmojiByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersCustomEmoji Attributes of \&quot;Members Custom Emoji\&quot; to be added. (required)
     * @return AddCustomEmojiByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddCustomEmojiByIdMemberRequestBuilder addCustomEmojiByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new AddCustomEmojiByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call addCustomStickersCall(String idMember, MembersCustomStickers membersCustomStickers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersCustomStickers;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customStickers"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomStickersValidateBeforeCall(String idMember, MembersCustomStickers membersCustomStickers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addCustomStickers(Async)");
        }

        // verify the required parameter 'membersCustomStickers' is set
        if (membersCustomStickers == null) {
            throw new ApiException("Missing the required parameter 'membersCustomStickers' when calling addCustomStickers(Async)");
        }

        return addCustomStickersCall(idMember, membersCustomStickers, _callback);

    }


    private ApiResponse<Void> addCustomStickersWithHttpInfo(String idMember, MembersCustomStickers membersCustomStickers) throws ApiException {
        okhttp3.Call localVarCall = addCustomStickersValidateBeforeCall(idMember, membersCustomStickers, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addCustomStickersAsync(String idMember, MembersCustomStickers membersCustomStickers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomStickersValidateBeforeCall(idMember, membersCustomStickers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddCustomStickersRequestBuilder {
        private final String idMember;
        private String _file;

        private AddCustomStickersRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set _file
         * @param _file A file (optional)
         * @return AddCustomStickersRequestBuilder
         */
        public AddCustomStickersRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for addCustomStickers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersCustomStickers membersCustomStickers = buildBodyParams();
            return addCustomStickersCall(idMember, membersCustomStickers, _callback);
        }

        private MembersCustomStickers buildBodyParams() {
            MembersCustomStickers membersCustomStickers = new MembersCustomStickers();
            membersCustomStickers._file(this._file);
            return membersCustomStickers;
        }

        /**
         * Execute addCustomStickers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersCustomStickers membersCustomStickers = buildBodyParams();
            addCustomStickersWithHttpInfo(idMember, membersCustomStickers);
        }

        /**
         * Execute addCustomStickers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersCustomStickers membersCustomStickers = buildBodyParams();
            return addCustomStickersWithHttpInfo(idMember, membersCustomStickers);
        }

        /**
         * Execute addCustomStickers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersCustomStickers membersCustomStickers = buildBodyParams();
            return addCustomStickersAsync(idMember, membersCustomStickers, _callback);
        }
    }

    /**
     * addMembersCustomStickersByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersCustomStickers Attributes of \&quot;Members Custom Stickers\&quot; to be added. (required)
     * @return AddCustomStickersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddCustomStickersRequestBuilder addCustomStickers(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new AddCustomStickersRequestBuilder(idMember);
    }
    private okhttp3.Call addOneTimeMessagesDismissedByIdMemberCall(String idMember, MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersOneTimeMessagesDismissed;

        // create path and map variables
        String localVarPath = "/members/{idMember}/oneTimeMessagesDismissed"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOneTimeMessagesDismissedByIdMemberValidateBeforeCall(String idMember, MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addOneTimeMessagesDismissedByIdMember(Async)");
        }

        // verify the required parameter 'membersOneTimeMessagesDismissed' is set
        if (membersOneTimeMessagesDismissed == null) {
            throw new ApiException("Missing the required parameter 'membersOneTimeMessagesDismissed' when calling addOneTimeMessagesDismissedByIdMember(Async)");
        }

        return addOneTimeMessagesDismissedByIdMemberCall(idMember, membersOneTimeMessagesDismissed, _callback);

    }


    private ApiResponse<Void> addOneTimeMessagesDismissedByIdMemberWithHttpInfo(String idMember, MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed) throws ApiException {
        okhttp3.Call localVarCall = addOneTimeMessagesDismissedByIdMemberValidateBeforeCall(idMember, membersOneTimeMessagesDismissed, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addOneTimeMessagesDismissedByIdMemberAsync(String idMember, MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOneTimeMessagesDismissedByIdMemberValidateBeforeCall(idMember, membersOneTimeMessagesDismissed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddOneTimeMessagesDismissedByIdMemberRequestBuilder {
        private final String idMember;
        private String value;

        private AddOneTimeMessagesDismissedByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set value
         * @param value Type of message dismissed (optional)
         * @return AddOneTimeMessagesDismissedByIdMemberRequestBuilder
         */
        public AddOneTimeMessagesDismissedByIdMemberRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for addOneTimeMessagesDismissedByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed = buildBodyParams();
            return addOneTimeMessagesDismissedByIdMemberCall(idMember, membersOneTimeMessagesDismissed, _callback);
        }

        private MembersOneTimeMessagesDismissed buildBodyParams() {
            MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed = new MembersOneTimeMessagesDismissed();
            membersOneTimeMessagesDismissed.value(this.value);
            return membersOneTimeMessagesDismissed;
        }

        /**
         * Execute addOneTimeMessagesDismissedByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed = buildBodyParams();
            addOneTimeMessagesDismissedByIdMemberWithHttpInfo(idMember, membersOneTimeMessagesDismissed);
        }

        /**
         * Execute addOneTimeMessagesDismissedByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed = buildBodyParams();
            return addOneTimeMessagesDismissedByIdMemberWithHttpInfo(idMember, membersOneTimeMessagesDismissed);
        }

        /**
         * Execute addOneTimeMessagesDismissedByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed = buildBodyParams();
            return addOneTimeMessagesDismissedByIdMemberAsync(idMember, membersOneTimeMessagesDismissed, _callback);
        }
    }

    /**
     * addMembersOneTimeMessagesDismissedByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersOneTimeMessagesDismissed Attributes of \&quot;Members One Time Messages Dismissed\&quot; to be added. (required)
     * @return AddOneTimeMessagesDismissedByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public AddOneTimeMessagesDismissedByIdMemberRequestBuilder addOneTimeMessagesDismissedByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new AddOneTimeMessagesDismissedByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call createSavedSearchCall(String idMember, MembersSavedSearches membersSavedSearches, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersSavedSearches;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSavedSearchValidateBeforeCall(String idMember, MembersSavedSearches membersSavedSearches, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling createSavedSearch(Async)");
        }

        // verify the required parameter 'membersSavedSearches' is set
        if (membersSavedSearches == null) {
            throw new ApiException("Missing the required parameter 'membersSavedSearches' when calling createSavedSearch(Async)");
        }

        return createSavedSearchCall(idMember, membersSavedSearches, _callback);

    }


    private ApiResponse<Void> createSavedSearchWithHttpInfo(String idMember, MembersSavedSearches membersSavedSearches) throws ApiException {
        okhttp3.Call localVarCall = createSavedSearchValidateBeforeCall(idMember, membersSavedSearches, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createSavedSearchAsync(String idMember, MembersSavedSearches membersSavedSearches, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSavedSearchValidateBeforeCall(idMember, membersSavedSearches, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateSavedSearchRequestBuilder {
        private final String idMember;
        private String name;
        private String pos;
        private String query;

        private CreateSavedSearchRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set name
         * @param name A non-empty string with at least one non-space character (optional)
         * @return CreateSavedSearchRequestBuilder
         */
        public CreateSavedSearchRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return CreateSavedSearchRequestBuilder
         */
        public CreateSavedSearchRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Set query
         * @param query a string with a length from 1 to 16384 (optional)
         * @return CreateSavedSearchRequestBuilder
         */
        public CreateSavedSearchRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Build call for createSavedSearch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersSavedSearches membersSavedSearches = buildBodyParams();
            return createSavedSearchCall(idMember, membersSavedSearches, _callback);
        }

        private MembersSavedSearches buildBodyParams() {
            MembersSavedSearches membersSavedSearches = new MembersSavedSearches();
            membersSavedSearches.name(this.name);
            membersSavedSearches.pos(this.pos);
            membersSavedSearches.query(this.query);
            return membersSavedSearches;
        }

        /**
         * Execute createSavedSearch request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersSavedSearches membersSavedSearches = buildBodyParams();
            createSavedSearchWithHttpInfo(idMember, membersSavedSearches);
        }

        /**
         * Execute createSavedSearch request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersSavedSearches membersSavedSearches = buildBodyParams();
            return createSavedSearchWithHttpInfo(idMember, membersSavedSearches);
        }

        /**
         * Execute createSavedSearch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersSavedSearches membersSavedSearches = buildBodyParams();
            return createSavedSearchAsync(idMember, membersSavedSearches, _callback);
        }
    }

    /**
     * addMembersSavedSearchesByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersSavedSearches Attributes of \&quot;Members Saved Searches\&quot; to be added. (required)
     * @return CreateSavedSearchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public CreateSavedSearchRequestBuilder createSavedSearch(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new CreateSavedSearchRequestBuilder(idMember);
    }
    private okhttp3.Call deleteBoardBackgroundCall(String idMember, String idBoardBackground, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardBackgrounds/{idBoardBackground}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardBackground" + "}", localVarApiClient.escapeString(idBoardBackground.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBoardBackgroundValidateBeforeCall(String idMember, String idBoardBackground, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling deleteBoardBackground(Async)");
        }

        // verify the required parameter 'idBoardBackground' is set
        if (idBoardBackground == null) {
            throw new ApiException("Missing the required parameter 'idBoardBackground' when calling deleteBoardBackground(Async)");
        }

        return deleteBoardBackgroundCall(idMember, idBoardBackground, _callback);

    }


    private ApiResponse<Void> deleteBoardBackgroundWithHttpInfo(String idMember, String idBoardBackground) throws ApiException {
        okhttp3.Call localVarCall = deleteBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteBoardBackgroundAsync(String idMember, String idBoardBackground, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteBoardBackgroundRequestBuilder {
        private final String idMember;
        private final String idBoardBackground;

        private DeleteBoardBackgroundRequestBuilder(String idMember, String idBoardBackground) {
            this.idMember = idMember;
            this.idBoardBackground = idBoardBackground;
        }

        /**
         * Build call for deleteBoardBackground
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBoardBackgroundCall(idMember, idBoardBackground, _callback);
        }


        /**
         * Execute deleteBoardBackground request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteBoardBackgroundWithHttpInfo(idMember, idBoardBackground);
        }

        /**
         * Execute deleteBoardBackground request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteBoardBackgroundWithHttpInfo(idMember, idBoardBackground);
        }

        /**
         * Execute deleteBoardBackground request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteBoardBackgroundAsync(idMember, idBoardBackground, _callback);
        }
    }

    /**
     * deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @return DeleteBoardBackgroundRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBoardBackgroundRequestBuilder deleteBoardBackground(String idMember, String idBoardBackground) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idBoardBackground == null) throw new IllegalArgumentException("\"idBoardBackground\" is required but got null");
            

        return new DeleteBoardBackgroundRequestBuilder(idMember, idBoardBackground);
    }
    private okhttp3.Call getBoardBackgroundByIdsCall(String idMember, String idBoardBackground, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardBackgrounds/{idBoardBackground}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardBackground" + "}", localVarApiClient.escapeString(idBoardBackground.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardBackgroundByIdsValidateBeforeCall(String idMember, String idBoardBackground, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getBoardBackgroundByIds(Async)");
        }

        // verify the required parameter 'idBoardBackground' is set
        if (idBoardBackground == null) {
            throw new ApiException("Missing the required parameter 'idBoardBackground' when calling getBoardBackgroundByIds(Async)");
        }

        return getBoardBackgroundByIdsCall(idMember, idBoardBackground, fields, _callback);

    }


    private ApiResponse<Void> getBoardBackgroundByIdsWithHttpInfo(String idMember, String idBoardBackground, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBoardBackgroundByIdsValidateBeforeCall(idMember, idBoardBackground, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardBackgroundByIdsAsync(String idMember, String idBoardBackground, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardBackgroundByIdsValidateBeforeCall(idMember, idBoardBackground, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardBackgroundByIdsRequestBuilder {
        private final String idMember;
        private final String idBoardBackground;
        private String fields;

        private GetBoardBackgroundByIdsRequestBuilder(String idMember, String idBoardBackground) {
            this.idMember = idMember;
            this.idBoardBackground = idBoardBackground;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile (optional, default to all)
         * @return GetBoardBackgroundByIdsRequestBuilder
         */
        public GetBoardBackgroundByIdsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getBoardBackgroundByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardBackgroundByIdsCall(idMember, idBoardBackground, fields, _callback);
        }


        /**
         * Execute getBoardBackgroundByIds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardBackgroundByIdsWithHttpInfo(idMember, idBoardBackground, fields);
        }

        /**
         * Execute getBoardBackgroundByIds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardBackgroundByIdsWithHttpInfo(idMember, idBoardBackground, fields);
        }

        /**
         * Execute getBoardBackgroundByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardBackgroundByIdsAsync(idMember, idBoardBackground, fields, _callback);
        }
    }

    /**
     * getMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @return GetBoardBackgroundByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardBackgroundByIdsRequestBuilder getBoardBackgroundByIds(String idMember, String idBoardBackground) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idBoardBackground == null) throw new IllegalArgumentException("\"idBoardBackground\" is required but got null");
            

        return new GetBoardBackgroundByIdsRequestBuilder(idMember, idBoardBackground);
    }
    private okhttp3.Call getBoardBackgroundsByIdCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardBackgrounds"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardBackgroundsByIdValidateBeforeCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getBoardBackgroundsById(Async)");
        }

        return getBoardBackgroundsByIdCall(idMember, filter, _callback);

    }


    private ApiResponse<Void> getBoardBackgroundsByIdWithHttpInfo(String idMember, String filter) throws ApiException {
        okhttp3.Call localVarCall = getBoardBackgroundsByIdValidateBeforeCall(idMember, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardBackgroundsByIdAsync(String idMember, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardBackgroundsByIdValidateBeforeCall(idMember, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardBackgroundsByIdRequestBuilder {
        private final String idMember;
        private String filter;

        private GetBoardBackgroundsByIdRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set filter
         * @param filter One of: all, custom, default, none or premium (optional, default to all)
         * @return GetBoardBackgroundsByIdRequestBuilder
         */
        public GetBoardBackgroundsByIdRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getBoardBackgroundsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardBackgroundsByIdCall(idMember, filter, _callback);
        }


        /**
         * Execute getBoardBackgroundsById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardBackgroundsByIdWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getBoardBackgroundsById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardBackgroundsByIdWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getBoardBackgroundsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardBackgroundsByIdAsync(idMember, filter, _callback);
        }
    }

    /**
     * getMembersBoardBackgroundsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @return GetBoardBackgroundsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardBackgroundsByIdRequestBuilder getBoardBackgroundsById(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new GetBoardBackgroundsByIdRequestBuilder(idMember);
    }
    private okhttp3.Call getBoardStarByIdMemberCall(String idMember, String idBoardStar, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars/{idBoardStar}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardStar" + "}", localVarApiClient.escapeString(idBoardStar.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardStarByIdMemberValidateBeforeCall(String idMember, String idBoardStar, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getBoardStarByIdMember(Async)");
        }

        // verify the required parameter 'idBoardStar' is set
        if (idBoardStar == null) {
            throw new ApiException("Missing the required parameter 'idBoardStar' when calling getBoardStarByIdMember(Async)");
        }

        return getBoardStarByIdMemberCall(idMember, idBoardStar, _callback);

    }


    private ApiResponse<Void> getBoardStarByIdMemberWithHttpInfo(String idMember, String idBoardStar) throws ApiException {
        okhttp3.Call localVarCall = getBoardStarByIdMemberValidateBeforeCall(idMember, idBoardStar, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardStarByIdMemberAsync(String idMember, String idBoardStar, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardStarByIdMemberValidateBeforeCall(idMember, idBoardStar, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardStarByIdMemberRequestBuilder {
        private final String idMember;
        private final String idBoardStar;

        private GetBoardStarByIdMemberRequestBuilder(String idMember, String idBoardStar) {
            this.idMember = idMember;
            this.idBoardStar = idBoardStar;
        }

        /**
         * Build call for getBoardStarByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardStarByIdMemberCall(idMember, idBoardStar, _callback);
        }


        /**
         * Execute getBoardStarByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardStarByIdMemberWithHttpInfo(idMember, idBoardStar);
        }

        /**
         * Execute getBoardStarByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardStarByIdMemberWithHttpInfo(idMember, idBoardStar);
        }

        /**
         * Execute getBoardStarByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardStarByIdMemberAsync(idMember, idBoardStar, _callback);
        }
    }

    /**
     * getMembersBoardStarsByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @return GetBoardStarByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardStarByIdMemberRequestBuilder getBoardStarByIdMember(String idMember, String idBoardStar) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idBoardStar == null) throw new IllegalArgumentException("\"idBoardStar\" is required but got null");
            

        return new GetBoardStarByIdMemberRequestBuilder(idMember, idBoardStar);
    }
    private okhttp3.Call getBoardStarsByIdCall(String idMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardStarsByIdValidateBeforeCall(String idMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getBoardStarsById(Async)");
        }

        return getBoardStarsByIdCall(idMember, _callback);

    }


    private ApiResponse<Void> getBoardStarsByIdWithHttpInfo(String idMember) throws ApiException {
        okhttp3.Call localVarCall = getBoardStarsByIdValidateBeforeCall(idMember, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardStarsByIdAsync(String idMember, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardStarsByIdValidateBeforeCall(idMember, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardStarsByIdRequestBuilder {
        private final String idMember;

        private GetBoardStarsByIdRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Build call for getBoardStarsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardStarsByIdCall(idMember, _callback);
        }


        /**
         * Execute getBoardStarsById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardStarsByIdWithHttpInfo(idMember);
        }

        /**
         * Execute getBoardStarsById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardStarsByIdWithHttpInfo(idMember);
        }

        /**
         * Execute getBoardStarsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardStarsByIdAsync(idMember, _callback);
        }
    }

    /**
     * getMembersBoardStarsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @return GetBoardStarsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardStarsByIdRequestBuilder getBoardStarsById(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new GetBoardStarsByIdRequestBuilder(idMember);
    }
    private okhttp3.Call getBoardsCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boards/{filter}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsValidateBeforeCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getBoards(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getBoards(Async)");
        }

        return getBoardsCall(idMember, filter, _callback);

    }


    private ApiResponse<Void> getBoardsWithHttpInfo(String idMember, String filter) throws ApiException {
        okhttp3.Call localVarCall = getBoardsValidateBeforeCall(idMember, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardsAsync(String idMember, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsValidateBeforeCall(idMember, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardsRequestBuilder {
        private final String idMember;
        private final String filter;

        private GetBoardsRequestBuilder(String idMember, String filter) {
            this.idMember = idMember;
            this.filter = filter;
        }

        /**
         * Build call for getBoards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardsCall(idMember, filter, _callback);
        }


        /**
         * Execute getBoards request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardsWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getBoards request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardsWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getBoards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardsAsync(idMember, filter, _callback);
        }
    }

    /**
     * getMembersBoardsByIdMemberByFilter()
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @return GetBoardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardsRequestBuilder getBoards(String idMember, String filter) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new GetBoardsRequestBuilder(idMember, filter);
    }
    private okhttp3.Call getBoardsByIdMemberCall(String idMember, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boards"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (actionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_entities", actionsEntities));
        }

        if (actionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_limit", actionsLimit));
        }

        if (actionsFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_format", actionsFormat));
        }

        if (actionsSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_since", actionsSince));
        }

        if (actionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_fields", actionFields));
        }

        if (memberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships", memberships));
        }

        if (organization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
        }

        if (organizationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_fields", organizationFields));
        }

        if (lists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lists", lists));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsByIdMemberValidateBeforeCall(String idMember, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getBoardsByIdMember(Async)");
        }

        return getBoardsByIdMemberCall(idMember, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, _callback);

    }


    private ApiResponse<Void> getBoardsByIdMemberWithHttpInfo(String idMember, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists) throws ApiException {
        okhttp3.Call localVarCall = getBoardsByIdMemberValidateBeforeCall(idMember, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardsByIdMemberAsync(String idMember, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsByIdMemberValidateBeforeCall(idMember, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardsByIdMemberRequestBuilder {
        private final String idMember;
        private String filter;
        private String fields;
        private String actions;
        private String actionsEntities;
        private String actionsLimit;
        private String actionsFormat;
        private String actionsSince;
        private String actionFields;
        private String memberships;
        private String organization;
        private String organizationFields;
        private String lists;

        private GetBoardsByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set filter
         * @param filter all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional, default to all)
         * @return GetBoardsByIdMemberRequestBuilder
         */
        public GetBoardsByIdMemberRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
         * @return GetBoardsByIdMemberRequestBuilder
         */
        public GetBoardsByIdMemberRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetBoardsByIdMemberRequestBuilder
         */
        public GetBoardsByIdMemberRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set actionsEntities
         * @param actionsEntities  true or false (optional)
         * @return GetBoardsByIdMemberRequestBuilder
         */
        public GetBoardsByIdMemberRequestBuilder actionsEntities(String actionsEntities) {
            this.actionsEntities = actionsEntities;
            return this;
        }
        
        /**
         * Set actionsLimit
         * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
         * @return GetBoardsByIdMemberRequestBuilder
         */
        public GetBoardsByIdMemberRequestBuilder actionsLimit(String actionsLimit) {
            this.actionsLimit = actionsLimit;
            return this;
        }
        
        /**
         * Set actionsFormat
         * @param actionsFormat One of: count, list or minimal (optional, default to list)
         * @return GetBoardsByIdMemberRequestBuilder
         */
        public GetBoardsByIdMemberRequestBuilder actionsFormat(String actionsFormat) {
            this.actionsFormat = actionsFormat;
            return this;
        }
        
        /**
         * Set actionsSince
         * @param actionsSince A date, null or lastView (optional)
         * @return GetBoardsByIdMemberRequestBuilder
         */
        public GetBoardsByIdMemberRequestBuilder actionsSince(String actionsSince) {
            this.actionsSince = actionsSince;
            return this;
        }
        
        /**
         * Set actionFields
         * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return GetBoardsByIdMemberRequestBuilder
         */
        public GetBoardsByIdMemberRequestBuilder actionFields(String actionFields) {
            this.actionFields = actionFields;
            return this;
        }
        
        /**
         * Set memberships
         * @param memberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
         * @return GetBoardsByIdMemberRequestBuilder
         */
        public GetBoardsByIdMemberRequestBuilder memberships(String memberships) {
            this.memberships = memberships;
            return this;
        }
        
        /**
         * Set organization
         * @param organization  true or false (optional)
         * @return GetBoardsByIdMemberRequestBuilder
         */
        public GetBoardsByIdMemberRequestBuilder organization(String organization) {
            this.organization = organization;
            return this;
        }
        
        /**
         * Set organizationFields
         * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
         * @return GetBoardsByIdMemberRequestBuilder
         */
        public GetBoardsByIdMemberRequestBuilder organizationFields(String organizationFields) {
            this.organizationFields = organizationFields;
            return this;
        }
        
        /**
         * Set lists
         * @param lists One of: all, closed, none or open (optional, default to none)
         * @return GetBoardsByIdMemberRequestBuilder
         */
        public GetBoardsByIdMemberRequestBuilder lists(String lists) {
            this.lists = lists;
            return this;
        }
        
        /**
         * Build call for getBoardsByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardsByIdMemberCall(idMember, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, _callback);
        }


        /**
         * Execute getBoardsByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardsByIdMemberWithHttpInfo(idMember, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists);
        }

        /**
         * Execute getBoardsByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardsByIdMemberWithHttpInfo(idMember, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists);
        }

        /**
         * Execute getBoardsByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardsByIdMemberAsync(idMember, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, _callback);
        }
    }

    /**
     * getMembersBoardsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @return GetBoardsByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardsByIdMemberRequestBuilder getBoardsByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new GetBoardsByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call getBoardsInvitedByIdMemberByFieldCall(String idMember, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardsInvited/{field}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBoardsInvitedByIdMemberByFieldValidateBeforeCall(String idMember, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getBoardsInvitedByIdMemberByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getBoardsInvitedByIdMemberByField(Async)");
        }

        return getBoardsInvitedByIdMemberByFieldCall(idMember, field, _callback);

    }


    private ApiResponse<Void> getBoardsInvitedByIdMemberByFieldWithHttpInfo(String idMember, String field) throws ApiException {
        okhttp3.Call localVarCall = getBoardsInvitedByIdMemberByFieldValidateBeforeCall(idMember, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBoardsInvitedByIdMemberByFieldAsync(String idMember, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBoardsInvitedByIdMemberByFieldValidateBeforeCall(idMember, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBoardsInvitedByIdMemberByFieldRequestBuilder {
        private final String idMember;
        private final String field;

        private GetBoardsInvitedByIdMemberByFieldRequestBuilder(String idMember, String field) {
            this.idMember = idMember;
            this.field = field;
        }

        /**
         * Build call for getBoardsInvitedByIdMemberByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBoardsInvitedByIdMemberByFieldCall(idMember, field, _callback);
        }


        /**
         * Execute getBoardsInvitedByIdMemberByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBoardsInvitedByIdMemberByFieldWithHttpInfo(idMember, field);
        }

        /**
         * Execute getBoardsInvitedByIdMemberByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBoardsInvitedByIdMemberByFieldWithHttpInfo(idMember, field);
        }

        /**
         * Execute getBoardsInvitedByIdMemberByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBoardsInvitedByIdMemberByFieldAsync(idMember, field, _callback);
        }
    }

    /**
     * getMembersBoardsInvitedByIdMemberByField()
     * 
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @return GetBoardsInvitedByIdMemberByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetBoardsInvitedByIdMemberByFieldRequestBuilder getBoardsInvitedByIdMemberByField(String idMember, String field) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetBoardsInvitedByIdMemberByFieldRequestBuilder(idMember, field);
    }
    private okhttp3.Call getByFieldCall(String idMember, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/{field}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByFieldValidateBeforeCall(String idMember, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getByField(Async)");
        }

        return getByFieldCall(idMember, field, _callback);

    }


    private ApiResponse<Void> getByFieldWithHttpInfo(String idMember, String field) throws ApiException {
        okhttp3.Call localVarCall = getByFieldValidateBeforeCall(idMember, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByFieldAsync(String idMember, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByFieldValidateBeforeCall(idMember, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByFieldRequestBuilder {
        private final String idMember;
        private final String field;

        private GetByFieldRequestBuilder(String idMember, String field) {
            this.idMember = idMember;
            this.field = field;
        }

        /**
         * Build call for getByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByFieldCall(idMember, field, _callback);
        }


        /**
         * Execute getByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByFieldWithHttpInfo(idMember, field);
        }

        /**
         * Execute getByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByFieldWithHttpInfo(idMember, field);
        }

        /**
         * Execute getByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByFieldAsync(idMember, field, _callback);
        }
    }

    /**
     * getMembersByIdMemberByField()
     * 
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @return GetByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByFieldRequestBuilder getByField(String idMember, String field) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new GetByFieldRequestBuilder(idMember, field);
    }
    private okhttp3.Call getByIdCall(String idMember, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionSince, String actionBefore, String cards, String cardFields, String cardMembers, String cardMemberFields, String cardAttachments, String cardAttachmentFields, String cardStickers, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String boardMemberships, String boardOrganization, String boardOrganizationFields, String boardsInvited, String boardsInvitedFields, String boardStars, String savedSearches, String organizations, String organizationFields, String organizationPaidAccount, String organizationsInvited, String organizationsInvitedFields, String notifications, String notificationsEntities, String notificationsDisplay, String notificationsLimit, String notificationFields, String notificationMemberCreator, String notificationMemberCreatorFields, String notificationBefore, String notificationSince, String tokens, String paidAccount, String boardBackgrounds, String customBoardBackgrounds, String customStickers, String customEmoji, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (actionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_entities", actionsEntities));
        }

        if (actionsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_display", actionsDisplay));
        }

        if (actionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_limit", actionsLimit));
        }

        if (actionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_fields", actionFields));
        }

        if (actionSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_since", actionSince));
        }

        if (actionBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_before", actionBefore));
        }

        if (cards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards", cards));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (cardMembers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_members", cardMembers));
        }

        if (cardMemberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_member_fields", cardMemberFields));
        }

        if (cardAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_attachments", cardAttachments));
        }

        if (cardAttachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_attachment_fields", cardAttachmentFields));
        }

        if (cardStickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_stickers", cardStickers));
        }

        if (boards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boards", boards));
        }

        if (boardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_fields", boardFields));
        }

        if (boardActions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions", boardActions));
        }

        if (boardActionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_entities", boardActionsEntities));
        }

        if (boardActionsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_display", boardActionsDisplay));
        }

        if (boardActionsFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_format", boardActionsFormat));
        }

        if (boardActionsSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_since", boardActionsSince));
        }

        if (boardActionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_limit", boardActionsLimit));
        }

        if (boardActionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_action_fields", boardActionFields));
        }

        if (boardLists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_lists", boardLists));
        }

        if (boardMemberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_memberships", boardMemberships));
        }

        if (boardOrganization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_organization", boardOrganization));
        }

        if (boardOrganizationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_organization_fields", boardOrganizationFields));
        }

        if (boardsInvited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardsInvited", boardsInvited));
        }

        if (boardsInvitedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardsInvited_fields", boardsInvitedFields));
        }

        if (boardStars != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardStars", boardStars));
        }

        if (savedSearches != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("savedSearches", savedSearches));
        }

        if (organizations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizations", organizations));
        }

        if (organizationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_fields", organizationFields));
        }

        if (organizationPaidAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_paid_account", organizationPaidAccount));
        }

        if (organizationsInvited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationsInvited", organizationsInvited));
        }

        if (organizationsInvitedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationsInvited_fields", organizationsInvitedFields));
        }

        if (notifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notifications", notifications));
        }

        if (notificationsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notifications_entities", notificationsEntities));
        }

        if (notificationsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notifications_display", notificationsDisplay));
        }

        if (notificationsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notifications_limit", notificationsLimit));
        }

        if (notificationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification_fields", notificationFields));
        }

        if (notificationMemberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification_memberCreator", notificationMemberCreator));
        }

        if (notificationMemberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification_memberCreator_fields", notificationMemberCreatorFields));
        }

        if (notificationBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification_before", notificationBefore));
        }

        if (notificationSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification_since", notificationSince));
        }

        if (tokens != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokens", tokens));
        }

        if (paidAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paid_account", paidAccount));
        }

        if (boardBackgrounds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardBackgrounds", boardBackgrounds));
        }

        if (customBoardBackgrounds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customBoardBackgrounds", customBoardBackgrounds));
        }

        if (customStickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customStickers", customStickers));
        }

        if (customEmoji != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customEmoji", customEmoji));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String idMember, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionSince, String actionBefore, String cards, String cardFields, String cardMembers, String cardMemberFields, String cardAttachments, String cardAttachmentFields, String cardStickers, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String boardMemberships, String boardOrganization, String boardOrganizationFields, String boardsInvited, String boardsInvitedFields, String boardStars, String savedSearches, String organizations, String organizationFields, String organizationPaidAccount, String organizationsInvited, String organizationsInvitedFields, String notifications, String notificationsEntities, String notificationsDisplay, String notificationsLimit, String notificationFields, String notificationMemberCreator, String notificationMemberCreatorFields, String notificationBefore, String notificationSince, String tokens, String paidAccount, String boardBackgrounds, String customBoardBackgrounds, String customStickers, String customEmoji, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getById(Async)");
        }

        return getByIdCall(idMember, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionSince, actionBefore, cards, cardFields, cardMembers, cardMemberFields, cardAttachments, cardAttachmentFields, cardStickers, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, boardMemberships, boardOrganization, boardOrganizationFields, boardsInvited, boardsInvitedFields, boardStars, savedSearches, organizations, organizationFields, organizationPaidAccount, organizationsInvited, organizationsInvitedFields, notifications, notificationsEntities, notificationsDisplay, notificationsLimit, notificationFields, notificationMemberCreator, notificationMemberCreatorFields, notificationBefore, notificationSince, tokens, paidAccount, boardBackgrounds, customBoardBackgrounds, customStickers, customEmoji, fields, _callback);

    }


    private ApiResponse<Void> getByIdWithHttpInfo(String idMember, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionSince, String actionBefore, String cards, String cardFields, String cardMembers, String cardMemberFields, String cardAttachments, String cardAttachmentFields, String cardStickers, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String boardMemberships, String boardOrganization, String boardOrganizationFields, String boardsInvited, String boardsInvitedFields, String boardStars, String savedSearches, String organizations, String organizationFields, String organizationPaidAccount, String organizationsInvited, String organizationsInvitedFields, String notifications, String notificationsEntities, String notificationsDisplay, String notificationsLimit, String notificationFields, String notificationMemberCreator, String notificationMemberCreatorFields, String notificationBefore, String notificationSince, String tokens, String paidAccount, String boardBackgrounds, String customBoardBackgrounds, String customStickers, String customEmoji, String fields) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idMember, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionSince, actionBefore, cards, cardFields, cardMembers, cardMemberFields, cardAttachments, cardAttachmentFields, cardStickers, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, boardMemberships, boardOrganization, boardOrganizationFields, boardsInvited, boardsInvitedFields, boardStars, savedSearches, organizations, organizationFields, organizationPaidAccount, organizationsInvited, organizationsInvitedFields, notifications, notificationsEntities, notificationsDisplay, notificationsLimit, notificationFields, notificationMemberCreator, notificationMemberCreatorFields, notificationBefore, notificationSince, tokens, paidAccount, boardBackgrounds, customBoardBackgrounds, customStickers, customEmoji, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByIdAsync(String idMember, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionSince, String actionBefore, String cards, String cardFields, String cardMembers, String cardMemberFields, String cardAttachments, String cardAttachmentFields, String cardStickers, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String boardMemberships, String boardOrganization, String boardOrganizationFields, String boardsInvited, String boardsInvitedFields, String boardStars, String savedSearches, String organizations, String organizationFields, String organizationPaidAccount, String organizationsInvited, String organizationsInvitedFields, String notifications, String notificationsEntities, String notificationsDisplay, String notificationsLimit, String notificationFields, String notificationMemberCreator, String notificationMemberCreatorFields, String notificationBefore, String notificationSince, String tokens, String paidAccount, String boardBackgrounds, String customBoardBackgrounds, String customStickers, String customEmoji, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(idMember, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionSince, actionBefore, cards, cardFields, cardMembers, cardMemberFields, cardAttachments, cardAttachmentFields, cardStickers, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, boardMemberships, boardOrganization, boardOrganizationFields, boardsInvited, boardsInvitedFields, boardStars, savedSearches, organizations, organizationFields, organizationPaidAccount, organizationsInvited, organizationsInvitedFields, notifications, notificationsEntities, notificationsDisplay, notificationsLimit, notificationFields, notificationMemberCreator, notificationMemberCreatorFields, notificationBefore, notificationSince, tokens, paidAccount, boardBackgrounds, customBoardBackgrounds, customStickers, customEmoji, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String idMember;
        private String actions;
        private String actionsEntities;
        private String actionsDisplay;
        private String actionsLimit;
        private String actionFields;
        private String actionSince;
        private String actionBefore;
        private String cards;
        private String cardFields;
        private String cardMembers;
        private String cardMemberFields;
        private String cardAttachments;
        private String cardAttachmentFields;
        private String cardStickers;
        private String boards;
        private String boardFields;
        private String boardActions;
        private String boardActionsEntities;
        private String boardActionsDisplay;
        private String boardActionsFormat;
        private String boardActionsSince;
        private String boardActionsLimit;
        private String boardActionFields;
        private String boardLists;
        private String boardMemberships;
        private String boardOrganization;
        private String boardOrganizationFields;
        private String boardsInvited;
        private String boardsInvitedFields;
        private String boardStars;
        private String savedSearches;
        private String organizations;
        private String organizationFields;
        private String organizationPaidAccount;
        private String organizationsInvited;
        private String organizationsInvitedFields;
        private String notifications;
        private String notificationsEntities;
        private String notificationsDisplay;
        private String notificationsLimit;
        private String notificationFields;
        private String notificationMemberCreator;
        private String notificationMemberCreatorFields;
        private String notificationBefore;
        private String notificationSince;
        private String tokens;
        private String paidAccount;
        private String boardBackgrounds;
        private String customBoardBackgrounds;
        private String customStickers;
        private String customEmoji;
        private String fields;

        private GetByIdRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set actionsEntities
         * @param actionsEntities  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionsEntities(String actionsEntities) {
            this.actionsEntities = actionsEntities;
            return this;
        }
        
        /**
         * Set actionsDisplay
         * @param actionsDisplay  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionsDisplay(String actionsDisplay) {
            this.actionsDisplay = actionsDisplay;
            return this;
        }
        
        /**
         * Set actionsLimit
         * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionsLimit(String actionsLimit) {
            this.actionsLimit = actionsLimit;
            return this;
        }
        
        /**
         * Set actionFields
         * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionFields(String actionFields) {
            this.actionFields = actionFields;
            return this;
        }
        
        /**
         * Set actionSince
         * @param actionSince A date, null or lastView (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionSince(String actionSince) {
            this.actionSince = actionSince;
            return this;
        }
        
        /**
         * Set actionBefore
         * @param actionBefore A date, or null (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder actionBefore(String actionBefore) {
            this.actionBefore = actionBefore;
            return this;
        }
        
        /**
         * Set cards
         * @param cards One of: all, closed, none, open or visible (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cards(String cards) {
            this.cards = cards;
            return this;
        }
        
        /**
         * Set cardFields
         * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardFields(String cardFields) {
            this.cardFields = cardFields;
            return this;
        }
        
        /**
         * Set cardMembers
         * @param cardMembers  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardMembers(String cardMembers) {
            this.cardMembers = cardMembers;
            return this;
        }
        
        /**
         * Set cardMemberFields
         * @param cardMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardMemberFields(String cardMemberFields) {
            this.cardMemberFields = cardMemberFields;
            return this;
        }
        
        /**
         * Set cardAttachments
         * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardAttachments(String cardAttachments) {
            this.cardAttachments = cardAttachments;
            return this;
        }
        
        /**
         * Set cardAttachmentFields
         * @param cardAttachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to url and previews)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardAttachmentFields(String cardAttachmentFields) {
            this.cardAttachmentFields = cardAttachmentFields;
            return this;
        }
        
        /**
         * Set cardStickers
         * @param cardStickers  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder cardStickers(String cardStickers) {
            this.cardStickers = cardStickers;
            return this;
        }
        
        /**
         * Set boards
         * @param boards all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boards(String boards) {
            this.boards = boards;
            return this;
        }
        
        /**
         * Set boardFields
         * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, closed, idOrganization and pinned)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardFields(String boardFields) {
            this.boardFields = boardFields;
            return this;
        }
        
        /**
         * Set boardActions
         * @param boardActions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardActions(String boardActions) {
            this.boardActions = boardActions;
            return this;
        }
        
        /**
         * Set boardActionsEntities
         * @param boardActionsEntities  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardActionsEntities(String boardActionsEntities) {
            this.boardActionsEntities = boardActionsEntities;
            return this;
        }
        
        /**
         * Set boardActionsDisplay
         * @param boardActionsDisplay  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardActionsDisplay(String boardActionsDisplay) {
            this.boardActionsDisplay = boardActionsDisplay;
            return this;
        }
        
        /**
         * Set boardActionsFormat
         * @param boardActionsFormat One of: count, list or minimal (optional, default to list)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardActionsFormat(String boardActionsFormat) {
            this.boardActionsFormat = boardActionsFormat;
            return this;
        }
        
        /**
         * Set boardActionsSince
         * @param boardActionsSince A date, null or lastView (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardActionsSince(String boardActionsSince) {
            this.boardActionsSince = boardActionsSince;
            return this;
        }
        
        /**
         * Set boardActionsLimit
         * @param boardActionsLimit a number from 0 to 1000 (optional, default to 50)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardActionsLimit(String boardActionsLimit) {
            this.boardActionsLimit = boardActionsLimit;
            return this;
        }
        
        /**
         * Set boardActionFields
         * @param boardActionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardActionFields(String boardActionFields) {
            this.boardActionFields = boardActionFields;
            return this;
        }
        
        /**
         * Set boardLists
         * @param boardLists One of: all, closed, none or open (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardLists(String boardLists) {
            this.boardLists = boardLists;
            return this;
        }
        
        /**
         * Set boardMemberships
         * @param boardMemberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardMemberships(String boardMemberships) {
            this.boardMemberships = boardMemberships;
            return this;
        }
        
        /**
         * Set boardOrganization
         * @param boardOrganization  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardOrganization(String boardOrganization) {
            this.boardOrganization = boardOrganization;
            return this;
        }
        
        /**
         * Set boardOrganizationFields
         * @param boardOrganizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardOrganizationFields(String boardOrganizationFields) {
            this.boardOrganizationFields = boardOrganizationFields;
            return this;
        }
        
        /**
         * Set boardsInvited
         * @param boardsInvited all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardsInvited(String boardsInvited) {
            this.boardsInvited = boardsInvited;
            return this;
        }
        
        /**
         * Set boardsInvitedFields
         * @param boardsInvitedFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, closed, idOrganization and pinned)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardsInvitedFields(String boardsInvitedFields) {
            this.boardsInvitedFields = boardsInvitedFields;
            return this;
        }
        
        /**
         * Set boardStars
         * @param boardStars  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardStars(String boardStars) {
            this.boardStars = boardStars;
            return this;
        }
        
        /**
         * Set savedSearches
         * @param savedSearches  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder savedSearches(String savedSearches) {
            this.savedSearches = savedSearches;
            return this;
        }
        
        /**
         * Set organizations
         * @param organizations One of: all, members, none or public (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder organizations(String organizations) {
            this.organizations = organizations;
            return this;
        }
        
        /**
         * Set organizationFields
         * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder organizationFields(String organizationFields) {
            this.organizationFields = organizationFields;
            return this;
        }
        
        /**
         * Set organizationPaidAccount
         * @param organizationPaidAccount  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder organizationPaidAccount(String organizationPaidAccount) {
            this.organizationPaidAccount = organizationPaidAccount;
            return this;
        }
        
        /**
         * Set organizationsInvited
         * @param organizationsInvited One of: all, members, none or public (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder organizationsInvited(String organizationsInvited) {
            this.organizationsInvited = organizationsInvited;
            return this;
        }
        
        /**
         * Set organizationsInvitedFields
         * @param organizationsInvitedFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder organizationsInvitedFields(String organizationsInvitedFields) {
            this.organizationsInvitedFields = organizationsInvitedFields;
            return this;
        }
        
        /**
         * Set notifications
         * @param notifications all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder notifications(String notifications) {
            this.notifications = notifications;
            return this;
        }
        
        /**
         * Set notificationsEntities
         * @param notificationsEntities  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder notificationsEntities(String notificationsEntities) {
            this.notificationsEntities = notificationsEntities;
            return this;
        }
        
        /**
         * Set notificationsDisplay
         * @param notificationsDisplay  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder notificationsDisplay(String notificationsDisplay) {
            this.notificationsDisplay = notificationsDisplay;
            return this;
        }
        
        /**
         * Set notificationsLimit
         * @param notificationsLimit a number from 1 to 1000 (optional, default to 50)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder notificationsLimit(String notificationsLimit) {
            this.notificationsLimit = notificationsLimit;
            return this;
        }
        
        /**
         * Set notificationFields
         * @param notificationFields all or a comma-separated list of: data, date, idMemberCreator, type or unread (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder notificationFields(String notificationFields) {
            this.notificationFields = notificationFields;
            return this;
        }
        
        /**
         * Set notificationMemberCreator
         * @param notificationMemberCreator  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder notificationMemberCreator(String notificationMemberCreator) {
            this.notificationMemberCreator = notificationMemberCreator;
            return this;
        }
        
        /**
         * Set notificationMemberCreatorFields
         * @param notificationMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder notificationMemberCreatorFields(String notificationMemberCreatorFields) {
            this.notificationMemberCreatorFields = notificationMemberCreatorFields;
            return this;
        }
        
        /**
         * Set notificationBefore
         * @param notificationBefore An id, or null (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder notificationBefore(String notificationBefore) {
            this.notificationBefore = notificationBefore;
            return this;
        }
        
        /**
         * Set notificationSince
         * @param notificationSince An id, or null (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder notificationSince(String notificationSince) {
            this.notificationSince = notificationSince;
            return this;
        }
        
        /**
         * Set tokens
         * @param tokens One of: all or none (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder tokens(String tokens) {
            this.tokens = tokens;
            return this;
        }
        
        /**
         * Set paidAccount
         * @param paidAccount  true or false (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder paidAccount(String paidAccount) {
            this.paidAccount = paidAccount;
            return this;
        }
        
        /**
         * Set boardBackgrounds
         * @param boardBackgrounds One of: all, custom, default, none or premium (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder boardBackgrounds(String boardBackgrounds) {
            this.boardBackgrounds = boardBackgrounds;
            return this;
        }
        
        /**
         * Set customBoardBackgrounds
         * @param customBoardBackgrounds One of: all or none (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder customBoardBackgrounds(String customBoardBackgrounds) {
            this.customBoardBackgrounds = customBoardBackgrounds;
            return this;
        }
        
        /**
         * Set customStickers
         * @param customStickers One of: all or none (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder customStickers(String customStickers) {
            this.customStickers = customStickers;
            return this;
        }
        
        /**
         * Set customEmoji
         * @param customEmoji One of: all or none (optional, default to none)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder customEmoji(String customEmoji) {
            this.customEmoji = customEmoji;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(idMember, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionSince, actionBefore, cards, cardFields, cardMembers, cardMemberFields, cardAttachments, cardAttachmentFields, cardStickers, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, boardMemberships, boardOrganization, boardOrganizationFields, boardsInvited, boardsInvitedFields, boardStars, savedSearches, organizations, organizationFields, organizationPaidAccount, organizationsInvited, organizationsInvitedFields, notifications, notificationsEntities, notificationsDisplay, notificationsLimit, notificationFields, notificationMemberCreator, notificationMemberCreatorFields, notificationBefore, notificationSince, tokens, paidAccount, boardBackgrounds, customBoardBackgrounds, customStickers, customEmoji, fields, _callback);
        }


        /**
         * Execute getById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByIdWithHttpInfo(idMember, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionSince, actionBefore, cards, cardFields, cardMembers, cardMemberFields, cardAttachments, cardAttachmentFields, cardStickers, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, boardMemberships, boardOrganization, boardOrganizationFields, boardsInvited, boardsInvitedFields, boardStars, savedSearches, organizations, organizationFields, organizationPaidAccount, organizationsInvited, organizationsInvitedFields, notifications, notificationsEntities, notificationsDisplay, notificationsLimit, notificationFields, notificationMemberCreator, notificationMemberCreatorFields, notificationBefore, notificationSince, tokens, paidAccount, boardBackgrounds, customBoardBackgrounds, customStickers, customEmoji, fields);
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(idMember, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionSince, actionBefore, cards, cardFields, cardMembers, cardMemberFields, cardAttachments, cardAttachmentFields, cardStickers, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, boardMemberships, boardOrganization, boardOrganizationFields, boardsInvited, boardsInvitedFields, boardStars, savedSearches, organizations, organizationFields, organizationPaidAccount, organizationsInvited, organizationsInvitedFields, notifications, notificationsEntities, notificationsDisplay, notificationsLimit, notificationFields, notificationMemberCreator, notificationMemberCreatorFields, notificationBefore, notificationSince, tokens, paidAccount, boardBackgrounds, customBoardBackgrounds, customStickers, customEmoji, fields);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByIdAsync(idMember, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionSince, actionBefore, cards, cardFields, cardMembers, cardMemberFields, cardAttachments, cardAttachmentFields, cardStickers, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, boardMemberships, boardOrganization, boardOrganizationFields, boardsInvited, boardsInvitedFields, boardStars, savedSearches, organizations, organizationFields, organizationPaidAccount, organizationsInvited, organizationsInvitedFields, notifications, notificationsEntities, notificationsDisplay, notificationsLimit, notificationFields, notificationMemberCreator, notificationMemberCreatorFields, notificationBefore, notificationSince, tokens, paidAccount, boardBackgrounds, customBoardBackgrounds, customStickers, customEmoji, fields, _callback);
        }
    }

    /**
     * getMembersByIdMember()
     * If you specify &#39;me&#39; as the username, this call will respond as if you had supplied the username associated with the supplied token
     * @param idMember idMember or username (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new GetByIdRequestBuilder(idMember);
    }
    private okhttp3.Call getCardsByFilterCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/cards/{filter}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsByFilterValidateBeforeCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getCardsByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getCardsByFilter(Async)");
        }

        return getCardsByFilterCall(idMember, filter, _callback);

    }


    private ApiResponse<Void> getCardsByFilterWithHttpInfo(String idMember, String filter) throws ApiException {
        okhttp3.Call localVarCall = getCardsByFilterValidateBeforeCall(idMember, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCardsByFilterAsync(String idMember, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsByFilterValidateBeforeCall(idMember, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCardsByFilterRequestBuilder {
        private final String idMember;
        private final String filter;

        private GetCardsByFilterRequestBuilder(String idMember, String filter) {
            this.idMember = idMember;
            this.filter = filter;
        }

        /**
         * Build call for getCardsByFilter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardsByFilterCall(idMember, filter, _callback);
        }


        /**
         * Execute getCardsByFilter request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCardsByFilterWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getCardsByFilter request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCardsByFilterWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getCardsByFilter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCardsByFilterAsync(idMember, filter, _callback);
        }
    }

    /**
     * getMembersCardsByIdMemberByFilter()
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @return GetCardsByFilterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCardsByFilterRequestBuilder getCardsByFilter(String idMember, String filter) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new GetCardsByFilterRequestBuilder(idMember, filter);
    }
    private okhttp3.Call getCardsByIdMemberCall(String idMember, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/cards"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (stickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stickers", stickers));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsByIdMemberValidateBeforeCall(String idMember, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getCardsByIdMember(Async)");
        }

        return getCardsByIdMemberCall(idMember, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);

    }


    private ApiResponse<Void> getCardsByIdMemberWithHttpInfo(String idMember, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsByIdMemberValidateBeforeCall(idMember, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCardsByIdMemberAsync(String idMember, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsByIdMemberValidateBeforeCall(idMember, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCardsByIdMemberRequestBuilder {
        private final String idMember;
        private String actions;
        private String attachments;
        private String attachmentFields;
        private String stickers;
        private String members;
        private String memberFields;
        private String checkItemStates;
        private String checklists;
        private String limit;
        private String since;
        private String before;
        private String filter;
        private String fields;

        private GetCardsByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set actions
         * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder actions(String actions) {
            this.actions = actions;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder attachments(String attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set attachmentFields
         * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder attachmentFields(String attachmentFields) {
            this.attachmentFields = attachmentFields;
            return this;
        }
        
        /**
         * Set stickers
         * @param stickers  true or false (optional)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder stickers(String stickers) {
            this.stickers = stickers;
            return this;
        }
        
        /**
         * Set members
         * @param members  true or false (optional)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder members(String members) {
            this.members = members;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set checkItemStates
         * @param checkItemStates  true or false (optional)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder checkItemStates(String checkItemStates) {
            this.checkItemStates = checkItemStates;
            return this;
        }
        
        /**
         * Set checklists
         * @param checklists One of: all or none (optional, default to none)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder checklists(String checklists) {
            this.checklists = checklists;
            return this;
        }
        
        /**
         * Set limit
         * @param limit a number from 1 to 1000 (optional)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set since
         * @param since A date, or null (optional)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set before
         * @param before A date, or null (optional)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set filter
         * @param filter One of: all, closed, none, open or visible (optional, default to visible)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
         * @return GetCardsByIdMemberRequestBuilder
         */
        public GetCardsByIdMemberRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCardsByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardsByIdMemberCall(idMember, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        }


        /**
         * Execute getCardsByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCardsByIdMemberWithHttpInfo(idMember, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields);
        }

        /**
         * Execute getCardsByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCardsByIdMemberWithHttpInfo(idMember, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields);
        }

        /**
         * Execute getCardsByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCardsByIdMemberAsync(idMember, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        }
    }

    /**
     * getMembersCardsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @return GetCardsByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCardsByIdMemberRequestBuilder getCardsByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new GetCardsByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call getCustomBoardBackgroundByIdsCall(String idMember, String idBoardBackground, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customBoardBackgrounds/{idBoardBackground}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardBackground" + "}", localVarApiClient.escapeString(idBoardBackground.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomBoardBackgroundByIdsValidateBeforeCall(String idMember, String idBoardBackground, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getCustomBoardBackgroundByIds(Async)");
        }

        // verify the required parameter 'idBoardBackground' is set
        if (idBoardBackground == null) {
            throw new ApiException("Missing the required parameter 'idBoardBackground' when calling getCustomBoardBackgroundByIds(Async)");
        }

        return getCustomBoardBackgroundByIdsCall(idMember, idBoardBackground, fields, _callback);

    }


    private ApiResponse<Void> getCustomBoardBackgroundByIdsWithHttpInfo(String idMember, String idBoardBackground, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCustomBoardBackgroundByIdsValidateBeforeCall(idMember, idBoardBackground, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCustomBoardBackgroundByIdsAsync(String idMember, String idBoardBackground, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomBoardBackgroundByIdsValidateBeforeCall(idMember, idBoardBackground, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCustomBoardBackgroundByIdsRequestBuilder {
        private final String idMember;
        private final String idBoardBackground;
        private String fields;

        private GetCustomBoardBackgroundByIdsRequestBuilder(String idMember, String idBoardBackground) {
            this.idMember = idMember;
            this.idBoardBackground = idBoardBackground;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile (optional, default to all)
         * @return GetCustomBoardBackgroundByIdsRequestBuilder
         */
        public GetCustomBoardBackgroundByIdsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCustomBoardBackgroundByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomBoardBackgroundByIdsCall(idMember, idBoardBackground, fields, _callback);
        }


        /**
         * Execute getCustomBoardBackgroundByIds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCustomBoardBackgroundByIdsWithHttpInfo(idMember, idBoardBackground, fields);
        }

        /**
         * Execute getCustomBoardBackgroundByIds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCustomBoardBackgroundByIdsWithHttpInfo(idMember, idBoardBackground, fields);
        }

        /**
         * Execute getCustomBoardBackgroundByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCustomBoardBackgroundByIdsAsync(idMember, idBoardBackground, fields, _callback);
        }
    }

    /**
     * getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @return GetCustomBoardBackgroundByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomBoardBackgroundByIdsRequestBuilder getCustomBoardBackgroundByIds(String idMember, String idBoardBackground) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idBoardBackground == null) throw new IllegalArgumentException("\"idBoardBackground\" is required but got null");
            

        return new GetCustomBoardBackgroundByIdsRequestBuilder(idMember, idBoardBackground);
    }
    private okhttp3.Call getCustomBoardBackgroundsByIdCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customBoardBackgrounds"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomBoardBackgroundsByIdValidateBeforeCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getCustomBoardBackgroundsById(Async)");
        }

        return getCustomBoardBackgroundsByIdCall(idMember, filter, _callback);

    }


    private ApiResponse<Void> getCustomBoardBackgroundsByIdWithHttpInfo(String idMember, String filter) throws ApiException {
        okhttp3.Call localVarCall = getCustomBoardBackgroundsByIdValidateBeforeCall(idMember, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCustomBoardBackgroundsByIdAsync(String idMember, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomBoardBackgroundsByIdValidateBeforeCall(idMember, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCustomBoardBackgroundsByIdRequestBuilder {
        private final String idMember;
        private String filter;

        private GetCustomBoardBackgroundsByIdRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set filter
         * @param filter One of: all or none (optional, default to all)
         * @return GetCustomBoardBackgroundsByIdRequestBuilder
         */
        public GetCustomBoardBackgroundsByIdRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getCustomBoardBackgroundsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomBoardBackgroundsByIdCall(idMember, filter, _callback);
        }


        /**
         * Execute getCustomBoardBackgroundsById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCustomBoardBackgroundsByIdWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getCustomBoardBackgroundsById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCustomBoardBackgroundsByIdWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getCustomBoardBackgroundsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCustomBoardBackgroundsByIdAsync(idMember, filter, _callback);
        }
    }

    /**
     * getMembersCustomBoardBackgroundsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @return GetCustomBoardBackgroundsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomBoardBackgroundsByIdRequestBuilder getCustomBoardBackgroundsById(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new GetCustomBoardBackgroundsByIdRequestBuilder(idMember);
    }
    private okhttp3.Call getCustomEmojiByIdsCall(String idMember, String idCustomEmoji, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customEmoji/{idCustomEmoji}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idCustomEmoji" + "}", localVarApiClient.escapeString(idCustomEmoji.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomEmojiByIdsValidateBeforeCall(String idMember, String idCustomEmoji, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getCustomEmojiByIds(Async)");
        }

        // verify the required parameter 'idCustomEmoji' is set
        if (idCustomEmoji == null) {
            throw new ApiException("Missing the required parameter 'idCustomEmoji' when calling getCustomEmojiByIds(Async)");
        }

        return getCustomEmojiByIdsCall(idMember, idCustomEmoji, fields, _callback);

    }


    private ApiResponse<Void> getCustomEmojiByIdsWithHttpInfo(String idMember, String idCustomEmoji, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCustomEmojiByIdsValidateBeforeCall(idMember, idCustomEmoji, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCustomEmojiByIdsAsync(String idMember, String idCustomEmoji, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomEmojiByIdsValidateBeforeCall(idMember, idCustomEmoji, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCustomEmojiByIdsRequestBuilder {
        private final String idMember;
        private final String idCustomEmoji;
        private String fields;

        private GetCustomEmojiByIdsRequestBuilder(String idMember, String idCustomEmoji) {
            this.idMember = idMember;
            this.idCustomEmoji = idCustomEmoji;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: name or url (optional, default to all)
         * @return GetCustomEmojiByIdsRequestBuilder
         */
        public GetCustomEmojiByIdsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCustomEmojiByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomEmojiByIdsCall(idMember, idCustomEmoji, fields, _callback);
        }


        /**
         * Execute getCustomEmojiByIds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCustomEmojiByIdsWithHttpInfo(idMember, idCustomEmoji, fields);
        }

        /**
         * Execute getCustomEmojiByIds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCustomEmojiByIdsWithHttpInfo(idMember, idCustomEmoji, fields);
        }

        /**
         * Execute getCustomEmojiByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCustomEmojiByIdsAsync(idMember, idCustomEmoji, fields, _callback);
        }
    }

    /**
     * getMembersCustomEmojiByIdMemberByIdCustomEmoji()
     * 
     * @param idMember idMember or username (required)
     * @param idCustomEmoji idCustomEmoji (required)
     * @return GetCustomEmojiByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomEmojiByIdsRequestBuilder getCustomEmojiByIds(String idMember, String idCustomEmoji) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idCustomEmoji == null) throw new IllegalArgumentException("\"idCustomEmoji\" is required but got null");
            

        return new GetCustomEmojiByIdsRequestBuilder(idMember, idCustomEmoji);
    }
    private okhttp3.Call getCustomStickerByIdsCall(String idMember, String idCustomSticker, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customStickers/{idCustomSticker}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idCustomSticker" + "}", localVarApiClient.escapeString(idCustomSticker.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomStickerByIdsValidateBeforeCall(String idMember, String idCustomSticker, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getCustomStickerByIds(Async)");
        }

        // verify the required parameter 'idCustomSticker' is set
        if (idCustomSticker == null) {
            throw new ApiException("Missing the required parameter 'idCustomSticker' when calling getCustomStickerByIds(Async)");
        }

        return getCustomStickerByIdsCall(idMember, idCustomSticker, fields, _callback);

    }


    private ApiResponse<Void> getCustomStickerByIdsWithHttpInfo(String idMember, String idCustomSticker, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCustomStickerByIdsValidateBeforeCall(idMember, idCustomSticker, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCustomStickerByIdsAsync(String idMember, String idCustomSticker, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomStickerByIdsValidateBeforeCall(idMember, idCustomSticker, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCustomStickerByIdsRequestBuilder {
        private final String idMember;
        private final String idCustomSticker;
        private String fields;

        private GetCustomStickerByIdsRequestBuilder(String idMember, String idCustomSticker) {
            this.idMember = idMember;
            this.idCustomSticker = idCustomSticker;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: scaled or url (optional, default to all)
         * @return GetCustomStickerByIdsRequestBuilder
         */
        public GetCustomStickerByIdsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCustomStickerByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomStickerByIdsCall(idMember, idCustomSticker, fields, _callback);
        }


        /**
         * Execute getCustomStickerByIds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCustomStickerByIdsWithHttpInfo(idMember, idCustomSticker, fields);
        }

        /**
         * Execute getCustomStickerByIds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCustomStickerByIdsWithHttpInfo(idMember, idCustomSticker, fields);
        }

        /**
         * Execute getCustomStickerByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCustomStickerByIdsAsync(idMember, idCustomSticker, fields, _callback);
        }
    }

    /**
     * getMembersCustomStickersByIdMemberByIdCustomSticker()
     * 
     * @param idMember idMember or username (required)
     * @param idCustomSticker idCustomSticker (required)
     * @return GetCustomStickerByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomStickerByIdsRequestBuilder getCustomStickerByIds(String idMember, String idCustomSticker) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idCustomSticker == null) throw new IllegalArgumentException("\"idCustomSticker\" is required but got null");
            

        return new GetCustomStickerByIdsRequestBuilder(idMember, idCustomSticker);
    }
    private okhttp3.Call getCustomStickersByIdMemberCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customStickers"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomStickersByIdMemberValidateBeforeCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getCustomStickersByIdMember(Async)");
        }

        return getCustomStickersByIdMemberCall(idMember, filter, _callback);

    }


    private ApiResponse<Void> getCustomStickersByIdMemberWithHttpInfo(String idMember, String filter) throws ApiException {
        okhttp3.Call localVarCall = getCustomStickersByIdMemberValidateBeforeCall(idMember, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCustomStickersByIdMemberAsync(String idMember, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomStickersByIdMemberValidateBeforeCall(idMember, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCustomStickersByIdMemberRequestBuilder {
        private final String idMember;
        private String filter;

        private GetCustomStickersByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set filter
         * @param filter One of: all or none (optional, default to all)
         * @return GetCustomStickersByIdMemberRequestBuilder
         */
        public GetCustomStickersByIdMemberRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getCustomStickersByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomStickersByIdMemberCall(idMember, filter, _callback);
        }


        /**
         * Execute getCustomStickersByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCustomStickersByIdMemberWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getCustomStickersByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCustomStickersByIdMemberWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getCustomStickersByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCustomStickersByIdMemberAsync(idMember, filter, _callback);
        }
    }

    /**
     * getMembersCustomStickersByIdMember()
     * This gets a list of all of the user’s uploaded stickers
     * @param idMember idMember or username (required)
     * @return GetCustomStickersByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomStickersByIdMemberRequestBuilder getCustomStickersByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new GetCustomStickersByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call getDeltasByIdMemberCall(String idMember, String tags, String ixLastUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/deltas"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (ixLastUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ixLastUpdate", ixLastUpdate));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeltasByIdMemberValidateBeforeCall(String idMember, String tags, String ixLastUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getDeltasByIdMember(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling getDeltasByIdMember(Async)");
        }

        // verify the required parameter 'ixLastUpdate' is set
        if (ixLastUpdate == null) {
            throw new ApiException("Missing the required parameter 'ixLastUpdate' when calling getDeltasByIdMember(Async)");
        }

        return getDeltasByIdMemberCall(idMember, tags, ixLastUpdate, _callback);

    }


    private ApiResponse<Void> getDeltasByIdMemberWithHttpInfo(String idMember, String tags, String ixLastUpdate) throws ApiException {
        okhttp3.Call localVarCall = getDeltasByIdMemberValidateBeforeCall(idMember, tags, ixLastUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDeltasByIdMemberAsync(String idMember, String tags, String ixLastUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeltasByIdMemberValidateBeforeCall(idMember, tags, ixLastUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDeltasByIdMemberRequestBuilder {
        private final String idMember;
        private final String tags;
        private final String ixLastUpdate;

        private GetDeltasByIdMemberRequestBuilder(String idMember, String tags, String ixLastUpdate) {
            this.idMember = idMember;
            this.tags = tags;
            this.ixLastUpdate = ixLastUpdate;
        }

        /**
         * Build call for getDeltasByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDeltasByIdMemberCall(idMember, tags, ixLastUpdate, _callback);
        }


        /**
         * Execute getDeltasByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDeltasByIdMemberWithHttpInfo(idMember, tags, ixLastUpdate);
        }

        /**
         * Execute getDeltasByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDeltasByIdMemberWithHttpInfo(idMember, tags, ixLastUpdate);
        }

        /**
         * Execute getDeltasByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDeltasByIdMemberAsync(idMember, tags, ixLastUpdate, _callback);
        }
    }

    /**
     * getMembersDeltasByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param tags A valid tag for subscribing (required)
     * @param ixLastUpdate a number from -1 to Infinity (required)
     * @return GetDeltasByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetDeltasByIdMemberRequestBuilder getDeltasByIdMember(String idMember, String tags, String ixLastUpdate) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (tags == null) throw new IllegalArgumentException("\"tags\" is required but got null");
            

        if (ixLastUpdate == null) throw new IllegalArgumentException("\"ixLastUpdate\" is required but got null");
            

        return new GetDeltasByIdMemberRequestBuilder(idMember, tags, ixLastUpdate);
    }
    private okhttp3.Call getInvitedBoardsCall(String idMember, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardsInvited"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvitedBoardsValidateBeforeCall(String idMember, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getInvitedBoards(Async)");
        }

        return getInvitedBoardsCall(idMember, fields, _callback);

    }


    private ApiResponse<Void> getInvitedBoardsWithHttpInfo(String idMember, String fields) throws ApiException {
        okhttp3.Call localVarCall = getInvitedBoardsValidateBeforeCall(idMember, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getInvitedBoardsAsync(String idMember, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvitedBoardsValidateBeforeCall(idMember, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetInvitedBoardsRequestBuilder {
        private final String idMember;
        private String fields;

        private GetInvitedBoardsRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
         * @return GetInvitedBoardsRequestBuilder
         */
        public GetInvitedBoardsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getInvitedBoards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInvitedBoardsCall(idMember, fields, _callback);
        }


        /**
         * Execute getInvitedBoards request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getInvitedBoardsWithHttpInfo(idMember, fields);
        }

        /**
         * Execute getInvitedBoards request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getInvitedBoardsWithHttpInfo(idMember, fields);
        }

        /**
         * Execute getInvitedBoards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getInvitedBoardsAsync(idMember, fields, _callback);
        }
    }

    /**
     * getMembersBoardsInvitedByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @return GetInvitedBoardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetInvitedBoardsRequestBuilder getInvitedBoards(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new GetInvitedBoardsRequestBuilder(idMember);
    }
    private okhttp3.Call getNotificationsByIdMemberCall(String idMember, String entities, String display, String filter, String readFilter, String fields, String limit, String page, String before, String since, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/notifications"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (readFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("read_filter", readFilter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (memberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator", memberCreator));
        }

        if (memberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator_fields", memberCreatorFields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNotificationsByIdMemberValidateBeforeCall(String idMember, String entities, String display, String filter, String readFilter, String fields, String limit, String page, String before, String since, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getNotificationsByIdMember(Async)");
        }

        return getNotificationsByIdMemberCall(idMember, entities, display, filter, readFilter, fields, limit, page, before, since, memberCreator, memberCreatorFields, _callback);

    }


    private ApiResponse<Void> getNotificationsByIdMemberWithHttpInfo(String idMember, String entities, String display, String filter, String readFilter, String fields, String limit, String page, String before, String since, String memberCreator, String memberCreatorFields) throws ApiException {
        okhttp3.Call localVarCall = getNotificationsByIdMemberValidateBeforeCall(idMember, entities, display, filter, readFilter, fields, limit, page, before, since, memberCreator, memberCreatorFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getNotificationsByIdMemberAsync(String idMember, String entities, String display, String filter, String readFilter, String fields, String limit, String page, String before, String since, String memberCreator, String memberCreatorFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNotificationsByIdMemberValidateBeforeCall(idMember, entities, display, filter, readFilter, fields, limit, page, before, since, memberCreator, memberCreatorFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetNotificationsByIdMemberRequestBuilder {
        private final String idMember;
        private String entities;
        private String display;
        private String filter;
        private String readFilter;
        private String fields;
        private String limit;
        private String page;
        private String before;
        private String since;
        private String memberCreator;
        private String memberCreatorFields;

        private GetNotificationsByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set entities
         * @param entities  true or false (optional)
         * @return GetNotificationsByIdMemberRequestBuilder
         */
        public GetNotificationsByIdMemberRequestBuilder entities(String entities) {
            this.entities = entities;
            return this;
        }
        
        /**
         * Set display
         * @param display  true or false (optional)
         * @return GetNotificationsByIdMemberRequestBuilder
         */
        public GetNotificationsByIdMemberRequestBuilder display(String display) {
            this.display = display;
            return this;
        }
        
        /**
         * Set filter
         * @param filter all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard (optional, default to all)
         * @return GetNotificationsByIdMemberRequestBuilder
         */
        public GetNotificationsByIdMemberRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set readFilter
         * @param readFilter One of: all, read or unread (optional, default to all)
         * @return GetNotificationsByIdMemberRequestBuilder
         */
        public GetNotificationsByIdMemberRequestBuilder readFilter(String readFilter) {
            this.readFilter = readFilter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: data, date, idMemberCreator, type or unread (optional, default to all)
         * @return GetNotificationsByIdMemberRequestBuilder
         */
        public GetNotificationsByIdMemberRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set limit
         * @param limit a number from 1 to 1000 (optional, default to 50)
         * @return GetNotificationsByIdMemberRequestBuilder
         */
        public GetNotificationsByIdMemberRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page a number from 0 to 100 (optional, default to 0)
         * @return GetNotificationsByIdMemberRequestBuilder
         */
        public GetNotificationsByIdMemberRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set before
         * @param before An id, or null (optional)
         * @return GetNotificationsByIdMemberRequestBuilder
         */
        public GetNotificationsByIdMemberRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set since
         * @param since An id, or null (optional)
         * @return GetNotificationsByIdMemberRequestBuilder
         */
        public GetNotificationsByIdMemberRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set memberCreator
         * @param memberCreator  true or false (optional)
         * @return GetNotificationsByIdMemberRequestBuilder
         */
        public GetNotificationsByIdMemberRequestBuilder memberCreator(String memberCreator) {
            this.memberCreator = memberCreator;
            return this;
        }
        
        /**
         * Set memberCreatorFields
         * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return GetNotificationsByIdMemberRequestBuilder
         */
        public GetNotificationsByIdMemberRequestBuilder memberCreatorFields(String memberCreatorFields) {
            this.memberCreatorFields = memberCreatorFields;
            return this;
        }
        
        /**
         * Build call for getNotificationsByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNotificationsByIdMemberCall(idMember, entities, display, filter, readFilter, fields, limit, page, before, since, memberCreator, memberCreatorFields, _callback);
        }


        /**
         * Execute getNotificationsByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getNotificationsByIdMemberWithHttpInfo(idMember, entities, display, filter, readFilter, fields, limit, page, before, since, memberCreator, memberCreatorFields);
        }

        /**
         * Execute getNotificationsByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getNotificationsByIdMemberWithHttpInfo(idMember, entities, display, filter, readFilter, fields, limit, page, before, since, memberCreator, memberCreatorFields);
        }

        /**
         * Execute getNotificationsByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getNotificationsByIdMemberAsync(idMember, entities, display, filter, readFilter, fields, limit, page, before, since, memberCreator, memberCreatorFields, _callback);
        }
    }

    /**
     * getMembersNotificationsByIdMember()
     * You can only read the notifications for the member associated with the supplied token
     * @param idMember idMember or username (required)
     * @return GetNotificationsByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetNotificationsByIdMemberRequestBuilder getNotificationsByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new GetNotificationsByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call getNotificationsByIdMemberByFilterCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/notifications/{filter}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNotificationsByIdMemberByFilterValidateBeforeCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getNotificationsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getNotificationsByIdMemberByFilter(Async)");
        }

        return getNotificationsByIdMemberByFilterCall(idMember, filter, _callback);

    }


    private ApiResponse<Void> getNotificationsByIdMemberByFilterWithHttpInfo(String idMember, String filter) throws ApiException {
        okhttp3.Call localVarCall = getNotificationsByIdMemberByFilterValidateBeforeCall(idMember, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getNotificationsByIdMemberByFilterAsync(String idMember, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNotificationsByIdMemberByFilterValidateBeforeCall(idMember, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetNotificationsByIdMemberByFilterRequestBuilder {
        private final String idMember;
        private final String filter;

        private GetNotificationsByIdMemberByFilterRequestBuilder(String idMember, String filter) {
            this.idMember = idMember;
            this.filter = filter;
        }

        /**
         * Build call for getNotificationsByIdMemberByFilter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNotificationsByIdMemberByFilterCall(idMember, filter, _callback);
        }


        /**
         * Execute getNotificationsByIdMemberByFilter request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getNotificationsByIdMemberByFilterWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getNotificationsByIdMemberByFilter request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getNotificationsByIdMemberByFilterWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getNotificationsByIdMemberByFilter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getNotificationsByIdMemberByFilterAsync(idMember, filter, _callback);
        }
    }

    /**
     * getMembersNotificationsByIdMemberByFilter()
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @return GetNotificationsByIdMemberByFilterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetNotificationsByIdMemberByFilterRequestBuilder getNotificationsByIdMemberByFilter(String idMember, String filter) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new GetNotificationsByIdMemberByFilterRequestBuilder(idMember, filter);
    }
    private okhttp3.Call getOrganizationsCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/organizations/{filter}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationsValidateBeforeCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getOrganizations(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getOrganizations(Async)");
        }

        return getOrganizationsCall(idMember, filter, _callback);

    }


    private ApiResponse<Void> getOrganizationsWithHttpInfo(String idMember, String filter) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationsValidateBeforeCall(idMember, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getOrganizationsAsync(String idMember, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationsValidateBeforeCall(idMember, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetOrganizationsRequestBuilder {
        private final String idMember;
        private final String filter;

        private GetOrganizationsRequestBuilder(String idMember, String filter) {
            this.idMember = idMember;
            this.filter = filter;
        }

        /**
         * Build call for getOrganizations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationsCall(idMember, filter, _callback);
        }


        /**
         * Execute getOrganizations request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getOrganizationsWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getOrganizations request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getOrganizationsWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getOrganizations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getOrganizationsAsync(idMember, filter, _callback);
        }
    }

    /**
     * getMembersOrganizationsByIdMemberByFilter()
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @return GetOrganizationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationsRequestBuilder getOrganizations(String idMember, String filter) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new GetOrganizationsRequestBuilder(idMember, filter);
    }
    private okhttp3.Call getSavedSearchByIdsCall(String idMember, String idSavedSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches/{idSavedSearch}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idSavedSearch" + "}", localVarApiClient.escapeString(idSavedSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSavedSearchByIdsValidateBeforeCall(String idMember, String idSavedSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getSavedSearchByIds(Async)");
        }

        // verify the required parameter 'idSavedSearch' is set
        if (idSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'idSavedSearch' when calling getSavedSearchByIds(Async)");
        }

        return getSavedSearchByIdsCall(idMember, idSavedSearch, _callback);

    }


    private ApiResponse<Void> getSavedSearchByIdsWithHttpInfo(String idMember, String idSavedSearch) throws ApiException {
        okhttp3.Call localVarCall = getSavedSearchByIdsValidateBeforeCall(idMember, idSavedSearch, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getSavedSearchByIdsAsync(String idMember, String idSavedSearch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSavedSearchByIdsValidateBeforeCall(idMember, idSavedSearch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetSavedSearchByIdsRequestBuilder {
        private final String idMember;
        private final String idSavedSearch;

        private GetSavedSearchByIdsRequestBuilder(String idMember, String idSavedSearch) {
            this.idMember = idMember;
            this.idSavedSearch = idSavedSearch;
        }

        /**
         * Build call for getSavedSearchByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSavedSearchByIdsCall(idMember, idSavedSearch, _callback);
        }


        /**
         * Execute getSavedSearchByIds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getSavedSearchByIdsWithHttpInfo(idMember, idSavedSearch);
        }

        /**
         * Execute getSavedSearchByIds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getSavedSearchByIdsWithHttpInfo(idMember, idSavedSearch);
        }

        /**
         * Execute getSavedSearchByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getSavedSearchByIdsAsync(idMember, idSavedSearch, _callback);
        }
    }

    /**
     * getMembersSavedSearchesByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @return GetSavedSearchByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetSavedSearchByIdsRequestBuilder getSavedSearchByIds(String idMember, String idSavedSearch) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idSavedSearch == null) throw new IllegalArgumentException("\"idSavedSearch\" is required but got null");
            

        return new GetSavedSearchByIdsRequestBuilder(idMember, idSavedSearch);
    }
    private okhttp3.Call getSavedSearchesByIdMemberCall(String idMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSavedSearchesByIdMemberValidateBeforeCall(String idMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getSavedSearchesByIdMember(Async)");
        }

        return getSavedSearchesByIdMemberCall(idMember, _callback);

    }


    private ApiResponse<Void> getSavedSearchesByIdMemberWithHttpInfo(String idMember) throws ApiException {
        okhttp3.Call localVarCall = getSavedSearchesByIdMemberValidateBeforeCall(idMember, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getSavedSearchesByIdMemberAsync(String idMember, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSavedSearchesByIdMemberValidateBeforeCall(idMember, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetSavedSearchesByIdMemberRequestBuilder {
        private final String idMember;

        private GetSavedSearchesByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Build call for getSavedSearchesByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSavedSearchesByIdMemberCall(idMember, _callback);
        }


        /**
         * Execute getSavedSearchesByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getSavedSearchesByIdMemberWithHttpInfo(idMember);
        }

        /**
         * Execute getSavedSearchesByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getSavedSearchesByIdMemberWithHttpInfo(idMember);
        }

        /**
         * Execute getSavedSearchesByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getSavedSearchesByIdMemberAsync(idMember, _callback);
        }
    }

    /**
     * getMembersSavedSearchesByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @return GetSavedSearchesByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetSavedSearchesByIdMemberRequestBuilder getSavedSearchesByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new GetSavedSearchesByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call getTokensByIdMemberCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/tokens"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokensByIdMemberValidateBeforeCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getTokensByIdMember(Async)");
        }

        return getTokensByIdMemberCall(idMember, filter, _callback);

    }


    private ApiResponse<Void> getTokensByIdMemberWithHttpInfo(String idMember, String filter) throws ApiException {
        okhttp3.Call localVarCall = getTokensByIdMemberValidateBeforeCall(idMember, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getTokensByIdMemberAsync(String idMember, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokensByIdMemberValidateBeforeCall(idMember, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetTokensByIdMemberRequestBuilder {
        private final String idMember;
        private String filter;

        private GetTokensByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set filter
         * @param filter One of: all or none (optional, default to all)
         * @return GetTokensByIdMemberRequestBuilder
         */
        public GetTokensByIdMemberRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getTokensByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTokensByIdMemberCall(idMember, filter, _callback);
        }


        /**
         * Execute getTokensByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getTokensByIdMemberWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getTokensByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getTokensByIdMemberWithHttpInfo(idMember, filter);
        }

        /**
         * Execute getTokensByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getTokensByIdMemberAsync(idMember, filter, _callback);
        }
    }

    /**
     * getMembersTokensByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @return GetTokensByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public GetTokensByIdMemberRequestBuilder getTokensByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new GetTokensByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call listActionsByIdMemberCall(String idMember, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/actions"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (idModels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idModels", idModels));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (memberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator", memberCreator));
        }

        if (memberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator_fields", memberCreatorFields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActionsByIdMemberValidateBeforeCall(String idMember, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling listActionsByIdMember(Async)");
        }

        return listActionsByIdMemberCall(idMember, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);

    }


    private ApiResponse<Void> listActionsByIdMemberWithHttpInfo(String idMember, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields) throws ApiException {
        okhttp3.Call localVarCall = listActionsByIdMemberValidateBeforeCall(idMember, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listActionsByIdMemberAsync(String idMember, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActionsByIdMemberValidateBeforeCall(idMember, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListActionsByIdMemberRequestBuilder {
        private final String idMember;
        private String entities;
        private String display;
        private String filter;
        private String fields;
        private String limit;
        private String format;
        private String since;
        private String before;
        private String page;
        private String idModels;
        private String member;
        private String memberFields;
        private String memberCreator;
        private String memberCreatorFields;

        private ListActionsByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set entities
         * @param entities  true or false (optional)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder entities(String entities) {
            this.entities = entities;
            return this;
        }
        
        /**
         * Set display
         * @param display  true or false (optional)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder display(String display) {
            this.display = display;
            return this;
        }
        
        /**
         * Set filter
         * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to all)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set limit
         * @param limit a number from 0 to 1000 (optional, default to 50)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set format
         * @param format One of: count, list or minimal (optional, default to list)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set since
         * @param since A date, null or lastView (optional)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder since(String since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set before
         * @param before A date, or null (optional)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set page
         * @param page Page * limit must be less than 1000 (optional, default to 0)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set idModels
         * @param idModels Only return actions related to these model ids (optional)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder idModels(String idModels) {
            this.idModels = idModels;
            return this;
        }
        
        /**
         * Set member
         * @param member  true or false (optional)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder member(String member) {
            this.member = member;
            return this;
        }
        
        /**
         * Set memberFields
         * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder memberFields(String memberFields) {
            this.memberFields = memberFields;
            return this;
        }
        
        /**
         * Set memberCreator
         * @param memberCreator  true or false (optional)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder memberCreator(String memberCreator) {
            this.memberCreator = memberCreator;
            return this;
        }
        
        /**
         * Set memberCreatorFields
         * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
         * @return ListActionsByIdMemberRequestBuilder
         */
        public ListActionsByIdMemberRequestBuilder memberCreatorFields(String memberCreatorFields) {
            this.memberCreatorFields = memberCreatorFields;
            return this;
        }
        
        /**
         * Build call for listActionsByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listActionsByIdMemberCall(idMember, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        }


        /**
         * Execute listActionsByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listActionsByIdMemberWithHttpInfo(idMember, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
        }

        /**
         * Execute listActionsByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listActionsByIdMemberWithHttpInfo(idMember, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
        }

        /**
         * Execute listActionsByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listActionsByIdMemberAsync(idMember, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        }
    }

    /**
     * getMembersActionsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @return ListActionsByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListActionsByIdMemberRequestBuilder listActionsByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new ListActionsByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call listCustomEmojiByIdMemberCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customEmoji"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomEmojiByIdMemberValidateBeforeCall(String idMember, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling listCustomEmojiByIdMember(Async)");
        }

        return listCustomEmojiByIdMemberCall(idMember, filter, _callback);

    }


    private ApiResponse<Void> listCustomEmojiByIdMemberWithHttpInfo(String idMember, String filter) throws ApiException {
        okhttp3.Call localVarCall = listCustomEmojiByIdMemberValidateBeforeCall(idMember, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listCustomEmojiByIdMemberAsync(String idMember, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomEmojiByIdMemberValidateBeforeCall(idMember, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListCustomEmojiByIdMemberRequestBuilder {
        private final String idMember;
        private String filter;

        private ListCustomEmojiByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set filter
         * @param filter One of: all or none (optional, default to all)
         * @return ListCustomEmojiByIdMemberRequestBuilder
         */
        public ListCustomEmojiByIdMemberRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listCustomEmojiByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCustomEmojiByIdMemberCall(idMember, filter, _callback);
        }


        /**
         * Execute listCustomEmojiByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listCustomEmojiByIdMemberWithHttpInfo(idMember, filter);
        }

        /**
         * Execute listCustomEmojiByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listCustomEmojiByIdMemberWithHttpInfo(idMember, filter);
        }

        /**
         * Execute listCustomEmojiByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listCustomEmojiByIdMemberAsync(idMember, filter, _callback);
        }
    }

    /**
     * getMembersCustomEmojiByIdMember()
     * This gets the list of all of the user’s uploaded emoji
     * @param idMember idMember or username (required)
     * @return ListCustomEmojiByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomEmojiByIdMemberRequestBuilder listCustomEmojiByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new ListCustomEmojiByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call listInvitedOrganizationsByIdCall(String idMember, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/organizationsInvited"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvitedOrganizationsByIdValidateBeforeCall(String idMember, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling listInvitedOrganizationsById(Async)");
        }

        return listInvitedOrganizationsByIdCall(idMember, fields, _callback);

    }


    private ApiResponse<Void> listInvitedOrganizationsByIdWithHttpInfo(String idMember, String fields) throws ApiException {
        okhttp3.Call localVarCall = listInvitedOrganizationsByIdValidateBeforeCall(idMember, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listInvitedOrganizationsByIdAsync(String idMember, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInvitedOrganizationsByIdValidateBeforeCall(idMember, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListInvitedOrganizationsByIdRequestBuilder {
        private final String idMember;
        private String fields;

        private ListInvitedOrganizationsByIdRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set fields
         * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
         * @return ListInvitedOrganizationsByIdRequestBuilder
         */
        public ListInvitedOrganizationsByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for listInvitedOrganizationsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInvitedOrganizationsByIdCall(idMember, fields, _callback);
        }


        /**
         * Execute listInvitedOrganizationsById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listInvitedOrganizationsByIdWithHttpInfo(idMember, fields);
        }

        /**
         * Execute listInvitedOrganizationsById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listInvitedOrganizationsByIdWithHttpInfo(idMember, fields);
        }

        /**
         * Execute listInvitedOrganizationsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listInvitedOrganizationsByIdAsync(idMember, fields, _callback);
        }
    }

    /**
     * getMembersOrganizationsInvitedByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @return ListInvitedOrganizationsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListInvitedOrganizationsByIdRequestBuilder listInvitedOrganizationsById(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new ListInvitedOrganizationsByIdRequestBuilder(idMember);
    }
    private okhttp3.Call listOrganizationsByIdCall(String idMember, String filter, String fields, String paidAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/organizations"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (paidAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paid_account", paidAccount));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrganizationsByIdValidateBeforeCall(String idMember, String filter, String fields, String paidAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling listOrganizationsById(Async)");
        }

        return listOrganizationsByIdCall(idMember, filter, fields, paidAccount, _callback);

    }


    private ApiResponse<Void> listOrganizationsByIdWithHttpInfo(String idMember, String filter, String fields, String paidAccount) throws ApiException {
        okhttp3.Call localVarCall = listOrganizationsByIdValidateBeforeCall(idMember, filter, fields, paidAccount, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listOrganizationsByIdAsync(String idMember, String filter, String fields, String paidAccount, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrganizationsByIdValidateBeforeCall(idMember, filter, fields, paidAccount, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListOrganizationsByIdRequestBuilder {
        private final String idMember;
        private String filter;
        private String fields;
        private String paidAccount;

        private ListOrganizationsByIdRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set filter
         * @param filter One of: all, members, none or public (optional, default to all)
         * @return ListOrganizationsByIdRequestBuilder
         */
        public ListOrganizationsByIdRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
         * @return ListOrganizationsByIdRequestBuilder
         */
        public ListOrganizationsByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set paidAccount
         * @param paidAccount  true or false (optional)
         * @return ListOrganizationsByIdRequestBuilder
         */
        public ListOrganizationsByIdRequestBuilder paidAccount(String paidAccount) {
            this.paidAccount = paidAccount;
            return this;
        }
        
        /**
         * Build call for listOrganizationsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOrganizationsByIdCall(idMember, filter, fields, paidAccount, _callback);
        }


        /**
         * Execute listOrganizationsById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listOrganizationsByIdWithHttpInfo(idMember, filter, fields, paidAccount);
        }

        /**
         * Execute listOrganizationsById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listOrganizationsByIdWithHttpInfo(idMember, filter, fields, paidAccount);
        }

        /**
         * Execute listOrganizationsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listOrganizationsByIdAsync(idMember, filter, fields, paidAccount, _callback);
        }
    }

    /**
     * getMembersOrganizationsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @return ListOrganizationsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListOrganizationsByIdRequestBuilder listOrganizationsById(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new ListOrganizationsByIdRequestBuilder(idMember);
    }
    private okhttp3.Call listOrganizationsInvitedByIdMemberByFieldCall(String idMember, String field, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/organizationsInvited/{field}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrganizationsInvitedByIdMemberByFieldValidateBeforeCall(String idMember, String field, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling listOrganizationsInvitedByIdMemberByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling listOrganizationsInvitedByIdMemberByField(Async)");
        }

        return listOrganizationsInvitedByIdMemberByFieldCall(idMember, field, _callback);

    }


    private ApiResponse<Void> listOrganizationsInvitedByIdMemberByFieldWithHttpInfo(String idMember, String field) throws ApiException {
        okhttp3.Call localVarCall = listOrganizationsInvitedByIdMemberByFieldValidateBeforeCall(idMember, field, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listOrganizationsInvitedByIdMemberByFieldAsync(String idMember, String field, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrganizationsInvitedByIdMemberByFieldValidateBeforeCall(idMember, field, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListOrganizationsInvitedByIdMemberByFieldRequestBuilder {
        private final String idMember;
        private final String field;

        private ListOrganizationsInvitedByIdMemberByFieldRequestBuilder(String idMember, String field) {
            this.idMember = idMember;
            this.field = field;
        }

        /**
         * Build call for listOrganizationsInvitedByIdMemberByField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOrganizationsInvitedByIdMemberByFieldCall(idMember, field, _callback);
        }


        /**
         * Execute listOrganizationsInvitedByIdMemberByField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listOrganizationsInvitedByIdMemberByFieldWithHttpInfo(idMember, field);
        }

        /**
         * Execute listOrganizationsInvitedByIdMemberByField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listOrganizationsInvitedByIdMemberByFieldWithHttpInfo(idMember, field);
        }

        /**
         * Execute listOrganizationsInvitedByIdMemberByField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listOrganizationsInvitedByIdMemberByFieldAsync(idMember, field, _callback);
        }
    }

    /**
     * getMembersOrganizationsInvitedByIdMemberByField()
     * 
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @return ListOrganizationsInvitedByIdMemberByFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ListOrganizationsInvitedByIdMemberByFieldRequestBuilder listOrganizationsInvitedByIdMemberByField(String idMember, String field) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (field == null) throw new IllegalArgumentException("\"field\" is required but got null");
            

        return new ListOrganizationsInvitedByIdMemberByFieldRequestBuilder(idMember, field);
    }
    private okhttp3.Call removeBoardStarByIdMemberByIdBoardStarCall(String idMember, String idBoardStar, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars/{idBoardStar}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardStar" + "}", localVarApiClient.escapeString(idBoardStar.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeBoardStarByIdMemberByIdBoardStarValidateBeforeCall(String idMember, String idBoardStar, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling removeBoardStarByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'idBoardStar' is set
        if (idBoardStar == null) {
            throw new ApiException("Missing the required parameter 'idBoardStar' when calling removeBoardStarByIdMemberByIdBoardStar(Async)");
        }

        return removeBoardStarByIdMemberByIdBoardStarCall(idMember, idBoardStar, _callback);

    }


    private ApiResponse<Void> removeBoardStarByIdMemberByIdBoardStarWithHttpInfo(String idMember, String idBoardStar) throws ApiException {
        okhttp3.Call localVarCall = removeBoardStarByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeBoardStarByIdMemberByIdBoardStarAsync(String idMember, String idBoardStar, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeBoardStarByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveBoardStarByIdMemberByIdBoardStarRequestBuilder {
        private final String idMember;
        private final String idBoardStar;

        private RemoveBoardStarByIdMemberByIdBoardStarRequestBuilder(String idMember, String idBoardStar) {
            this.idMember = idMember;
            this.idBoardStar = idBoardStar;
        }

        /**
         * Build call for removeBoardStarByIdMemberByIdBoardStar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeBoardStarByIdMemberByIdBoardStarCall(idMember, idBoardStar, _callback);
        }


        /**
         * Execute removeBoardStarByIdMemberByIdBoardStar request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeBoardStarByIdMemberByIdBoardStarWithHttpInfo(idMember, idBoardStar);
        }

        /**
         * Execute removeBoardStarByIdMemberByIdBoardStar request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeBoardStarByIdMemberByIdBoardStarWithHttpInfo(idMember, idBoardStar);
        }

        /**
         * Execute removeBoardStarByIdMemberByIdBoardStar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeBoardStarByIdMemberByIdBoardStarAsync(idMember, idBoardStar, _callback);
        }
    }

    /**
     * deleteMembersBoardStarsByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @return RemoveBoardStarByIdMemberByIdBoardStarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveBoardStarByIdMemberByIdBoardStarRequestBuilder removeBoardStarByIdMemberByIdBoardStar(String idMember, String idBoardStar) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idBoardStar == null) throw new IllegalArgumentException("\"idBoardStar\" is required but got null");
            

        return new RemoveBoardStarByIdMemberByIdBoardStarRequestBuilder(idMember, idBoardStar);
    }
    private okhttp3.Call removeCustomBoardBackgroundByIdCall(String idMember, String idBoardBackground, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customBoardBackgrounds/{idBoardBackground}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardBackground" + "}", localVarApiClient.escapeString(idBoardBackground.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCustomBoardBackgroundByIdValidateBeforeCall(String idMember, String idBoardBackground, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling removeCustomBoardBackgroundById(Async)");
        }

        // verify the required parameter 'idBoardBackground' is set
        if (idBoardBackground == null) {
            throw new ApiException("Missing the required parameter 'idBoardBackground' when calling removeCustomBoardBackgroundById(Async)");
        }

        return removeCustomBoardBackgroundByIdCall(idMember, idBoardBackground, _callback);

    }


    private ApiResponse<Void> removeCustomBoardBackgroundByIdWithHttpInfo(String idMember, String idBoardBackground) throws ApiException {
        okhttp3.Call localVarCall = removeCustomBoardBackgroundByIdValidateBeforeCall(idMember, idBoardBackground, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeCustomBoardBackgroundByIdAsync(String idMember, String idBoardBackground, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCustomBoardBackgroundByIdValidateBeforeCall(idMember, idBoardBackground, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveCustomBoardBackgroundByIdRequestBuilder {
        private final String idMember;
        private final String idBoardBackground;

        private RemoveCustomBoardBackgroundByIdRequestBuilder(String idMember, String idBoardBackground) {
            this.idMember = idMember;
            this.idBoardBackground = idBoardBackground;
        }

        /**
         * Build call for removeCustomBoardBackgroundById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCustomBoardBackgroundByIdCall(idMember, idBoardBackground, _callback);
        }


        /**
         * Execute removeCustomBoardBackgroundById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeCustomBoardBackgroundByIdWithHttpInfo(idMember, idBoardBackground);
        }

        /**
         * Execute removeCustomBoardBackgroundById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeCustomBoardBackgroundByIdWithHttpInfo(idMember, idBoardBackground);
        }

        /**
         * Execute removeCustomBoardBackgroundById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeCustomBoardBackgroundByIdAsync(idMember, idBoardBackground, _callback);
        }
    }

    /**
     * deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @return RemoveCustomBoardBackgroundByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCustomBoardBackgroundByIdRequestBuilder removeCustomBoardBackgroundById(String idMember, String idBoardBackground) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idBoardBackground == null) throw new IllegalArgumentException("\"idBoardBackground\" is required but got null");
            

        return new RemoveCustomBoardBackgroundByIdRequestBuilder(idMember, idBoardBackground);
    }
    private okhttp3.Call removeCustomStickerByIdsCall(String idMember, String idCustomSticker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customStickers/{idCustomSticker}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idCustomSticker" + "}", localVarApiClient.escapeString(idCustomSticker.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCustomStickerByIdsValidateBeforeCall(String idMember, String idCustomSticker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling removeCustomStickerByIds(Async)");
        }

        // verify the required parameter 'idCustomSticker' is set
        if (idCustomSticker == null) {
            throw new ApiException("Missing the required parameter 'idCustomSticker' when calling removeCustomStickerByIds(Async)");
        }

        return removeCustomStickerByIdsCall(idMember, idCustomSticker, _callback);

    }


    private ApiResponse<Void> removeCustomStickerByIdsWithHttpInfo(String idMember, String idCustomSticker) throws ApiException {
        okhttp3.Call localVarCall = removeCustomStickerByIdsValidateBeforeCall(idMember, idCustomSticker, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeCustomStickerByIdsAsync(String idMember, String idCustomSticker, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCustomStickerByIdsValidateBeforeCall(idMember, idCustomSticker, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveCustomStickerByIdsRequestBuilder {
        private final String idMember;
        private final String idCustomSticker;

        private RemoveCustomStickerByIdsRequestBuilder(String idMember, String idCustomSticker) {
            this.idMember = idMember;
            this.idCustomSticker = idCustomSticker;
        }

        /**
         * Build call for removeCustomStickerByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCustomStickerByIdsCall(idMember, idCustomSticker, _callback);
        }


        /**
         * Execute removeCustomStickerByIds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeCustomStickerByIdsWithHttpInfo(idMember, idCustomSticker);
        }

        /**
         * Execute removeCustomStickerByIds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeCustomStickerByIdsWithHttpInfo(idMember, idCustomSticker);
        }

        /**
         * Execute removeCustomStickerByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeCustomStickerByIdsAsync(idMember, idCustomSticker, _callback);
        }
    }

    /**
     * deleteMembersCustomStickersByIdMemberByIdCustomSticker()
     * 
     * @param idMember idMember or username (required)
     * @param idCustomSticker idCustomSticker (required)
     * @return RemoveCustomStickerByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCustomStickerByIdsRequestBuilder removeCustomStickerByIds(String idMember, String idCustomSticker) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idCustomSticker == null) throw new IllegalArgumentException("\"idCustomSticker\" is required but got null");
            

        return new RemoveCustomStickerByIdsRequestBuilder(idMember, idCustomSticker);
    }
    private okhttp3.Call removeSavedSearchByIdsCall(String idMember, String idSavedSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches/{idSavedSearch}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idSavedSearch" + "}", localVarApiClient.escapeString(idSavedSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSavedSearchByIdsValidateBeforeCall(String idMember, String idSavedSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling removeSavedSearchByIds(Async)");
        }

        // verify the required parameter 'idSavedSearch' is set
        if (idSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'idSavedSearch' when calling removeSavedSearchByIds(Async)");
        }

        return removeSavedSearchByIdsCall(idMember, idSavedSearch, _callback);

    }


    private ApiResponse<Void> removeSavedSearchByIdsWithHttpInfo(String idMember, String idSavedSearch) throws ApiException {
        okhttp3.Call localVarCall = removeSavedSearchByIdsValidateBeforeCall(idMember, idSavedSearch, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeSavedSearchByIdsAsync(String idMember, String idSavedSearch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSavedSearchByIdsValidateBeforeCall(idMember, idSavedSearch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveSavedSearchByIdsRequestBuilder {
        private final String idMember;
        private final String idSavedSearch;

        private RemoveSavedSearchByIdsRequestBuilder(String idMember, String idSavedSearch) {
            this.idMember = idMember;
            this.idSavedSearch = idSavedSearch;
        }

        /**
         * Build call for removeSavedSearchByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSavedSearchByIdsCall(idMember, idSavedSearch, _callback);
        }


        /**
         * Execute removeSavedSearchByIds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeSavedSearchByIdsWithHttpInfo(idMember, idSavedSearch);
        }

        /**
         * Execute removeSavedSearchByIds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeSavedSearchByIdsWithHttpInfo(idMember, idSavedSearch);
        }

        /**
         * Execute removeSavedSearchByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeSavedSearchByIdsAsync(idMember, idSavedSearch, _callback);
        }
    }

    /**
     * deleteMembersSavedSearchesByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @return RemoveSavedSearchByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSavedSearchByIdsRequestBuilder removeSavedSearchByIds(String idMember, String idSavedSearch) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idSavedSearch == null) throw new IllegalArgumentException("\"idSavedSearch\" is required but got null");
            

        return new RemoveSavedSearchByIdsRequestBuilder(idMember, idSavedSearch);
    }
    private okhttp3.Call updateAvatarSourceCall(String idMember, MembersAvatarSource membersAvatarSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersAvatarSource;

        // create path and map variables
        String localVarPath = "/members/{idMember}/avatarSource"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAvatarSourceValidateBeforeCall(String idMember, MembersAvatarSource membersAvatarSource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateAvatarSource(Async)");
        }

        // verify the required parameter 'membersAvatarSource' is set
        if (membersAvatarSource == null) {
            throw new ApiException("Missing the required parameter 'membersAvatarSource' when calling updateAvatarSource(Async)");
        }

        return updateAvatarSourceCall(idMember, membersAvatarSource, _callback);

    }


    private ApiResponse<Void> updateAvatarSourceWithHttpInfo(String idMember, MembersAvatarSource membersAvatarSource) throws ApiException {
        okhttp3.Call localVarCall = updateAvatarSourceValidateBeforeCall(idMember, membersAvatarSource, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateAvatarSourceAsync(String idMember, MembersAvatarSource membersAvatarSource, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAvatarSourceValidateBeforeCall(idMember, membersAvatarSource, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateAvatarSourceRequestBuilder {
        private final String idMember;
        private String value;

        private UpdateAvatarSourceRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set value
         * @param value One of: gravatar, none or upload (optional)
         * @return UpdateAvatarSourceRequestBuilder
         */
        public UpdateAvatarSourceRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateAvatarSource
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersAvatarSource membersAvatarSource = buildBodyParams();
            return updateAvatarSourceCall(idMember, membersAvatarSource, _callback);
        }

        private MembersAvatarSource buildBodyParams() {
            MembersAvatarSource membersAvatarSource = new MembersAvatarSource();
            membersAvatarSource.value(this.value);
            return membersAvatarSource;
        }

        /**
         * Execute updateAvatarSource request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersAvatarSource membersAvatarSource = buildBodyParams();
            updateAvatarSourceWithHttpInfo(idMember, membersAvatarSource);
        }

        /**
         * Execute updateAvatarSource request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersAvatarSource membersAvatarSource = buildBodyParams();
            return updateAvatarSourceWithHttpInfo(idMember, membersAvatarSource);
        }

        /**
         * Execute updateAvatarSource request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersAvatarSource membersAvatarSource = buildBodyParams();
            return updateAvatarSourceAsync(idMember, membersAvatarSource, _callback);
        }
    }

    /**
     * updateMembersAvatarSourceByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersAvatarSource Attributes of \&quot;Members Avatar Source\&quot; to be updated. (required)
     * @return UpdateAvatarSourceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAvatarSourceRequestBuilder updateAvatarSource(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UpdateAvatarSourceRequestBuilder(idMember);
    }
    private okhttp3.Call updateBioByIdCall(String idMember, MembersBio membersBio, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBio;

        // create path and map variables
        String localVarPath = "/members/{idMember}/bio"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBioByIdValidateBeforeCall(String idMember, MembersBio membersBio, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateBioById(Async)");
        }

        // verify the required parameter 'membersBio' is set
        if (membersBio == null) {
            throw new ApiException("Missing the required parameter 'membersBio' when calling updateBioById(Async)");
        }

        return updateBioByIdCall(idMember, membersBio, _callback);

    }


    private ApiResponse<Void> updateBioByIdWithHttpInfo(String idMember, MembersBio membersBio) throws ApiException {
        okhttp3.Call localVarCall = updateBioByIdValidateBeforeCall(idMember, membersBio, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateBioByIdAsync(String idMember, MembersBio membersBio, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBioByIdValidateBeforeCall(idMember, membersBio, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateBioByIdRequestBuilder {
        private final String idMember;
        private String value;

        private UpdateBioByIdRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 16384 (optional)
         * @return UpdateBioByIdRequestBuilder
         */
        public UpdateBioByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateBioById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersBio membersBio = buildBodyParams();
            return updateBioByIdCall(idMember, membersBio, _callback);
        }

        private MembersBio buildBodyParams() {
            MembersBio membersBio = new MembersBio();
            membersBio.value(this.value);
            return membersBio;
        }

        /**
         * Execute updateBioById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersBio membersBio = buildBodyParams();
            updateBioByIdWithHttpInfo(idMember, membersBio);
        }

        /**
         * Execute updateBioById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersBio membersBio = buildBodyParams();
            return updateBioByIdWithHttpInfo(idMember, membersBio);
        }

        /**
         * Execute updateBioById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersBio membersBio = buildBodyParams();
            return updateBioByIdAsync(idMember, membersBio, _callback);
        }
    }

    /**
     * updateMembersBioByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersBio Attributes of \&quot;Members Bio\&quot; to be updated. (required)
     * @return UpdateBioByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBioByIdRequestBuilder updateBioById(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UpdateBioByIdRequestBuilder(idMember);
    }
    private okhttp3.Call updateBoardBackgroundsByIdCall(String idMember, String idBoardBackground, MembersBoardBackgrounds membersBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBoardBackgrounds;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardBackgrounds/{idBoardBackground}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardBackground" + "}", localVarApiClient.escapeString(idBoardBackground.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardBackgroundsByIdValidateBeforeCall(String idMember, String idBoardBackground, MembersBoardBackgrounds membersBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateBoardBackgroundsById(Async)");
        }

        // verify the required parameter 'idBoardBackground' is set
        if (idBoardBackground == null) {
            throw new ApiException("Missing the required parameter 'idBoardBackground' when calling updateBoardBackgroundsById(Async)");
        }

        // verify the required parameter 'membersBoardBackgrounds' is set
        if (membersBoardBackgrounds == null) {
            throw new ApiException("Missing the required parameter 'membersBoardBackgrounds' when calling updateBoardBackgroundsById(Async)");
        }

        return updateBoardBackgroundsByIdCall(idMember, idBoardBackground, membersBoardBackgrounds, _callback);

    }


    private ApiResponse<Void> updateBoardBackgroundsByIdWithHttpInfo(String idMember, String idBoardBackground, MembersBoardBackgrounds membersBoardBackgrounds) throws ApiException {
        okhttp3.Call localVarCall = updateBoardBackgroundsByIdValidateBeforeCall(idMember, idBoardBackground, membersBoardBackgrounds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateBoardBackgroundsByIdAsync(String idMember, String idBoardBackground, MembersBoardBackgrounds membersBoardBackgrounds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardBackgroundsByIdValidateBeforeCall(idMember, idBoardBackground, membersBoardBackgrounds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateBoardBackgroundsByIdRequestBuilder {
        private final String idMember;
        private final String idBoardBackground;
        private String brightness;
        private String _file;
        private String tile;

        private UpdateBoardBackgroundsByIdRequestBuilder(String idMember, String idBoardBackground) {
            this.idMember = idMember;
            this.idBoardBackground = idBoardBackground;
        }

        /**
         * Set brightness
         * @param brightness One of: dark, light or unknown (optional)
         * @return UpdateBoardBackgroundsByIdRequestBuilder
         */
        public UpdateBoardBackgroundsByIdRequestBuilder brightness(String brightness) {
            this.brightness = brightness;
            return this;
        }
        
        /**
         * Set _file
         * @param _file A file (optional)
         * @return UpdateBoardBackgroundsByIdRequestBuilder
         */
        public UpdateBoardBackgroundsByIdRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set tile
         * @param tile  true or false (optional)
         * @return UpdateBoardBackgroundsByIdRequestBuilder
         */
        public UpdateBoardBackgroundsByIdRequestBuilder tile(String tile) {
            this.tile = tile;
            return this;
        }
        
        /**
         * Build call for updateBoardBackgroundsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersBoardBackgrounds membersBoardBackgrounds = buildBodyParams();
            return updateBoardBackgroundsByIdCall(idMember, idBoardBackground, membersBoardBackgrounds, _callback);
        }

        private MembersBoardBackgrounds buildBodyParams() {
            MembersBoardBackgrounds membersBoardBackgrounds = new MembersBoardBackgrounds();
            membersBoardBackgrounds.brightness(this.brightness);
            membersBoardBackgrounds._file(this._file);
            membersBoardBackgrounds.tile(this.tile);
            return membersBoardBackgrounds;
        }

        /**
         * Execute updateBoardBackgroundsById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersBoardBackgrounds membersBoardBackgrounds = buildBodyParams();
            updateBoardBackgroundsByIdWithHttpInfo(idMember, idBoardBackground, membersBoardBackgrounds);
        }

        /**
         * Execute updateBoardBackgroundsById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersBoardBackgrounds membersBoardBackgrounds = buildBodyParams();
            return updateBoardBackgroundsByIdWithHttpInfo(idMember, idBoardBackground, membersBoardBackgrounds);
        }

        /**
         * Execute updateBoardBackgroundsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersBoardBackgrounds membersBoardBackgrounds = buildBodyParams();
            return updateBoardBackgroundsByIdAsync(idMember, idBoardBackground, membersBoardBackgrounds, _callback);
        }
    }

    /**
     * updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param membersBoardBackgrounds Attributes of \&quot;Members Board Backgrounds\&quot; to be updated. (required)
     * @return UpdateBoardBackgroundsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBoardBackgroundsByIdRequestBuilder updateBoardBackgroundsById(String idMember, String idBoardBackground) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idBoardBackground == null) throw new IllegalArgumentException("\"idBoardBackground\" is required but got null");
            

        return new UpdateBoardBackgroundsByIdRequestBuilder(idMember, idBoardBackground);
    }
    private okhttp3.Call updateBoardStarCall(String idMember, String idBoardStar, MembersBoardStars membersBoardStars, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBoardStars;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars/{idBoardStar}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardStar" + "}", localVarApiClient.escapeString(idBoardStar.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardStarValidateBeforeCall(String idMember, String idBoardStar, MembersBoardStars membersBoardStars, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateBoardStar(Async)");
        }

        // verify the required parameter 'idBoardStar' is set
        if (idBoardStar == null) {
            throw new ApiException("Missing the required parameter 'idBoardStar' when calling updateBoardStar(Async)");
        }

        // verify the required parameter 'membersBoardStars' is set
        if (membersBoardStars == null) {
            throw new ApiException("Missing the required parameter 'membersBoardStars' when calling updateBoardStar(Async)");
        }

        return updateBoardStarCall(idMember, idBoardStar, membersBoardStars, _callback);

    }


    private ApiResponse<Void> updateBoardStarWithHttpInfo(String idMember, String idBoardStar, MembersBoardStars membersBoardStars) throws ApiException {
        okhttp3.Call localVarCall = updateBoardStarValidateBeforeCall(idMember, idBoardStar, membersBoardStars, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateBoardStarAsync(String idMember, String idBoardStar, MembersBoardStars membersBoardStars, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardStarValidateBeforeCall(idMember, idBoardStar, membersBoardStars, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateBoardStarRequestBuilder {
        private final String idMember;
        private final String idBoardStar;
        private String idBoard;
        private String pos;

        private UpdateBoardStarRequestBuilder(String idMember, String idBoardStar) {
            this.idMember = idMember;
            this.idBoardStar = idBoardStar;
        }

        /**
         * Set idBoard
         * @param idBoard The id of the board to star (optional)
         * @return UpdateBoardStarRequestBuilder
         */
        public UpdateBoardStarRequestBuilder idBoard(String idBoard) {
            this.idBoard = idBoard;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return UpdateBoardStarRequestBuilder
         */
        public UpdateBoardStarRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Build call for updateBoardStar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersBoardStars membersBoardStars = buildBodyParams();
            return updateBoardStarCall(idMember, idBoardStar, membersBoardStars, _callback);
        }

        private MembersBoardStars buildBodyParams() {
            MembersBoardStars membersBoardStars = new MembersBoardStars();
            membersBoardStars.idBoard(this.idBoard);
            membersBoardStars.pos(this.pos);
            return membersBoardStars;
        }

        /**
         * Execute updateBoardStar request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersBoardStars membersBoardStars = buildBodyParams();
            updateBoardStarWithHttpInfo(idMember, idBoardStar, membersBoardStars);
        }

        /**
         * Execute updateBoardStar request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersBoardStars membersBoardStars = buildBodyParams();
            return updateBoardStarWithHttpInfo(idMember, idBoardStar, membersBoardStars);
        }

        /**
         * Execute updateBoardStar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersBoardStars membersBoardStars = buildBodyParams();
            return updateBoardStarAsync(idMember, idBoardStar, membersBoardStars, _callback);
        }
    }

    /**
     * updateMembersBoardStarsByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param membersBoardStars Attributes of \&quot;Members Board Stars\&quot; to be updated. (required)
     * @return UpdateBoardStarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBoardStarRequestBuilder updateBoardStar(String idMember, String idBoardStar) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idBoardStar == null) throw new IllegalArgumentException("\"idBoardStar\" is required but got null");
            

        return new UpdateBoardStarRequestBuilder(idMember, idBoardStar);
    }
    private okhttp3.Call updateBoardStarPosByIdMemberByIdBoardStarCall(String idMember, String idBoardStar, MembersBoardStarsPos membersBoardStarsPos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBoardStarsPos;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars/{idBoardStar}/pos"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardStar" + "}", localVarApiClient.escapeString(idBoardStar.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardStarPosByIdMemberByIdBoardStarValidateBeforeCall(String idMember, String idBoardStar, MembersBoardStarsPos membersBoardStarsPos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateBoardStarPosByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'idBoardStar' is set
        if (idBoardStar == null) {
            throw new ApiException("Missing the required parameter 'idBoardStar' when calling updateBoardStarPosByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'membersBoardStarsPos' is set
        if (membersBoardStarsPos == null) {
            throw new ApiException("Missing the required parameter 'membersBoardStarsPos' when calling updateBoardStarPosByIdMemberByIdBoardStar(Async)");
        }

        return updateBoardStarPosByIdMemberByIdBoardStarCall(idMember, idBoardStar, membersBoardStarsPos, _callback);

    }


    private ApiResponse<Void> updateBoardStarPosByIdMemberByIdBoardStarWithHttpInfo(String idMember, String idBoardStar, MembersBoardStarsPos membersBoardStarsPos) throws ApiException {
        okhttp3.Call localVarCall = updateBoardStarPosByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, membersBoardStarsPos, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateBoardStarPosByIdMemberByIdBoardStarAsync(String idMember, String idBoardStar, MembersBoardStarsPos membersBoardStarsPos, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardStarPosByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, membersBoardStarsPos, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateBoardStarPosByIdMemberByIdBoardStarRequestBuilder {
        private final String idMember;
        private final String idBoardStar;
        private String value;

        private UpdateBoardStarPosByIdMemberByIdBoardStarRequestBuilder(String idMember, String idBoardStar) {
            this.idMember = idMember;
            this.idBoardStar = idBoardStar;
        }

        /**
         * Set value
         * @param value A position. top , bottom , or a positive number. (optional)
         * @return UpdateBoardStarPosByIdMemberByIdBoardStarRequestBuilder
         */
        public UpdateBoardStarPosByIdMemberByIdBoardStarRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateBoardStarPosByIdMemberByIdBoardStar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersBoardStarsPos membersBoardStarsPos = buildBodyParams();
            return updateBoardStarPosByIdMemberByIdBoardStarCall(idMember, idBoardStar, membersBoardStarsPos, _callback);
        }

        private MembersBoardStarsPos buildBodyParams() {
            MembersBoardStarsPos membersBoardStarsPos = new MembersBoardStarsPos();
            membersBoardStarsPos.value(this.value);
            return membersBoardStarsPos;
        }

        /**
         * Execute updateBoardStarPosByIdMemberByIdBoardStar request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersBoardStarsPos membersBoardStarsPos = buildBodyParams();
            updateBoardStarPosByIdMemberByIdBoardStarWithHttpInfo(idMember, idBoardStar, membersBoardStarsPos);
        }

        /**
         * Execute updateBoardStarPosByIdMemberByIdBoardStar request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersBoardStarsPos membersBoardStarsPos = buildBodyParams();
            return updateBoardStarPosByIdMemberByIdBoardStarWithHttpInfo(idMember, idBoardStar, membersBoardStarsPos);
        }

        /**
         * Execute updateBoardStarPosByIdMemberByIdBoardStar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersBoardStarsPos membersBoardStarsPos = buildBodyParams();
            return updateBoardStarPosByIdMemberByIdBoardStarAsync(idMember, idBoardStar, membersBoardStarsPos, _callback);
        }
    }

    /**
     * updateMembersBoardStarsPosByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param membersBoardStarsPos Attributes of \&quot;Members Board Stars Pos\&quot; to be updated. (required)
     * @return UpdateBoardStarPosByIdMemberByIdBoardStarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBoardStarPosByIdMemberByIdBoardStarRequestBuilder updateBoardStarPosByIdMemberByIdBoardStar(String idMember, String idBoardStar) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idBoardStar == null) throw new IllegalArgumentException("\"idBoardStar\" is required but got null");
            

        return new UpdateBoardStarPosByIdMemberByIdBoardStarRequestBuilder(idMember, idBoardStar);
    }
    private okhttp3.Call updateBoardStarsIdBoardCall(String idMember, String idBoardStar, MembersBoardStarsIdBoard membersBoardStarsIdBoard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBoardStarsIdBoard;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars/{idBoardStar}/idBoard"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardStar" + "}", localVarApiClient.escapeString(idBoardStar.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoardStarsIdBoardValidateBeforeCall(String idMember, String idBoardStar, MembersBoardStarsIdBoard membersBoardStarsIdBoard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateBoardStarsIdBoard(Async)");
        }

        // verify the required parameter 'idBoardStar' is set
        if (idBoardStar == null) {
            throw new ApiException("Missing the required parameter 'idBoardStar' when calling updateBoardStarsIdBoard(Async)");
        }

        // verify the required parameter 'membersBoardStarsIdBoard' is set
        if (membersBoardStarsIdBoard == null) {
            throw new ApiException("Missing the required parameter 'membersBoardStarsIdBoard' when calling updateBoardStarsIdBoard(Async)");
        }

        return updateBoardStarsIdBoardCall(idMember, idBoardStar, membersBoardStarsIdBoard, _callback);

    }


    private ApiResponse<Void> updateBoardStarsIdBoardWithHttpInfo(String idMember, String idBoardStar, MembersBoardStarsIdBoard membersBoardStarsIdBoard) throws ApiException {
        okhttp3.Call localVarCall = updateBoardStarsIdBoardValidateBeforeCall(idMember, idBoardStar, membersBoardStarsIdBoard, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateBoardStarsIdBoardAsync(String idMember, String idBoardStar, MembersBoardStarsIdBoard membersBoardStarsIdBoard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoardStarsIdBoardValidateBeforeCall(idMember, idBoardStar, membersBoardStarsIdBoard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateBoardStarsIdBoardRequestBuilder {
        private final String idMember;
        private final String idBoardStar;
        private String value;

        private UpdateBoardStarsIdBoardRequestBuilder(String idMember, String idBoardStar) {
            this.idMember = idMember;
            this.idBoardStar = idBoardStar;
        }

        /**
         * Set value
         * @param value An id (optional)
         * @return UpdateBoardStarsIdBoardRequestBuilder
         */
        public UpdateBoardStarsIdBoardRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateBoardStarsIdBoard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersBoardStarsIdBoard membersBoardStarsIdBoard = buildBodyParams();
            return updateBoardStarsIdBoardCall(idMember, idBoardStar, membersBoardStarsIdBoard, _callback);
        }

        private MembersBoardStarsIdBoard buildBodyParams() {
            MembersBoardStarsIdBoard membersBoardStarsIdBoard = new MembersBoardStarsIdBoard();
            membersBoardStarsIdBoard.value(this.value);
            return membersBoardStarsIdBoard;
        }

        /**
         * Execute updateBoardStarsIdBoard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersBoardStarsIdBoard membersBoardStarsIdBoard = buildBodyParams();
            updateBoardStarsIdBoardWithHttpInfo(idMember, idBoardStar, membersBoardStarsIdBoard);
        }

        /**
         * Execute updateBoardStarsIdBoard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersBoardStarsIdBoard membersBoardStarsIdBoard = buildBodyParams();
            return updateBoardStarsIdBoardWithHttpInfo(idMember, idBoardStar, membersBoardStarsIdBoard);
        }

        /**
         * Execute updateBoardStarsIdBoard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersBoardStarsIdBoard membersBoardStarsIdBoard = buildBodyParams();
            return updateBoardStarsIdBoardAsync(idMember, idBoardStar, membersBoardStarsIdBoard, _callback);
        }
    }

    /**
     * updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param membersBoardStarsIdBoard Attributes of \&quot;Members Board Stars Id Board\&quot; to be updated. (required)
     * @return UpdateBoardStarsIdBoardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBoardStarsIdBoardRequestBuilder updateBoardStarsIdBoard(String idMember, String idBoardStar) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idBoardStar == null) throw new IllegalArgumentException("\"idBoardStar\" is required but got null");
            

        return new UpdateBoardStarsIdBoardRequestBuilder(idMember, idBoardStar);
    }
    private okhttp3.Call updateByIdMemberCall(String idMember, Members members, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = members;

        // create path and map variables
        String localVarPath = "/members/{idMember}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdMemberValidateBeforeCall(String idMember, Members members, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateByIdMember(Async)");
        }

        // verify the required parameter 'members' is set
        if (members == null) {
            throw new ApiException("Missing the required parameter 'members' when calling updateByIdMember(Async)");
        }

        return updateByIdMemberCall(idMember, members, _callback);

    }


    private ApiResponse<Void> updateByIdMemberWithHttpInfo(String idMember, Members members) throws ApiException {
        okhttp3.Call localVarCall = updateByIdMemberValidateBeforeCall(idMember, members, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdMemberAsync(String idMember, Members members, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdMemberValidateBeforeCall(idMember, members, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdMemberRequestBuilder {
        private final String idMember;
        private String avatarSource;
        private String bio;
        private String fullName;
        private String initials;
        private String prefsColorBlind;
        private String prefsLocale;
        private String prefsMinutesBetweenSummaries;
        private String username;

        private UpdateByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set avatarSource
         * @param avatarSource One of: gravatar, none or upload (optional)
         * @return UpdateByIdMemberRequestBuilder
         */
        public UpdateByIdMemberRequestBuilder avatarSource(String avatarSource) {
            this.avatarSource = avatarSource;
            return this;
        }
        
        /**
         * Set bio
         * @param bio a string with a length from 0 to 16384 (optional)
         * @return UpdateByIdMemberRequestBuilder
         */
        public UpdateByIdMemberRequestBuilder bio(String bio) {
            this.bio = bio;
            return this;
        }
        
        /**
         * Set fullName
         * @param fullName A string with a length of at least 1.  Cannot begin or end with a space. (optional)
         * @return UpdateByIdMemberRequestBuilder
         */
        public UpdateByIdMemberRequestBuilder fullName(String fullName) {
            this.fullName = fullName;
            return this;
        }
        
        /**
         * Set initials
         * @param initials A string with a length from 1 to 4.  Cannot begin or end with a space (optional)
         * @return UpdateByIdMemberRequestBuilder
         */
        public UpdateByIdMemberRequestBuilder initials(String initials) {
            this.initials = initials;
            return this;
        }
        
        /**
         * Set prefsColorBlind
         * @param prefsColorBlind  true or false (optional)
         * @return UpdateByIdMemberRequestBuilder
         */
        public UpdateByIdMemberRequestBuilder prefsColorBlind(String prefsColorBlind) {
            this.prefsColorBlind = prefsColorBlind;
            return this;
        }
        
        /**
         * Set prefsLocale
         * @param prefsLocale a string with a length from 0 to 255 (optional)
         * @return UpdateByIdMemberRequestBuilder
         */
        public UpdateByIdMemberRequestBuilder prefsLocale(String prefsLocale) {
            this.prefsLocale = prefsLocale;
            return this;
        }
        
        /**
         * Set prefsMinutesBetweenSummaries
         * @param prefsMinutesBetweenSummaries -1 (disabled), 1 or 60 (optional)
         * @return UpdateByIdMemberRequestBuilder
         */
        public UpdateByIdMemberRequestBuilder prefsMinutesBetweenSummaries(String prefsMinutesBetweenSummaries) {
            this.prefsMinutesBetweenSummaries = prefsMinutesBetweenSummaries;
            return this;
        }
        
        /**
         * Set username
         * @param username A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique. (optional)
         * @return UpdateByIdMemberRequestBuilder
         */
        public UpdateByIdMemberRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Build call for updateByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Members members = buildBodyParams();
            return updateByIdMemberCall(idMember, members, _callback);
        }

        private Members buildBodyParams() {
            Members members = new Members();
            members.avatarSource(this.avatarSource);
            members.bio(this.bio);
            members.fullName(this.fullName);
            members.initials(this.initials);
            members.prefsColorBlind(this.prefsColorBlind);
            members.prefsLocale(this.prefsLocale);
            members.prefsMinutesBetweenSummaries(this.prefsMinutesBetweenSummaries);
            members.username(this.username);
            return members;
        }

        /**
         * Execute updateByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Members members = buildBodyParams();
            updateByIdMemberWithHttpInfo(idMember, members);
        }

        /**
         * Execute updateByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Members members = buildBodyParams();
            return updateByIdMemberWithHttpInfo(idMember, members);
        }

        /**
         * Execute updateByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Members members = buildBodyParams();
            return updateByIdMemberAsync(idMember, members, _callback);
        }
    }

    /**
     * updateMembersByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param members Attributes of \&quot;Members\&quot; to be updated. (required)
     * @return UpdateByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdMemberRequestBuilder updateByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UpdateByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call updateCustomBoardBackgroundsCall(String idMember, String idBoardBackground, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersCustomBoardBackgrounds;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customBoardBackgrounds/{idBoardBackground}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardBackground" + "}", localVarApiClient.escapeString(idBoardBackground.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomBoardBackgroundsValidateBeforeCall(String idMember, String idBoardBackground, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateCustomBoardBackgrounds(Async)");
        }

        // verify the required parameter 'idBoardBackground' is set
        if (idBoardBackground == null) {
            throw new ApiException("Missing the required parameter 'idBoardBackground' when calling updateCustomBoardBackgrounds(Async)");
        }

        // verify the required parameter 'membersCustomBoardBackgrounds' is set
        if (membersCustomBoardBackgrounds == null) {
            throw new ApiException("Missing the required parameter 'membersCustomBoardBackgrounds' when calling updateCustomBoardBackgrounds(Async)");
        }

        return updateCustomBoardBackgroundsCall(idMember, idBoardBackground, membersCustomBoardBackgrounds, _callback);

    }


    private ApiResponse<Void> updateCustomBoardBackgroundsWithHttpInfo(String idMember, String idBoardBackground, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds) throws ApiException {
        okhttp3.Call localVarCall = updateCustomBoardBackgroundsValidateBeforeCall(idMember, idBoardBackground, membersCustomBoardBackgrounds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateCustomBoardBackgroundsAsync(String idMember, String idBoardBackground, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomBoardBackgroundsValidateBeforeCall(idMember, idBoardBackground, membersCustomBoardBackgrounds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateCustomBoardBackgroundsRequestBuilder {
        private final String idMember;
        private final String idBoardBackground;
        private String brightness;
        private String _file;
        private String tile;

        private UpdateCustomBoardBackgroundsRequestBuilder(String idMember, String idBoardBackground) {
            this.idMember = idMember;
            this.idBoardBackground = idBoardBackground;
        }

        /**
         * Set brightness
         * @param brightness One of: dark, light or unknown (optional)
         * @return UpdateCustomBoardBackgroundsRequestBuilder
         */
        public UpdateCustomBoardBackgroundsRequestBuilder brightness(String brightness) {
            this.brightness = brightness;
            return this;
        }
        
        /**
         * Set _file
         * @param _file A file (optional)
         * @return UpdateCustomBoardBackgroundsRequestBuilder
         */
        public UpdateCustomBoardBackgroundsRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set tile
         * @param tile  true or false (optional)
         * @return UpdateCustomBoardBackgroundsRequestBuilder
         */
        public UpdateCustomBoardBackgroundsRequestBuilder tile(String tile) {
            this.tile = tile;
            return this;
        }
        
        /**
         * Build call for updateCustomBoardBackgrounds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersCustomBoardBackgrounds membersCustomBoardBackgrounds = buildBodyParams();
            return updateCustomBoardBackgroundsCall(idMember, idBoardBackground, membersCustomBoardBackgrounds, _callback);
        }

        private MembersCustomBoardBackgrounds buildBodyParams() {
            MembersCustomBoardBackgrounds membersCustomBoardBackgrounds = new MembersCustomBoardBackgrounds();
            membersCustomBoardBackgrounds.brightness(this.brightness);
            membersCustomBoardBackgrounds._file(this._file);
            membersCustomBoardBackgrounds.tile(this.tile);
            return membersCustomBoardBackgrounds;
        }

        /**
         * Execute updateCustomBoardBackgrounds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersCustomBoardBackgrounds membersCustomBoardBackgrounds = buildBodyParams();
            updateCustomBoardBackgroundsWithHttpInfo(idMember, idBoardBackground, membersCustomBoardBackgrounds);
        }

        /**
         * Execute updateCustomBoardBackgrounds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersCustomBoardBackgrounds membersCustomBoardBackgrounds = buildBodyParams();
            return updateCustomBoardBackgroundsWithHttpInfo(idMember, idBoardBackground, membersCustomBoardBackgrounds);
        }

        /**
         * Execute updateCustomBoardBackgrounds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersCustomBoardBackgrounds membersCustomBoardBackgrounds = buildBodyParams();
            return updateCustomBoardBackgroundsAsync(idMember, idBoardBackground, membersCustomBoardBackgrounds, _callback);
        }
    }

    /**
     * updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param membersCustomBoardBackgrounds Attributes of \&quot;Members Custom Board Backgrounds\&quot; to be updated. (required)
     * @return UpdateCustomBoardBackgroundsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomBoardBackgroundsRequestBuilder updateCustomBoardBackgrounds(String idMember, String idBoardBackground) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idBoardBackground == null) throw new IllegalArgumentException("\"idBoardBackground\" is required but got null");
            

        return new UpdateCustomBoardBackgroundsRequestBuilder(idMember, idBoardBackground);
    }
    private okhttp3.Call updateFullNameCall(String idMember, MembersFullName membersFullName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersFullName;

        // create path and map variables
        String localVarPath = "/members/{idMember}/fullName"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFullNameValidateBeforeCall(String idMember, MembersFullName membersFullName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateFullName(Async)");
        }

        // verify the required parameter 'membersFullName' is set
        if (membersFullName == null) {
            throw new ApiException("Missing the required parameter 'membersFullName' when calling updateFullName(Async)");
        }

        return updateFullNameCall(idMember, membersFullName, _callback);

    }


    private ApiResponse<Void> updateFullNameWithHttpInfo(String idMember, MembersFullName membersFullName) throws ApiException {
        okhttp3.Call localVarCall = updateFullNameValidateBeforeCall(idMember, membersFullName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateFullNameAsync(String idMember, MembersFullName membersFullName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFullNameValidateBeforeCall(idMember, membersFullName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateFullNameRequestBuilder {
        private final String idMember;
        private String value;

        private UpdateFullNameRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set value
         * @param value A string with a length of at least 1.  Cannot begin or end with a space. (optional)
         * @return UpdateFullNameRequestBuilder
         */
        public UpdateFullNameRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateFullName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersFullName membersFullName = buildBodyParams();
            return updateFullNameCall(idMember, membersFullName, _callback);
        }

        private MembersFullName buildBodyParams() {
            MembersFullName membersFullName = new MembersFullName();
            membersFullName.value(this.value);
            return membersFullName;
        }

        /**
         * Execute updateFullName request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersFullName membersFullName = buildBodyParams();
            updateFullNameWithHttpInfo(idMember, membersFullName);
        }

        /**
         * Execute updateFullName request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersFullName membersFullName = buildBodyParams();
            return updateFullNameWithHttpInfo(idMember, membersFullName);
        }

        /**
         * Execute updateFullName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersFullName membersFullName = buildBodyParams();
            return updateFullNameAsync(idMember, membersFullName, _callback);
        }
    }

    /**
     * updateMembersFullNameByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersFullName Attributes of \&quot;Members Full Name\&quot; to be updated. (required)
     * @return UpdateFullNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFullNameRequestBuilder updateFullName(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UpdateFullNameRequestBuilder(idMember);
    }
    private okhttp3.Call updateInitialsByIdMemberCall(String idMember, MembersInitials membersInitials, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersInitials;

        // create path and map variables
        String localVarPath = "/members/{idMember}/initials"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInitialsByIdMemberValidateBeforeCall(String idMember, MembersInitials membersInitials, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateInitialsByIdMember(Async)");
        }

        // verify the required parameter 'membersInitials' is set
        if (membersInitials == null) {
            throw new ApiException("Missing the required parameter 'membersInitials' when calling updateInitialsByIdMember(Async)");
        }

        return updateInitialsByIdMemberCall(idMember, membersInitials, _callback);

    }


    private ApiResponse<Void> updateInitialsByIdMemberWithHttpInfo(String idMember, MembersInitials membersInitials) throws ApiException {
        okhttp3.Call localVarCall = updateInitialsByIdMemberValidateBeforeCall(idMember, membersInitials, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateInitialsByIdMemberAsync(String idMember, MembersInitials membersInitials, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInitialsByIdMemberValidateBeforeCall(idMember, membersInitials, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateInitialsByIdMemberRequestBuilder {
        private final String idMember;
        private String value;

        private UpdateInitialsByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set value
         * @param value A string with a length from 1 to 4.  Cannot begin or end with a space (optional)
         * @return UpdateInitialsByIdMemberRequestBuilder
         */
        public UpdateInitialsByIdMemberRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateInitialsByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersInitials membersInitials = buildBodyParams();
            return updateInitialsByIdMemberCall(idMember, membersInitials, _callback);
        }

        private MembersInitials buildBodyParams() {
            MembersInitials membersInitials = new MembersInitials();
            membersInitials.value(this.value);
            return membersInitials;
        }

        /**
         * Execute updateInitialsByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersInitials membersInitials = buildBodyParams();
            updateInitialsByIdMemberWithHttpInfo(idMember, membersInitials);
        }

        /**
         * Execute updateInitialsByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersInitials membersInitials = buildBodyParams();
            return updateInitialsByIdMemberWithHttpInfo(idMember, membersInitials);
        }

        /**
         * Execute updateInitialsByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersInitials membersInitials = buildBodyParams();
            return updateInitialsByIdMemberAsync(idMember, membersInitials, _callback);
        }
    }

    /**
     * updateMembersInitialsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersInitials Attributes of \&quot;Members Initials\&quot; to be updated. (required)
     * @return UpdateInitialsByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInitialsByIdMemberRequestBuilder updateInitialsByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UpdateInitialsByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call updatePrefsColorBlindByIdMemberCall(String idMember, PrefsColorBlind prefsColorBlind, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsColorBlind;

        // create path and map variables
        String localVarPath = "/members/{idMember}/prefs/colorBlind"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsColorBlindByIdMemberValidateBeforeCall(String idMember, PrefsColorBlind prefsColorBlind, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updatePrefsColorBlindByIdMember(Async)");
        }

        // verify the required parameter 'prefsColorBlind' is set
        if (prefsColorBlind == null) {
            throw new ApiException("Missing the required parameter 'prefsColorBlind' when calling updatePrefsColorBlindByIdMember(Async)");
        }

        return updatePrefsColorBlindByIdMemberCall(idMember, prefsColorBlind, _callback);

    }


    private ApiResponse<Void> updatePrefsColorBlindByIdMemberWithHttpInfo(String idMember, PrefsColorBlind prefsColorBlind) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsColorBlindByIdMemberValidateBeforeCall(idMember, prefsColorBlind, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsColorBlindByIdMemberAsync(String idMember, PrefsColorBlind prefsColorBlind, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsColorBlindByIdMemberValidateBeforeCall(idMember, prefsColorBlind, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsColorBlindByIdMemberRequestBuilder {
        private final String idMember;
        private String value;

        private UpdatePrefsColorBlindByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set value
         * @param value  true or false (optional)
         * @return UpdatePrefsColorBlindByIdMemberRequestBuilder
         */
        public UpdatePrefsColorBlindByIdMemberRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsColorBlindByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsColorBlind prefsColorBlind = buildBodyParams();
            return updatePrefsColorBlindByIdMemberCall(idMember, prefsColorBlind, _callback);
        }

        private PrefsColorBlind buildBodyParams() {
            PrefsColorBlind prefsColorBlind = new PrefsColorBlind();
            prefsColorBlind.value(this.value);
            return prefsColorBlind;
        }

        /**
         * Execute updatePrefsColorBlindByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsColorBlind prefsColorBlind = buildBodyParams();
            updatePrefsColorBlindByIdMemberWithHttpInfo(idMember, prefsColorBlind);
        }

        /**
         * Execute updatePrefsColorBlindByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsColorBlind prefsColorBlind = buildBodyParams();
            return updatePrefsColorBlindByIdMemberWithHttpInfo(idMember, prefsColorBlind);
        }

        /**
         * Execute updatePrefsColorBlindByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsColorBlind prefsColorBlind = buildBodyParams();
            return updatePrefsColorBlindByIdMemberAsync(idMember, prefsColorBlind, _callback);
        }
    }

    /**
     * updateMembersPrefsColorBlindByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param prefsColorBlind Attributes of \&quot;Prefs Color Blind\&quot; to be updated. (required)
     * @return UpdatePrefsColorBlindByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsColorBlindByIdMemberRequestBuilder updatePrefsColorBlindByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UpdatePrefsColorBlindByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call updatePrefsLocaleByIdMemberCall(String idMember, PrefsLocale prefsLocale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsLocale;

        // create path and map variables
        String localVarPath = "/members/{idMember}/prefs/locale"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsLocaleByIdMemberValidateBeforeCall(String idMember, PrefsLocale prefsLocale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updatePrefsLocaleByIdMember(Async)");
        }

        // verify the required parameter 'prefsLocale' is set
        if (prefsLocale == null) {
            throw new ApiException("Missing the required parameter 'prefsLocale' when calling updatePrefsLocaleByIdMember(Async)");
        }

        return updatePrefsLocaleByIdMemberCall(idMember, prefsLocale, _callback);

    }


    private ApiResponse<Void> updatePrefsLocaleByIdMemberWithHttpInfo(String idMember, PrefsLocale prefsLocale) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsLocaleByIdMemberValidateBeforeCall(idMember, prefsLocale, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsLocaleByIdMemberAsync(String idMember, PrefsLocale prefsLocale, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsLocaleByIdMemberValidateBeforeCall(idMember, prefsLocale, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsLocaleByIdMemberRequestBuilder {
        private final String idMember;
        private String value;

        private UpdatePrefsLocaleByIdMemberRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set value
         * @param value a string with a length from 0 to 255 (optional)
         * @return UpdatePrefsLocaleByIdMemberRequestBuilder
         */
        public UpdatePrefsLocaleByIdMemberRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsLocaleByIdMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsLocale prefsLocale = buildBodyParams();
            return updatePrefsLocaleByIdMemberCall(idMember, prefsLocale, _callback);
        }

        private PrefsLocale buildBodyParams() {
            PrefsLocale prefsLocale = new PrefsLocale();
            prefsLocale.value(this.value);
            return prefsLocale;
        }

        /**
         * Execute updatePrefsLocaleByIdMember request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsLocale prefsLocale = buildBodyParams();
            updatePrefsLocaleByIdMemberWithHttpInfo(idMember, prefsLocale);
        }

        /**
         * Execute updatePrefsLocaleByIdMember request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsLocale prefsLocale = buildBodyParams();
            return updatePrefsLocaleByIdMemberWithHttpInfo(idMember, prefsLocale);
        }

        /**
         * Execute updatePrefsLocaleByIdMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsLocale prefsLocale = buildBodyParams();
            return updatePrefsLocaleByIdMemberAsync(idMember, prefsLocale, _callback);
        }
    }

    /**
     * updateMembersPrefsLocaleByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param prefsLocale Attributes of \&quot;Prefs Locale\&quot; to be updated. (required)
     * @return UpdatePrefsLocaleByIdMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsLocaleByIdMemberRequestBuilder updatePrefsLocaleByIdMember(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UpdatePrefsLocaleByIdMemberRequestBuilder(idMember);
    }
    private okhttp3.Call updatePrefsMinutesBetweenSummariesByIdCall(String idMember, PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsMinutesBetweenSummaries;

        // create path and map variables
        String localVarPath = "/members/{idMember}/prefs/minutesBetweenSummaries"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrefsMinutesBetweenSummariesByIdValidateBeforeCall(String idMember, PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updatePrefsMinutesBetweenSummariesById(Async)");
        }

        // verify the required parameter 'prefsMinutesBetweenSummaries' is set
        if (prefsMinutesBetweenSummaries == null) {
            throw new ApiException("Missing the required parameter 'prefsMinutesBetweenSummaries' when calling updatePrefsMinutesBetweenSummariesById(Async)");
        }

        return updatePrefsMinutesBetweenSummariesByIdCall(idMember, prefsMinutesBetweenSummaries, _callback);

    }


    private ApiResponse<Void> updatePrefsMinutesBetweenSummariesByIdWithHttpInfo(String idMember, PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries) throws ApiException {
        okhttp3.Call localVarCall = updatePrefsMinutesBetweenSummariesByIdValidateBeforeCall(idMember, prefsMinutesBetweenSummaries, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePrefsMinutesBetweenSummariesByIdAsync(String idMember, PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrefsMinutesBetweenSummariesByIdValidateBeforeCall(idMember, prefsMinutesBetweenSummaries, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePrefsMinutesBetweenSummariesByIdRequestBuilder {
        private final String idMember;
        private String value;

        private UpdatePrefsMinutesBetweenSummariesByIdRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set value
         * @param value -1 (disabled), 1 or 60 (optional)
         * @return UpdatePrefsMinutesBetweenSummariesByIdRequestBuilder
         */
        public UpdatePrefsMinutesBetweenSummariesByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updatePrefsMinutesBetweenSummariesById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries = buildBodyParams();
            return updatePrefsMinutesBetweenSummariesByIdCall(idMember, prefsMinutesBetweenSummaries, _callback);
        }

        private PrefsMinutesBetweenSummaries buildBodyParams() {
            PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries = new PrefsMinutesBetweenSummaries();
            prefsMinutesBetweenSummaries.value(this.value);
            return prefsMinutesBetweenSummaries;
        }

        /**
         * Execute updatePrefsMinutesBetweenSummariesById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries = buildBodyParams();
            updatePrefsMinutesBetweenSummariesByIdWithHttpInfo(idMember, prefsMinutesBetweenSummaries);
        }

        /**
         * Execute updatePrefsMinutesBetweenSummariesById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries = buildBodyParams();
            return updatePrefsMinutesBetweenSummariesByIdWithHttpInfo(idMember, prefsMinutesBetweenSummaries);
        }

        /**
         * Execute updatePrefsMinutesBetweenSummariesById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries = buildBodyParams();
            return updatePrefsMinutesBetweenSummariesByIdAsync(idMember, prefsMinutesBetweenSummaries, _callback);
        }
    }

    /**
     * updateMembersPrefsMinutesBetweenSummariesByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param prefsMinutesBetweenSummaries Attributes of \&quot;Prefs Minutes Between Summaries\&quot; to be updated. (required)
     * @return UpdatePrefsMinutesBetweenSummariesByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrefsMinutesBetweenSummariesByIdRequestBuilder updatePrefsMinutesBetweenSummariesById(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UpdatePrefsMinutesBetweenSummariesByIdRequestBuilder(idMember);
    }
    private okhttp3.Call updateSavedSearchQueryByIdMemberByIdSavedSearchCall(String idMember, String idSavedSearch, MembersSavedSearchesQuery membersSavedSearchesQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersSavedSearchesQuery;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches/{idSavedSearch}/query"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idSavedSearch" + "}", localVarApiClient.escapeString(idSavedSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSavedSearchQueryByIdMemberByIdSavedSearchValidateBeforeCall(String idMember, String idSavedSearch, MembersSavedSearchesQuery membersSavedSearchesQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateSavedSearchQueryByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'idSavedSearch' is set
        if (idSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'idSavedSearch' when calling updateSavedSearchQueryByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'membersSavedSearchesQuery' is set
        if (membersSavedSearchesQuery == null) {
            throw new ApiException("Missing the required parameter 'membersSavedSearchesQuery' when calling updateSavedSearchQueryByIdMemberByIdSavedSearch(Async)");
        }

        return updateSavedSearchQueryByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, membersSavedSearchesQuery, _callback);

    }


    private ApiResponse<Void> updateSavedSearchQueryByIdMemberByIdSavedSearchWithHttpInfo(String idMember, String idSavedSearch, MembersSavedSearchesQuery membersSavedSearchesQuery) throws ApiException {
        okhttp3.Call localVarCall = updateSavedSearchQueryByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, membersSavedSearchesQuery, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSavedSearchQueryByIdMemberByIdSavedSearchAsync(String idMember, String idSavedSearch, MembersSavedSearchesQuery membersSavedSearchesQuery, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSavedSearchQueryByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, membersSavedSearchesQuery, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSavedSearchQueryByIdMemberByIdSavedSearchRequestBuilder {
        private final String idMember;
        private final String idSavedSearch;
        private String value;

        private UpdateSavedSearchQueryByIdMemberByIdSavedSearchRequestBuilder(String idMember, String idSavedSearch) {
            this.idMember = idMember;
            this.idSavedSearch = idSavedSearch;
        }

        /**
         * Set value
         * @param value a string with a length from 1 to 16384 (optional)
         * @return UpdateSavedSearchQueryByIdMemberByIdSavedSearchRequestBuilder
         */
        public UpdateSavedSearchQueryByIdMemberByIdSavedSearchRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateSavedSearchQueryByIdMemberByIdSavedSearch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersSavedSearchesQuery membersSavedSearchesQuery = buildBodyParams();
            return updateSavedSearchQueryByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, membersSavedSearchesQuery, _callback);
        }

        private MembersSavedSearchesQuery buildBodyParams() {
            MembersSavedSearchesQuery membersSavedSearchesQuery = new MembersSavedSearchesQuery();
            membersSavedSearchesQuery.value(this.value);
            return membersSavedSearchesQuery;
        }

        /**
         * Execute updateSavedSearchQueryByIdMemberByIdSavedSearch request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersSavedSearchesQuery membersSavedSearchesQuery = buildBodyParams();
            updateSavedSearchQueryByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, membersSavedSearchesQuery);
        }

        /**
         * Execute updateSavedSearchQueryByIdMemberByIdSavedSearch request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersSavedSearchesQuery membersSavedSearchesQuery = buildBodyParams();
            return updateSavedSearchQueryByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, membersSavedSearchesQuery);
        }

        /**
         * Execute updateSavedSearchQueryByIdMemberByIdSavedSearch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersSavedSearchesQuery membersSavedSearchesQuery = buildBodyParams();
            return updateSavedSearchQueryByIdMemberByIdSavedSearchAsync(idMember, idSavedSearch, membersSavedSearchesQuery, _callback);
        }
    }

    /**
     * updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param membersSavedSearchesQuery Attributes of \&quot;Members Saved Searches Query\&quot; to be updated. (required)
     * @return UpdateSavedSearchQueryByIdMemberByIdSavedSearchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSavedSearchQueryByIdMemberByIdSavedSearchRequestBuilder updateSavedSearchQueryByIdMemberByIdSavedSearch(String idMember, String idSavedSearch) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idSavedSearch == null) throw new IllegalArgumentException("\"idSavedSearch\" is required but got null");
            

        return new UpdateSavedSearchQueryByIdMemberByIdSavedSearchRequestBuilder(idMember, idSavedSearch);
    }
    private okhttp3.Call updateSavedSearchesByIdMemberByIdSavedSearchCall(String idMember, String idSavedSearch, MembersSavedSearches membersSavedSearches, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersSavedSearches;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches/{idSavedSearch}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idSavedSearch" + "}", localVarApiClient.escapeString(idSavedSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSavedSearchesByIdMemberByIdSavedSearchValidateBeforeCall(String idMember, String idSavedSearch, MembersSavedSearches membersSavedSearches, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'idSavedSearch' is set
        if (idSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'idSavedSearch' when calling updateSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'membersSavedSearches' is set
        if (membersSavedSearches == null) {
            throw new ApiException("Missing the required parameter 'membersSavedSearches' when calling updateSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        return updateSavedSearchesByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, membersSavedSearches, _callback);

    }


    private ApiResponse<Void> updateSavedSearchesByIdMemberByIdSavedSearchWithHttpInfo(String idMember, String idSavedSearch, MembersSavedSearches membersSavedSearches) throws ApiException {
        okhttp3.Call localVarCall = updateSavedSearchesByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, membersSavedSearches, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSavedSearchesByIdMemberByIdSavedSearchAsync(String idMember, String idSavedSearch, MembersSavedSearches membersSavedSearches, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSavedSearchesByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, membersSavedSearches, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSavedSearchesByIdMemberByIdSavedSearchRequestBuilder {
        private final String idMember;
        private final String idSavedSearch;
        private String name;
        private String pos;
        private String query;

        private UpdateSavedSearchesByIdMemberByIdSavedSearchRequestBuilder(String idMember, String idSavedSearch) {
            this.idMember = idMember;
            this.idSavedSearch = idSavedSearch;
        }

        /**
         * Set name
         * @param name A non-empty string with at least one non-space character (optional)
         * @return UpdateSavedSearchesByIdMemberByIdSavedSearchRequestBuilder
         */
        public UpdateSavedSearchesByIdMemberByIdSavedSearchRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set pos
         * @param pos A position. top , bottom , or a positive number. (optional)
         * @return UpdateSavedSearchesByIdMemberByIdSavedSearchRequestBuilder
         */
        public UpdateSavedSearchesByIdMemberByIdSavedSearchRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Set query
         * @param query a string with a length from 1 to 16384 (optional)
         * @return UpdateSavedSearchesByIdMemberByIdSavedSearchRequestBuilder
         */
        public UpdateSavedSearchesByIdMemberByIdSavedSearchRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Build call for updateSavedSearchesByIdMemberByIdSavedSearch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersSavedSearches membersSavedSearches = buildBodyParams();
            return updateSavedSearchesByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, membersSavedSearches, _callback);
        }

        private MembersSavedSearches buildBodyParams() {
            MembersSavedSearches membersSavedSearches = new MembersSavedSearches();
            membersSavedSearches.name(this.name);
            membersSavedSearches.pos(this.pos);
            membersSavedSearches.query(this.query);
            return membersSavedSearches;
        }

        /**
         * Execute updateSavedSearchesByIdMemberByIdSavedSearch request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersSavedSearches membersSavedSearches = buildBodyParams();
            updateSavedSearchesByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, membersSavedSearches);
        }

        /**
         * Execute updateSavedSearchesByIdMemberByIdSavedSearch request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersSavedSearches membersSavedSearches = buildBodyParams();
            return updateSavedSearchesByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, membersSavedSearches);
        }

        /**
         * Execute updateSavedSearchesByIdMemberByIdSavedSearch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersSavedSearches membersSavedSearches = buildBodyParams();
            return updateSavedSearchesByIdMemberByIdSavedSearchAsync(idMember, idSavedSearch, membersSavedSearches, _callback);
        }
    }

    /**
     * updateMembersSavedSearchesByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param membersSavedSearches Attributes of \&quot;Members Saved Searches\&quot; to be updated. (required)
     * @return UpdateSavedSearchesByIdMemberByIdSavedSearchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSavedSearchesByIdMemberByIdSavedSearchRequestBuilder updateSavedSearchesByIdMemberByIdSavedSearch(String idMember, String idSavedSearch) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idSavedSearch == null) throw new IllegalArgumentException("\"idSavedSearch\" is required but got null");
            

        return new UpdateSavedSearchesByIdMemberByIdSavedSearchRequestBuilder(idMember, idSavedSearch);
    }
    private okhttp3.Call updateSavedSearchesNameByIdMemberByIdSavedSearchCall(String idMember, String idSavedSearch, MembersSavedSearchesName membersSavedSearchesName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersSavedSearchesName;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches/{idSavedSearch}/name"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idSavedSearch" + "}", localVarApiClient.escapeString(idSavedSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSavedSearchesNameByIdMemberByIdSavedSearchValidateBeforeCall(String idMember, String idSavedSearch, MembersSavedSearchesName membersSavedSearchesName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateSavedSearchesNameByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'idSavedSearch' is set
        if (idSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'idSavedSearch' when calling updateSavedSearchesNameByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'membersSavedSearchesName' is set
        if (membersSavedSearchesName == null) {
            throw new ApiException("Missing the required parameter 'membersSavedSearchesName' when calling updateSavedSearchesNameByIdMemberByIdSavedSearch(Async)");
        }

        return updateSavedSearchesNameByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, membersSavedSearchesName, _callback);

    }


    private ApiResponse<Void> updateSavedSearchesNameByIdMemberByIdSavedSearchWithHttpInfo(String idMember, String idSavedSearch, MembersSavedSearchesName membersSavedSearchesName) throws ApiException {
        okhttp3.Call localVarCall = updateSavedSearchesNameByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, membersSavedSearchesName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSavedSearchesNameByIdMemberByIdSavedSearchAsync(String idMember, String idSavedSearch, MembersSavedSearchesName membersSavedSearchesName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSavedSearchesNameByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, membersSavedSearchesName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSavedSearchesNameByIdMemberByIdSavedSearchRequestBuilder {
        private final String idMember;
        private final String idSavedSearch;
        private String value;

        private UpdateSavedSearchesNameByIdMemberByIdSavedSearchRequestBuilder(String idMember, String idSavedSearch) {
            this.idMember = idMember;
            this.idSavedSearch = idSavedSearch;
        }

        /**
         * Set value
         * @param value A non-empty string with at least one non-space character (optional)
         * @return UpdateSavedSearchesNameByIdMemberByIdSavedSearchRequestBuilder
         */
        public UpdateSavedSearchesNameByIdMemberByIdSavedSearchRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateSavedSearchesNameByIdMemberByIdSavedSearch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersSavedSearchesName membersSavedSearchesName = buildBodyParams();
            return updateSavedSearchesNameByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, membersSavedSearchesName, _callback);
        }

        private MembersSavedSearchesName buildBodyParams() {
            MembersSavedSearchesName membersSavedSearchesName = new MembersSavedSearchesName();
            membersSavedSearchesName.value(this.value);
            return membersSavedSearchesName;
        }

        /**
         * Execute updateSavedSearchesNameByIdMemberByIdSavedSearch request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersSavedSearchesName membersSavedSearchesName = buildBodyParams();
            updateSavedSearchesNameByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, membersSavedSearchesName);
        }

        /**
         * Execute updateSavedSearchesNameByIdMemberByIdSavedSearch request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersSavedSearchesName membersSavedSearchesName = buildBodyParams();
            return updateSavedSearchesNameByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, membersSavedSearchesName);
        }

        /**
         * Execute updateSavedSearchesNameByIdMemberByIdSavedSearch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersSavedSearchesName membersSavedSearchesName = buildBodyParams();
            return updateSavedSearchesNameByIdMemberByIdSavedSearchAsync(idMember, idSavedSearch, membersSavedSearchesName, _callback);
        }
    }

    /**
     * updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param membersSavedSearchesName Attributes of \&quot;Members Saved Searches Name\&quot; to be updated. (required)
     * @return UpdateSavedSearchesNameByIdMemberByIdSavedSearchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSavedSearchesNameByIdMemberByIdSavedSearchRequestBuilder updateSavedSearchesNameByIdMemberByIdSavedSearch(String idMember, String idSavedSearch) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idSavedSearch == null) throw new IllegalArgumentException("\"idSavedSearch\" is required but got null");
            

        return new UpdateSavedSearchesNameByIdMemberByIdSavedSearchRequestBuilder(idMember, idSavedSearch);
    }
    private okhttp3.Call updateSavedSearchesPosByIdMemberByIdSavedSearchCall(String idMember, String idSavedSearch, MembersSavedSearchesPos membersSavedSearchesPos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersSavedSearchesPos;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches/{idSavedSearch}/pos"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idSavedSearch" + "}", localVarApiClient.escapeString(idSavedSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSavedSearchesPosByIdMemberByIdSavedSearchValidateBeforeCall(String idMember, String idSavedSearch, MembersSavedSearchesPos membersSavedSearchesPos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateSavedSearchesPosByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'idSavedSearch' is set
        if (idSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'idSavedSearch' when calling updateSavedSearchesPosByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'membersSavedSearchesPos' is set
        if (membersSavedSearchesPos == null) {
            throw new ApiException("Missing the required parameter 'membersSavedSearchesPos' when calling updateSavedSearchesPosByIdMemberByIdSavedSearch(Async)");
        }

        return updateSavedSearchesPosByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, membersSavedSearchesPos, _callback);

    }


    private ApiResponse<Void> updateSavedSearchesPosByIdMemberByIdSavedSearchWithHttpInfo(String idMember, String idSavedSearch, MembersSavedSearchesPos membersSavedSearchesPos) throws ApiException {
        okhttp3.Call localVarCall = updateSavedSearchesPosByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, membersSavedSearchesPos, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSavedSearchesPosByIdMemberByIdSavedSearchAsync(String idMember, String idSavedSearch, MembersSavedSearchesPos membersSavedSearchesPos, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSavedSearchesPosByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, membersSavedSearchesPos, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSavedSearchesPosByIdMemberByIdSavedSearchRequestBuilder {
        private final String idMember;
        private final String idSavedSearch;
        private String value;

        private UpdateSavedSearchesPosByIdMemberByIdSavedSearchRequestBuilder(String idMember, String idSavedSearch) {
            this.idMember = idMember;
            this.idSavedSearch = idSavedSearch;
        }

        /**
         * Set value
         * @param value A position. top , bottom , or a positive number. (optional)
         * @return UpdateSavedSearchesPosByIdMemberByIdSavedSearchRequestBuilder
         */
        public UpdateSavedSearchesPosByIdMemberByIdSavedSearchRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateSavedSearchesPosByIdMemberByIdSavedSearch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersSavedSearchesPos membersSavedSearchesPos = buildBodyParams();
            return updateSavedSearchesPosByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, membersSavedSearchesPos, _callback);
        }

        private MembersSavedSearchesPos buildBodyParams() {
            MembersSavedSearchesPos membersSavedSearchesPos = new MembersSavedSearchesPos();
            membersSavedSearchesPos.value(this.value);
            return membersSavedSearchesPos;
        }

        /**
         * Execute updateSavedSearchesPosByIdMemberByIdSavedSearch request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersSavedSearchesPos membersSavedSearchesPos = buildBodyParams();
            updateSavedSearchesPosByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, membersSavedSearchesPos);
        }

        /**
         * Execute updateSavedSearchesPosByIdMemberByIdSavedSearch request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersSavedSearchesPos membersSavedSearchesPos = buildBodyParams();
            return updateSavedSearchesPosByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, membersSavedSearchesPos);
        }

        /**
         * Execute updateSavedSearchesPosByIdMemberByIdSavedSearch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersSavedSearchesPos membersSavedSearchesPos = buildBodyParams();
            return updateSavedSearchesPosByIdMemberByIdSavedSearchAsync(idMember, idSavedSearch, membersSavedSearchesPos, _callback);
        }
    }

    /**
     * updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param membersSavedSearchesPos Attributes of \&quot;Members Saved Searches Pos\&quot; to be updated. (required)
     * @return UpdateSavedSearchesPosByIdMemberByIdSavedSearchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSavedSearchesPosByIdMemberByIdSavedSearchRequestBuilder updateSavedSearchesPosByIdMemberByIdSavedSearch(String idMember, String idSavedSearch) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        if (idSavedSearch == null) throw new IllegalArgumentException("\"idSavedSearch\" is required but got null");
            

        return new UpdateSavedSearchesPosByIdMemberByIdSavedSearchRequestBuilder(idMember, idSavedSearch);
    }
    private okhttp3.Call updateUsernameByIdCall(String idMember, MembersUsername membersUsername, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersUsername;

        // create path and map variables
        String localVarPath = "/members/{idMember}/username"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUsernameByIdValidateBeforeCall(String idMember, MembersUsername membersUsername, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateUsernameById(Async)");
        }

        // verify the required parameter 'membersUsername' is set
        if (membersUsername == null) {
            throw new ApiException("Missing the required parameter 'membersUsername' when calling updateUsernameById(Async)");
        }

        return updateUsernameByIdCall(idMember, membersUsername, _callback);

    }


    private ApiResponse<Void> updateUsernameByIdWithHttpInfo(String idMember, MembersUsername membersUsername) throws ApiException {
        okhttp3.Call localVarCall = updateUsernameByIdValidateBeforeCall(idMember, membersUsername, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateUsernameByIdAsync(String idMember, MembersUsername membersUsername, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUsernameByIdValidateBeforeCall(idMember, membersUsername, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateUsernameByIdRequestBuilder {
        private final String idMember;
        private String value;

        private UpdateUsernameByIdRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set value
         * @param value A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique. (optional)
         * @return UpdateUsernameByIdRequestBuilder
         */
        public UpdateUsernameByIdRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateUsernameById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersUsername membersUsername = buildBodyParams();
            return updateUsernameByIdCall(idMember, membersUsername, _callback);
        }

        private MembersUsername buildBodyParams() {
            MembersUsername membersUsername = new MembersUsername();
            membersUsername.value(this.value);
            return membersUsername;
        }

        /**
         * Execute updateUsernameById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersUsername membersUsername = buildBodyParams();
            updateUsernameByIdWithHttpInfo(idMember, membersUsername);
        }

        /**
         * Execute updateUsernameById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersUsername membersUsername = buildBodyParams();
            return updateUsernameByIdWithHttpInfo(idMember, membersUsername);
        }

        /**
         * Execute updateUsernameById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersUsername membersUsername = buildBodyParams();
            return updateUsernameByIdAsync(idMember, membersUsername, _callback);
        }
    }

    /**
     * updateMembersUsernameByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersUsername Attributes of \&quot;Members Username\&quot; to be updated. (required)
     * @return UpdateUsernameByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUsernameByIdRequestBuilder updateUsernameById(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UpdateUsernameByIdRequestBuilder(idMember);
    }
    private okhttp3.Call uploadAvatarByIdCall(String idMember, MembersAvatar membersAvatar, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersAvatar;

        // create path and map variables
        String localVarPath = "/members/{idMember}/avatar"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadAvatarByIdValidateBeforeCall(String idMember, MembersAvatar membersAvatar, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling uploadAvatarById(Async)");
        }

        // verify the required parameter 'membersAvatar' is set
        if (membersAvatar == null) {
            throw new ApiException("Missing the required parameter 'membersAvatar' when calling uploadAvatarById(Async)");
        }

        return uploadAvatarByIdCall(idMember, membersAvatar, _callback);

    }


    private ApiResponse<Void> uploadAvatarByIdWithHttpInfo(String idMember, MembersAvatar membersAvatar) throws ApiException {
        okhttp3.Call localVarCall = uploadAvatarByIdValidateBeforeCall(idMember, membersAvatar, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call uploadAvatarByIdAsync(String idMember, MembersAvatar membersAvatar, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadAvatarByIdValidateBeforeCall(idMember, membersAvatar, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UploadAvatarByIdRequestBuilder {
        private final String idMember;
        private String _file;

        private UploadAvatarByIdRequestBuilder(String idMember) {
            this.idMember = idMember;
        }

        /**
         * Set _file
         * @param _file A file (optional)
         * @return UploadAvatarByIdRequestBuilder
         */
        public UploadAvatarByIdRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for uploadAvatarById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersAvatar membersAvatar = buildBodyParams();
            return uploadAvatarByIdCall(idMember, membersAvatar, _callback);
        }

        private MembersAvatar buildBodyParams() {
            MembersAvatar membersAvatar = new MembersAvatar();
            membersAvatar._file(this._file);
            return membersAvatar;
        }

        /**
         * Execute uploadAvatarById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MembersAvatar membersAvatar = buildBodyParams();
            uploadAvatarByIdWithHttpInfo(idMember, membersAvatar);
        }

        /**
         * Execute uploadAvatarById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MembersAvatar membersAvatar = buildBodyParams();
            return uploadAvatarByIdWithHttpInfo(idMember, membersAvatar);
        }

        /**
         * Execute uploadAvatarById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MembersAvatar membersAvatar = buildBodyParams();
            return uploadAvatarByIdAsync(idMember, membersAvatar, _callback);
        }
    }

    /**
     * addMembersAvatarByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param membersAvatar Attributes of \&quot;Members Avatar\&quot; to be added. (required)
     * @return UploadAvatarByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public UploadAvatarByIdRequestBuilder uploadAvatarById(String idMember) throws IllegalArgumentException {
        if (idMember == null) throw new IllegalArgumentException("\"idMember\" is required but got null");
            

        return new UploadAvatarByIdRequestBuilder(idMember);
    }
}
