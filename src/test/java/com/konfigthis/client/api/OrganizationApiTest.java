/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Organizations;
import com.konfigthis.client.model.OrganizationsDesc;
import com.konfigthis.client.model.OrganizationsDisplayName;
import com.konfigthis.client.model.OrganizationsLogo;
import com.konfigthis.client.model.OrganizationsMembers;
import com.konfigthis.client.model.OrganizationsMembersDeactivated;
import com.konfigthis.client.model.OrganizationsMemberships;
import com.konfigthis.client.model.OrganizationsName;
import com.konfigthis.client.model.OrganizationsWebsite;
import com.konfigthis.client.model.PrefsAssociatedDomain;
import com.konfigthis.client.model.PrefsBoardVisibilityRestrict;
import com.konfigthis.client.model.PrefsExternalMembersDisabled;
import com.konfigthis.client.model.PrefsGoogleAppsVersion;
import com.konfigthis.client.model.PrefsOrgInviteRestrict;
import com.konfigthis.client.model.PrefsPermissionLevel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationApi
 */
@Disabled
public class OrganizationApiTest {

    private static OrganizationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OrganizationApi(apiClient);
    }

    /**
     * addOrganizations()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String desc = null;
        String displayName = null;
        String name = null;
        String prefsAssociatedDomain = null;
        String prefsBoardVisibilityRestrictOrg = null;
        String prefsBoardVisibilityRestrictPrivate = null;
        String prefsBoardVisibilityRestrictPublic = null;
        String prefsExternalMembersDisabled = null;
        String prefsGoogleAppsVersion = null;
        String prefsOrgInviteRestrict = null;
        String prefsPermissionLevel = null;
        String website = null;
        api.create()
                .desc(desc)
                .displayName(displayName)
                .name(name)
                .prefsAssociatedDomain(prefsAssociatedDomain)
                .prefsBoardVisibilityRestrictOrg(prefsBoardVisibilityRestrictOrg)
                .prefsBoardVisibilityRestrictPrivate(prefsBoardVisibilityRestrictPrivate)
                .prefsBoardVisibilityRestrictPublic(prefsBoardVisibilityRestrictPublic)
                .prefsExternalMembersDisabled(prefsExternalMembersDisabled)
                .prefsGoogleAppsVersion(prefsGoogleAppsVersion)
                .prefsOrgInviteRestrict(prefsOrgInviteRestrict)
                .prefsPermissionLevel(prefsPermissionLevel)
                .website(website)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteOrganizationsPrefsAssociatedDomainByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePrefsAssociatedDomainByIdOrgTest() throws ApiException {
        String idOrg = null;
        api.deletePrefsAssociatedDomainByIdOrg(idOrg)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsActionsByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActionsByIdOrgTest() throws ApiException {
        String idOrg = null;
        String entities = null;
        String display = null;
        String filter = null;
        String fields = null;
        String limit = null;
        String format = null;
        String since = null;
        String before = null;
        String page = null;
        String idModels = null;
        String member = null;
        String memberFields = null;
        String memberCreator = null;
        String memberCreatorFields = null;
        api.getActionsByIdOrg(idOrg)
                .entities(entities)
                .display(display)
                .filter(filter)
                .fields(fields)
                .limit(limit)
                .format(format)
                .since(since)
                .before(before)
                .page(page)
                .idModels(idModels)
                .member(member)
                .memberFields(memberFields)
                .memberCreator(memberCreator)
                .memberCreatorFields(memberCreatorFields)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsBoardsByIdOrgByFilter()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBoardsByIdOrgByFilterTest() throws ApiException {
        String idOrg = null;
        String filter = null;
        api.getBoardsByIdOrgByFilter(idOrg, filter)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsBoardsByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBoardsByOrgIdTest() throws ApiException {
        String idOrg = null;
        String filter = null;
        String fields = null;
        String actions = null;
        String actionsEntities = null;
        String actionsLimit = null;
        String actionsFormat = null;
        String actionsSince = null;
        String actionFields = null;
        String memberships = null;
        String organization = null;
        String organizationFields = null;
        String lists = null;
        api.getBoardsByOrgId(idOrg)
                .filter(filter)
                .fields(fields)
                .actions(actions)
                .actionsEntities(actionsEntities)
                .actionsLimit(actionsLimit)
                .actionsFormat(actionsFormat)
                .actionsSince(actionsSince)
                .actionFields(actionFields)
                .memberships(memberships)
                .organization(organization)
                .organizationFields(organizationFields)
                .lists(lists)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsByIdOrgByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdAndFieldTest() throws ApiException {
        String idOrg = null;
        String field = null;
        api.getByIdAndField(idOrg, field)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdOrgTest() throws ApiException {
        String idOrg = null;
        String actions = null;
        String actionsEntities = null;
        String actionsDisplay = null;
        String actionsLimit = null;
        String actionFields = null;
        String memberships = null;
        String membershipsMember = null;
        String membershipsMemberFields = null;
        String members = null;
        String memberFields = null;
        String memberActivity = null;
        String membersInvited = null;
        String membersInvitedFields = null;
        String boards = null;
        String boardFields = null;
        String boardActions = null;
        String boardActionsEntities = null;
        String boardActionsDisplay = null;
        String boardActionsFormat = null;
        String boardActionsSince = null;
        String boardActionsLimit = null;
        String boardActionFields = null;
        String boardLists = null;
        String paidAccount = null;
        String fields = null;
        api.getByIdOrg(idOrg)
                .actions(actions)
                .actionsEntities(actionsEntities)
                .actionsDisplay(actionsDisplay)
                .actionsLimit(actionsLimit)
                .actionFields(actionFields)
                .memberships(memberships)
                .membershipsMember(membershipsMember)
                .membershipsMemberFields(membershipsMemberFields)
                .members(members)
                .memberFields(memberFields)
                .memberActivity(memberActivity)
                .membersInvited(membersInvited)
                .membersInvitedFields(membersInvitedFields)
                .boards(boards)
                .boardFields(boardFields)
                .boardActions(boardActions)
                .boardActionsEntities(boardActionsEntities)
                .boardActionsDisplay(boardActionsDisplay)
                .boardActionsFormat(boardActionsFormat)
                .boardActionsSince(boardActionsSince)
                .boardActionsLimit(boardActionsLimit)
                .boardActionFields(boardActionFields)
                .boardLists(boardLists)
                .paidAccount(paidAccount)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsMembersByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersByIdOrgTest() throws ApiException {
        String idOrg = null;
        String filter = null;
        String fields = null;
        String activity = null;
        api.getMembersByIdOrg(idOrg)
                .filter(filter)
                .fields(fields)
                .activity(activity)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsMembersInvitedByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersInvitedByIdOrgTest() throws ApiException {
        String idOrg = null;
        String fields = null;
        api.getMembersInvitedByIdOrg(idOrg)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsMembersInvitedByIdOrgByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersInvitedByIdOrgByFieldTest() throws ApiException {
        String idOrg = null;
        String field = null;
        api.getMembersInvitedByIdOrgByField(idOrg, field)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsMembershipsByIdOrgByIdMembership()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembershipsByIdOrgByIdMembershipTest() throws ApiException {
        String idOrg = null;
        String idMembership = null;
        String member = null;
        String memberFields = null;
        api.getMembershipsByIdOrgByIdMembership(idOrg, idMembership)
                .member(member)
                .memberFields(memberFields)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsDeltasByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationDeltasTest() throws ApiException {
        String idOrg = null;
        String tags = null;
        String ixLastUpdate = null;
        api.getOrganizationDeltas(idOrg, tags, ixLastUpdate)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsMembersByIdOrgByFilter()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMembersByIdOrgByFilterTest() throws ApiException {
        String idOrg = null;
        String filter = null;
        api.listMembersByIdOrgByFilter(idOrg, filter)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsMembersCardsByIdOrgByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMembersCardsByIdOrgByIdMemberTest() throws ApiException {
        String idOrg = null;
        String idMember = null;
        String actions = null;
        String attachments = null;
        String attachmentFields = null;
        String members = null;
        String memberFields = null;
        String checkItemStates = null;
        String checklists = null;
        String board = null;
        String boardFields = null;
        String list = null;
        String listFields = null;
        String filter = null;
        String fields = null;
        api.listMembersCardsByIdOrgByIdMember(idOrg, idMember)
                .actions(actions)
                .attachments(attachments)
                .attachmentFields(attachmentFields)
                .members(members)
                .memberFields(memberFields)
                .checkItemStates(checkItemStates)
                .checklists(checklists)
                .board(board)
                .boardFields(boardFields)
                .list(list)
                .listFields(listFields)
                .filter(filter)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getOrganizationsMembershipsByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMembershipsByIdOrgTest() throws ApiException {
        String idOrg = null;
        String filter = null;
        String member = null;
        String memberFields = null;
        api.listMembershipsByIdOrg(idOrg)
                .filter(filter)
                .member(member)
                .memberFields(memberFields)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteOrganizationsByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdOrgTest() throws ApiException {
        String idOrg = null;
        api.removeByIdOrg(idOrg)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteOrganizationsPrefsOrgInviteRestrictByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeInviteRestrictByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.removeInviteRestrictByIdOrg(idOrg, value)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteOrganizationsLogoByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeLogoByIdOrgTest() throws ApiException {
        String idOrg = null;
        api.removeLogoByIdOrg(idOrg)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteOrganizationsMembersAllByIdOrgByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMemberAllTest() throws ApiException {
        String idOrg = null;
        String idMember = null;
        api.removeMemberAll(idOrg, idMember)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteOrganizationsMembersByIdOrgByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMemberByIdOrgByIdMemberTest() throws ApiException {
        String idOrg = null;
        String idMember = null;
        api.removeMemberByIdOrgByIdMember(idOrg, idMember)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdOrgTest() throws ApiException {
        String idOrg = null;
        String desc = null;
        String displayName = null;
        String name = null;
        String prefsAssociatedDomain = null;
        String prefsBoardVisibilityRestrictOrg = null;
        String prefsBoardVisibilityRestrictPrivate = null;
        String prefsBoardVisibilityRestrictPublic = null;
        String prefsExternalMembersDisabled = null;
        String prefsGoogleAppsVersion = null;
        String prefsOrgInviteRestrict = null;
        String prefsPermissionLevel = null;
        String website = null;
        api.updateByIdOrg(idOrg)
                .desc(desc)
                .displayName(displayName)
                .name(name)
                .prefsAssociatedDomain(prefsAssociatedDomain)
                .prefsBoardVisibilityRestrictOrg(prefsBoardVisibilityRestrictOrg)
                .prefsBoardVisibilityRestrictPrivate(prefsBoardVisibilityRestrictPrivate)
                .prefsBoardVisibilityRestrictPublic(prefsBoardVisibilityRestrictPublic)
                .prefsExternalMembersDisabled(prefsExternalMembersDisabled)
                .prefsGoogleAppsVersion(prefsGoogleAppsVersion)
                .prefsOrgInviteRestrict(prefsOrgInviteRestrict)
                .prefsPermissionLevel(prefsPermissionLevel)
                .website(website)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsDescByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDescriptionByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.updateDescriptionByIdOrg(idOrg)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsDisplayNameByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDisplayNameByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.updateDisplayNameByIdOrg(idOrg)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsMembersByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersByIdOrgTest() throws ApiException {
        String idOrg = null;
        String email = null;
        String fullName = null;
        String type = null;
        api.updateMembersByIdOrg(idOrg)
                .email(email)
                .fullName(fullName)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsMembersByIdOrgByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersByIdOrgByIdMemberTest() throws ApiException {
        String idOrg = null;
        String idMember = null;
        String email = null;
        String fullName = null;
        String type = null;
        api.updateMembersByIdOrgByIdMember(idOrg, idMember)
                .email(email)
                .fullName(fullName)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsMembersDeactivatedByIdOrgByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembersDeactivatedByIdOrgByIdMemberTest() throws ApiException {
        String idOrg = null;
        String idMember = null;
        String value = null;
        api.updateMembersDeactivatedByIdOrgByIdMember(idOrg, idMember)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsMembershipsByIdOrgByIdMembership()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembershipByIdOrgByIdMembershipTest() throws ApiException {
        String idOrg = null;
        String idMembership = null;
        String memberFields = null;
        String type = null;
        api.updateMembershipByIdOrgByIdMembership(idOrg, idMembership)
                .memberFields(memberFields)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsNameByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNameByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.updateNameByIdOrg(idOrg)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsAssociatedDomainByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePrefsAssociatedDomainByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.updatePrefsAssociatedDomainByIdOrg(idOrg)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePrefsBoardVisibilityRestrictByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.updatePrefsBoardVisibilityRestrictByIdOrg(idOrg)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePrefsBoardVisibilityRestrictPublicByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.updatePrefsBoardVisibilityRestrictPublicByIdOrg(idOrg)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsExternalMembersDisabledByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePrefsExternalMembersDisabledByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.updatePrefsExternalMembersDisabledByIdOrg(idOrg)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsGoogleAppsVersionByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePrefsGoogleAppsVersionByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.updatePrefsGoogleAppsVersionByIdOrg(idOrg)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsOrgInviteRestrictByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePrefsOrgInviteRestrictByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.updatePrefsOrgInviteRestrictByIdOrg(idOrg)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsPermissionLevelByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePrefsPermissionLevelByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.updatePrefsPermissionLevelByIdOrg(idOrg)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePrefsVisibilityByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.updatePrefsVisibilityByIdOrg(idOrg)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateOrganizationsWebsiteByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebsiteByIdOrgTest() throws ApiException {
        String idOrg = null;
        String value = null;
        api.updateWebsiteByIdOrg(idOrg)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * addOrganizationsLogoByIdOrg()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadLogoByIdOrgTest() throws ApiException {
        String idOrg = null;
        String _file = null;
        api.uploadLogoByIdOrg(idOrg)
                ._file(_file)
                .execute();
        // TODO: test validations
    }

}
