/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ActionsComments;
import com.konfigthis.client.model.Cards;
import com.konfigthis.client.model.CardsActionsComments;
import com.konfigthis.client.model.CardsAttachments;
import com.konfigthis.client.model.CardsChecklistCheckItem;
import com.konfigthis.client.model.CardsChecklistCheckItemName;
import com.konfigthis.client.model.CardsChecklistCheckItemPos;
import com.konfigthis.client.model.CardsChecklistCheckItemState;
import com.konfigthis.client.model.CardsChecklistIdChecklistCurrentCheckItem;
import com.konfigthis.client.model.CardsChecklists;
import com.konfigthis.client.model.CardsClosed;
import com.konfigthis.client.model.CardsDesc;
import com.konfigthis.client.model.CardsDue;
import com.konfigthis.client.model.CardsIdAttachmentCover;
import com.konfigthis.client.model.CardsIdBoard;
import com.konfigthis.client.model.CardsIdLabels;
import com.konfigthis.client.model.CardsIdList;
import com.konfigthis.client.model.CardsIdMembers;
import com.konfigthis.client.model.CardsLabels;
import com.konfigthis.client.model.CardsMembersVoted;
import com.konfigthis.client.model.CardsName;
import com.konfigthis.client.model.CardsPos;
import com.konfigthis.client.model.CardsStickers;
import com.konfigthis.client.model.CardsSubscribed;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CardApi
 */
@Disabled
public class CardApiTest {

    private static CardApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CardApi(apiClient);
    }

    /**
     * addCardsActionsCommentsByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addActionsCommentsByIdCardTest() throws ApiException {
        String idCard = null;
        String text = null;
        api.addActionsCommentsByIdCard(idCard)
                .text(text)
                .execute();
        // TODO: test validations
    }

    /**
     * addCardsAttachmentsByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAttachmentsByIdCardTest() throws ApiException {
        String idCard = null;
        String _file = null;
        String mimeType = null;
        String name = null;
        String url = null;
        api.addAttachmentsByIdCard(idCard)
                ._file(_file)
                .mimeType(mimeType)
                .name(name)
                .url(url)
                .execute();
        // TODO: test validations
    }

    /**
     * addCardsChecklistCheckItemByIdCardByIdChecklist()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addChecklistCheckItemTest() throws ApiException {
        String idCard = null;
        String idChecklist = null;
        String name = null;
        String pos = null;
        api.addChecklistCheckItem(idCard, idChecklist)
                .name(name)
                .pos(pos)
                .execute();
        // TODO: test validations
    }

    /**
     * addCardsChecklistsByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addChecklistsTest() throws ApiException {
        String idCard = null;
        String idChecklistSource = null;
        String name = null;
        String value = null;
        api.addChecklists(idCard)
                .idChecklistSource(idChecklistSource)
                .name(name)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * addCardsIdLabelsByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addIdLabelsToCardTest() throws ApiException {
        String idCard = null;
        String value = null;
        api.addIdLabelsToCard(idCard)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * addCardsLabelsByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLabelsTest() throws ApiException {
        String idCard = null;
        String color = null;
        String name = null;
        String value = null;
        api.addLabels(idCard)
                .color(color)
                .name(name)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * addCardsIdMembersByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersTest() throws ApiException {
        String idCard = null;
        String value = null;
        api.addMembers(idCard)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * addCardsMembersVotedByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersVotedTest() throws ApiException {
        String idCard = null;
        String value = null;
        api.addMembersVoted(idCard)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * addCardsStickersByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addStickersByIdCardTest() throws ApiException {
        String idCard = null;
        String image = null;
        String left = null;
        String rotate = null;
        String top = null;
        String zIndex = null;
        api.addStickersByIdCard(idCard)
                .image(image)
                .left(left)
                .rotate(rotate)
                .top(top)
                .zIndex(zIndex)
                .execute();
        // TODO: test validations
    }

    /**
     * addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void convertCheckItemToCardTest() throws ApiException {
        String idCard = null;
        String idChecklist = null;
        String idCheckItem = null;
        api.convertCheckItemToCard(idCard, idChecklist, idCheckItem)
                .execute();
        // TODO: test validations
    }

    /**
     * addCards()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAndUpdateTest() throws ApiException {
        String closed = null;
        String desc = null;
        String due = null;
        String fileSource = null;
        String idAttachmentCover = null;
        String idBoard = null;
        String idCardSource = null;
        String idLabels = null;
        String idList = null;
        String idMembers = null;
        String keepFromSource = null;
        String labels = null;
        String name = null;
        String pos = null;
        String subscribed = null;
        String urlSource = null;
        api.createAndUpdate()
                .closed(closed)
                .desc(desc)
                .due(due)
                .fileSource(fileSource)
                .idAttachmentCover(idAttachmentCover)
                .idBoard(idBoard)
                .idCardSource(idCardSource)
                .idLabels(idLabels)
                .idList(idList)
                .idMembers(idMembers)
                .keepFromSource(keepFromSource)
                .labels(labels)
                .name(name)
                .pos(pos)
                .subscribed(subscribed)
                .urlSource(urlSource)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteCardsAttachmentsByIdCardByIdAttachment()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAttachmentsByIdCardByIdAttachmentTest() throws ApiException {
        String idCard = null;
        String idAttachment = null;
        api.deleteAttachmentsByIdCardByIdAttachment(idCard, idAttachment)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteCardsChecklistsByIdCardByIdChecklist()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChecklistByIdCardByIdChecklistTest() throws ApiException {
        String idCard = null;
        String idChecklist = null;
        api.deleteChecklistByIdCardByIdChecklist(idCard, idChecklist)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsAttachmentsByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttachmentsByIdCardTest() throws ApiException {
        String idCard = null;
        String fields = null;
        String filter = null;
        api.getAttachmentsByIdCard(idCard)
                .fields(fields)
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsAttachmentsByIdCardByIdAttachment()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttachmentsByIdsTest() throws ApiException {
        String idCard = null;
        String idAttachment = null;
        String fields = null;
        api.getAttachmentsByIds(idCard, idAttachment)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsBoardByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBoardByIdTest() throws ApiException {
        String idCard = null;
        String fields = null;
        api.getBoardById(idCard)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsBoardByIdCardByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBoardByIdCardByFieldTest() throws ApiException {
        String idCard = null;
        String field = null;
        api.getBoardByIdCardByField(idCard, field)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String idCard = null;
        String actions = null;
        String actionsEntities = null;
        String actionsDisplay = null;
        String actionsLimit = null;
        String actionFields = null;
        String actionMemberCreatorFields = null;
        String attachments = null;
        String attachmentFields = null;
        String members = null;
        String memberFields = null;
        String membersVoted = null;
        String memberVotedFields = null;
        String checkItemStates = null;
        String checkItemStateFields = null;
        String checklists = null;
        String checklistFields = null;
        String board = null;
        String boardFields = null;
        String list = null;
        String listFields = null;
        String stickers = null;
        String stickerFields = null;
        String fields = null;
        api.getById(idCard)
                .actions(actions)
                .actionsEntities(actionsEntities)
                .actionsDisplay(actionsDisplay)
                .actionsLimit(actionsLimit)
                .actionFields(actionFields)
                .actionMemberCreatorFields(actionMemberCreatorFields)
                .attachments(attachments)
                .attachmentFields(attachmentFields)
                .members(members)
                .memberFields(memberFields)
                .membersVoted(membersVoted)
                .memberVotedFields(memberVotedFields)
                .checkItemStates(checkItemStates)
                .checkItemStateFields(checkItemStateFields)
                .checklists(checklists)
                .checklistFields(checklistFields)
                .board(board)
                .boardFields(boardFields)
                .list(list)
                .listFields(listFields)
                .stickers(stickers)
                .stickerFields(stickerFields)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsByIdCardByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdFieldTest() throws ApiException {
        String idCard = null;
        String field = null;
        api.getByIdField(idCard, field)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsListByIdCardByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCardsListByIdCardByFieldTest() throws ApiException {
        String idCard = null;
        String field = null;
        api.getCardsListByIdCardByField(idCard, field)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsCheckItemStatesByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCheckItemStatesByIdTest() throws ApiException {
        String idCard = null;
        String fields = null;
        api.getCheckItemStatesById(idCard)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsChecklistsByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChecklistsByIdTest() throws ApiException {
        String idCard = null;
        String cards = null;
        String cardFields = null;
        String checkItems = null;
        String checkItemFields = null;
        String filter = null;
        String fields = null;
        api.getChecklistsById(idCard)
                .cards(cards)
                .cardFields(cardFields)
                .checkItems(checkItems)
                .checkItemFields(checkItemFields)
                .filter(filter)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsListByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListByIdTest() throws ApiException {
        String idCard = null;
        String fields = null;
        api.getListById(idCard)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsMembersVotedByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersVotedByIdCardTest() throws ApiException {
        String idCard = null;
        String fields = null;
        api.getMembersVotedByIdCard(idCard)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsStickersByIdCardByIdSticker()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStickerByIdsTest() throws ApiException {
        String idCard = null;
        String idSticker = null;
        String fields = null;
        api.getStickerByIds(idCard, idSticker)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsStickersByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStickersByIdCardTest() throws ApiException {
        String idCard = null;
        String fields = null;
        api.getStickersByIdCard(idCard)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsActionsByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCardActionsByIdTest() throws ApiException {
        String idCard = null;
        String entities = null;
        String display = null;
        String filter = null;
        String fields = null;
        String limit = null;
        String format = null;
        String since = null;
        String before = null;
        String page = null;
        String idModels = null;
        String member = null;
        String memberFields = null;
        String memberCreator = null;
        String memberCreatorFields = null;
        api.listCardActionsById(idCard)
                .entities(entities)
                .display(display)
                .filter(filter)
                .fields(fields)
                .limit(limit)
                .format(format)
                .since(since)
                .before(before)
                .page(page)
                .idModels(idModels)
                .member(member)
                .memberFields(memberFields)
                .memberCreator(memberCreator)
                .memberCreatorFields(memberCreatorFields)
                .execute();
        // TODO: test validations
    }

    /**
     * getCardsMembersByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMembersByIdCardTest() throws ApiException {
        String idCard = null;
        String fields = null;
        api.listMembersByIdCard(idCard)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * addCardsMarkAssociatedNotificationsReadByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markAssociatedNotificationsReadTest() throws ApiException {
        String idCard = null;
        api.markAssociatedNotificationsRead(idCard)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteCardsActionsCommentsByIdCardByIdAction()
     *
     * This can only be done by the original author of the comment, or someone with higher permissions than the original author.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeActionCommentByIdCardByIdActionTest() throws ApiException {
        String idCard = null;
        String idAction = null;
        api.removeActionCommentByIdCardByIdAction(idCard, idAction)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteCardsByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdCardTest() throws ApiException {
        String idCard = null;
        api.removeByIdCard(idCard)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeChecklistCheckItemTest() throws ApiException {
        String idCard = null;
        String idChecklist = null;
        String idCheckItem = null;
        api.removeChecklistCheckItem(idCard, idChecklist, idCheckItem)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteCardsIdLabelsByIdCardByIdLabel()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeLabelByIdCardByIdLabelTest() throws ApiException {
        String idCard = null;
        String idLabel = null;
        api.removeLabelByIdCardByIdLabel(idCard, idLabel)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteCardsLabelsByIdCardByColor()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeLabelsByIdCardByColorTest() throws ApiException {
        String idCard = null;
        String color = null;
        api.removeLabelsByIdCardByColor(idCard, color)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteCardsIdMembersByIdCardByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMemberByIdMemberTest() throws ApiException {
        String idCard = null;
        String idMember = null;
        api.removeMemberByIdMember(idCard, idMember)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteCardsMembersVotedByIdCardByIdMember()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMembersVotedByIdCardByIdMemberTest() throws ApiException {
        String idCard = null;
        String idMember = null;
        api.removeMembersVotedByIdCardByIdMember(idCard, idMember)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteCardsStickersByIdCardByIdSticker()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeStickerByIdsTest() throws ApiException {
        String idCard = null;
        String idSticker = null;
        api.removeStickerByIds(idCard, idSticker)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsActionsCommentsByIdCardByIdAction()
     *
     * This can only be done by the original author of the comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateActionCommentByIdCardByIdActionTest() throws ApiException {
        String idCard = null;
        String idAction = null;
        String text = null;
        api.updateActionCommentByIdCardByIdAction(idCard, idAction)
                .text(text)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsIdAttachmentCoverByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAttachmentCoverByIdCardTest() throws ApiException {
        String idCard = null;
        String value = null;
        api.updateAttachmentCoverByIdCard(idCard)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsIdBoardByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBoardByIdCardTest() throws ApiException {
        String idCard = null;
        String idList = null;
        String value = null;
        api.updateBoardByIdCard(idCard)
                .idList(idList)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdCardTest() throws ApiException {
        String idCard = null;
        String closed = null;
        String desc = null;
        String due = null;
        String fileSource = null;
        String idAttachmentCover = null;
        String idBoard = null;
        String idCardSource = null;
        String idLabels = null;
        String idList = null;
        String idMembers = null;
        String keepFromSource = null;
        String labels = null;
        String name = null;
        String pos = null;
        String subscribed = null;
        String urlSource = null;
        api.updateByIdCard(idCard)
                .closed(closed)
                .desc(desc)
                .due(due)
                .fileSource(fileSource)
                .idAttachmentCover(idAttachmentCover)
                .idBoard(idBoard)
                .idCardSource(idCardSource)
                .idLabels(idLabels)
                .idList(idList)
                .idMembers(idMembers)
                .keepFromSource(keepFromSource)
                .labels(labels)
                .name(name)
                .pos(pos)
                .subscribed(subscribed)
                .urlSource(urlSource)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCheckItemPosByIdTest() throws ApiException {
        String idCard = null;
        String idChecklist = null;
        String idCheckItem = null;
        String value = null;
        api.updateCheckItemPosById(idCard, idChecklist, idCheckItem)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChecklistCheckItemTest() throws ApiException {
        String idCard = null;
        String idChecklistCurrent = null;
        String idCheckItem = null;
        String idChecklist = null;
        String name = null;
        String pos = null;
        String state = null;
        api.updateChecklistCheckItem(idCard, idChecklistCurrent, idCheckItem)
                .idChecklist(idChecklist)
                .name(name)
                .pos(pos)
                .state(state)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChecklistCheckItemNameByIdTest() throws ApiException {
        String idCard = null;
        String idChecklist = null;
        String idCheckItem = null;
        String value = null;
        api.updateChecklistCheckItemNameById(idCard, idChecklist, idCheckItem)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChecklistCheckItemStateTest() throws ApiException {
        String idCard = null;
        String idChecklist = null;
        String idCheckItem = null;
        String value = null;
        api.updateChecklistCheckItemState(idCard, idChecklist, idCheckItem)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsClosedByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClosedByIdTest() throws ApiException {
        String idCard = null;
        String value = null;
        api.updateClosedById(idCard)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsDescByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDescriptionByIdCardTest() throws ApiException {
        String idCard = null;
        String value = null;
        api.updateDescriptionByIdCard(idCard)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsDueByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDueByIdTest() throws ApiException {
        String idCard = null;
        String value = null;
        api.updateDueById(idCard)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsIdListByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIdListByIdCardTest() throws ApiException {
        String idCard = null;
        String value = null;
        api.updateIdListByIdCard(idCard)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsIdMembersByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIdMembersTest() throws ApiException {
        String idCard = null;
        String value = null;
        api.updateIdMembers(idCard)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsLabelsByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLabelsTest() throws ApiException {
        String idCard = null;
        String color = null;
        String name = null;
        String value = null;
        api.updateLabels(idCard)
                .color(color)
                .name(name)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsNameByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNameByIdTest() throws ApiException {
        String idCard = null;
        String value = null;
        api.updateNameById(idCard)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsPosByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePosByIdCardTest() throws ApiException {
        String idCard = null;
        String value = null;
        api.updatePosByIdCard(idCard)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsStickersByIdCardByIdSticker()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStickersByIdCardByIdStickerTest() throws ApiException {
        String idCard = null;
        String idSticker = null;
        String image = null;
        String left = null;
        String rotate = null;
        String top = null;
        String zIndex = null;
        api.updateStickersByIdCardByIdSticker(idCard, idSticker)
                .image(image)
                .left(left)
                .rotate(rotate)
                .top(top)
                .zIndex(zIndex)
                .execute();
        // TODO: test validations
    }

    /**
     * updateCardsSubscribedByIdCard()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscribedByIdCardTest() throws ApiException {
        String idCard = null;
        String value = null;
        api.updateSubscribedByIdCard(idCard)
                .value(value)
                .execute();
        // TODO: test validations
    }

}
