/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.TokensWebhooks;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokenApi
 */
@Disabled
public class TokenApiTest {

    private static TokenApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TokenApi(apiClient);
    }

    /**
     * deleteTokensByToken()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByTokenTest() throws ApiException {
        api.deleteByToken()
                .execute();
        // TODO: test validations
    }

    /**
     * getTokensByToken()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByTokenTest() throws ApiException {
        String fields = null;
        String webhooks = null;
        api.getByToken()
                .fields(fields)
                .webhooks(webhooks)
                .execute();
        // TODO: test validations
    }

    /**
     * getTokensByTokenByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByTokenByFieldTest() throws ApiException {
        String token = null;
        String field = null;
        api.getByTokenByField(token, field)
                .execute();
        // TODO: test validations
    }

    /**
     * getTokensMemberByTokenByField()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberByFieldTest() throws ApiException {
        String field = null;
        api.getMemberByField(field)
                .execute();
        // TODO: test validations
    }

    /**
     * getTokensMemberByToken()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberByTokenTest() throws ApiException {
        String fields = null;
        api.getMemberByToken()
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * getTokensWebhooksByTokenByIdWebhook()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookByIdTest() throws ApiException {
        String idWebhook = null;
        api.getWebhookById(idWebhook)
                .execute();
        // TODO: test validations
    }

    /**
     * getTokensWebhooksByToken()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhooksTest() throws ApiException {
        api.getWebhooks()
                .execute();
        // TODO: test validations
    }

    /**
     * addTokensWebhooksByToken()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerWebhookTest() throws ApiException {
        String description = null;
        String callbackURL = null;
        String idModel = null;
        api.registerWebhook()
                .description(description)
                .callbackURL(callbackURL)
                .idModel(idModel)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteTokensWebhooksByTokenByIdWebhook()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByTokenByIdWebhookTest() throws ApiException {
        String idWebhook = null;
        api.removeByTokenByIdWebhook(idWebhook)
                .execute();
        // TODO: test validations
    }

    /**
     * updateTokensWebhooksByToken()
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhooksByTokenTest() throws ApiException {
        String description = null;
        String callbackURL = null;
        String idModel = null;
        api.updateWebhooksByToken()
                .description(description)
                .callbackURL(callbackURL)
                .idModel(idModel)
                .execute();
        // TODO: test validations
    }

}
